'use strict';

(function (angular) {
  'use strict';

  angular.module('app', ['ionic', 'applicat.push.service', 'ngCordova', 'ngResource', 'ngFileUpload', 'ngTemplates', 'ngStorage', 'ngImgCrop']).
  // "ui.bootstrap.tpls",
  // "ui.bootstrap.datepicker"
  run(init);

  init.$inject = ['$ionicPlatform', '$window', '$rootScope', '$state', 'RootScope', 'Preload', 'PushService', 'DEV_MODE', 'Assets'];

  function init($ionicPlatform, $window, $rootScope, $state, RootScope, Preload, PushService, DEV_MODE, Assets) {

    Preload.assets(Assets);
    angular.extend($rootScope, RootScope);
    $window.IMP.init('imp08628342');
    if (DEV_MODE) {
      setInitialState();
    }

    $ionicPlatform.ready(onIonicPlatformReady);

    //====================================================
    //  Implementation
    //====================================================
    function onIonicPlatformReady() {
      if ($window.cordova && $window.cordova.plugins.Keyboard) {
        // PushService.registerDevice();
        $window.cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
      }
      if ($window.StatusBar) {
        $window.StatusBar.styleDefault();
      }
      setInitialState();
    }
    //====================================================
    //  Helper
    //====================================================
    function setInitialState() {
      if ($rootScope.AppStorage.isFirstTime && $state.get('Main.WalkThrough')) {
        // First time user logic
        $state.go('Main.WalkThrough');
      } else if (!$rootScope.AppStorage.token) {
        // $state.go('Main.Home');
        $state.go('Login');
        // $state.go('Main.Test');
        // $state.go('Login');
      } else {
          $state.go('Main.Comment.CommentList');
        }
    }
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').config(route);
  route.$inject = ['$stateProvider', '$httpProvider', '$ionicConfigProvider'];

  function route($stateProvider, $httpProvider, $ionicConfigProvider) {

    $ionicConfigProvider.scrolling.jsScrolling(true);
    $httpProvider.interceptors.push('AuthInterceptor');

    $stateProvider.state('Main', {
      url: '/Main',
      templateUrl: 'state/0Main/Main.html',
      controller: 'MainController as Main'
    }).state('Login', {
      url: '/Login',
      templateUrl: 'state/Login/Login.html',
      controller: 'LoginController as Login'
    })
    //====================================================
    // Banner
    //====================================================
    .state('Main.Banner', {
      url: '/Banner',
      views: {
        Main: {
          templateUrl: 'state/Banner/Banner.html'
        }
      }
    }).state('Main.Banner.BannerList', {
      url: '/BannerList',
      views: {
        Banner: {
          templateUrl: 'state/Banner/BannerList/BannerList.html',
          controller: 'BannerListController as vm'
        }
      }
    }).state('Main.Banner.BannerCreate', {
      url: '/BannerCreate',
      views: {
        Banner: {
          templateUrl: 'state/Banner/BannerCreate/BannerCreate.html',
          controller: 'BannerCreateController as vm'
        }
      }
    }).state('Main.Banner.BannerUpdate', {
      url: '/BannerUpdate/:id',
      views: {
        Banner: {
          templateUrl: 'state/Banner/BannerUpdate/BannerUpdate.html',
          controller: 'BannerUpdateController as vm'
        }
      }
    })

    //====================================================
    // Event
    //====================================================
    .state('Main.Event', {
      url: '/Event',
      views: {
        Main: {
          templateUrl: 'state/Event/Event.html'
        }
      }
    }).state('Main.Event.EventList', {
      url: '/EventList',
      views: {
        Event: {
          templateUrl: 'state/Event/EventList/EventList.html',
          controller: 'EventListController as vm'
        }
      }
    }).state('Main.Event.EventCreate', {
      url: '/EventCreate',
      views: {
        Event: {
          templateUrl: 'state/Event/EventCreate/EventCreate.html',
          controller: 'EventCreateController as vm'
        }
      }
    }).state('Main.Event.EventUpdate', {
      url: '/EventUpdate/:id',
      views: {
        Event: {
          templateUrl: 'state/Event/EventUpdate/EventUpdate.html',
          controller: 'EventUpdateController as vm'
        }
      }
    })

    //====================================================
    // Place
    //====================================================
    .state('Main.Place', {
      url: '/Place',
      views: {
        Main: {
          templateUrl: 'state/Place/Place.html'
        }
      }
    }).state('Main.Place.PlaceList', {
      url: '/PlaceList',
      views: {
        Place: {
          templateUrl: 'state/Place/PlaceList/PlaceList.html',
          controller: 'PlaceListController as vm'
        }
      }
    }).state('Main.Place.PlaceCreate', {
      url: '/PlaceCreate',
      views: {
        Place: {
          templateUrl: 'state/Place/PlaceCreate/PlaceCreate.html',
          controller: 'PlaceCreateController as vm'
        }
      }
    }).state('Main.Place.PlaceUpdate', {
      params: {
        flag: ''
      },
      url: '/PlaceUpdate/:id',
      views: {
        Place: {
          templateUrl: 'state/Place/PlaceUpdate/PlaceUpdate.html',
          controller: 'PlaceUpdateController as vm'
        }
      }
    })

    //====================================================
    // Post
    //====================================================
    .state('Main.Post', {
      url: '/Post',
      views: {
        Main: {
          templateUrl: 'state/Post/Post.html'
        }
      }
    }).state('Main.Post.PostList', {
      url: '/PostList',
      views: {
        Post: {
          templateUrl: 'state/Post/PostList/PostList.html',
          controller: 'PostListController as vm'
        }
      }
    }).state('Main.Post.PostCreate', {
      url: '/PostCreate',
      views: {
        Post: {
          templateUrl: 'state/Post/PostCreate/PostCreate.html',
          controller: 'PostCreateController as vm'
        }
      }
    }).state('Main.Post.PostUpdate', {
      url: '/PostUpdate/:id',
      views: {
        Post: {
          templateUrl: 'state/Post/PostUpdate/PostUpdate.html',
          controller: 'PostUpdateController as vm'
        }
      }
    })

    //====================================================
    // Review
    //====================================================
    .state('Main.Review', {
      url: '/Review',
      views: {
        Main: {
          templateUrl: 'state/Review/Review.html'
        }
      }
    }).state('Main.Review.ReviewList', {
      url: '/ReviewList',
      views: {
        Review: {
          templateUrl: 'state/Review/ReviewList/ReviewList.html',
          controller: 'ReviewListController as vm'
        }
      }
    }).state('Main.Review.ReviewCreate', {
      url: '/ReviewCreate',
      views: {
        Review: {
          templateUrl: 'state/Review/ReviewCreate/ReviewCreate.html',
          controller: 'ReviewCreateController as vm'
        }
      }
    }).state('Main.Review.ReviewUpdate', {
      url: '/ReviewUpdate/:id',
      views: {
        Review: {
          templateUrl: 'state/Review/ReviewUpdate/ReviewUpdate.html',
          controller: 'ReviewUpdateController as vm'
        }
      }
    })

    //====================================================
    // Comment
    //====================================================
    .state('Main.Comment', {
      url: '/Comment',
      views: {
        Main: {
          templateUrl: 'state/Comment/Comment.html'
        }
      }
    }).state('Main.Comment.CommentList', {
      url: '/CommentList',
      views: {
        Comment: {
          templateUrl: 'state/Comment/CommentList/CommentList.html',
          controller: 'CommentListController as vm'
        }
      }
    }).state('Main.Comment.CommentCreate', {
      url: '/CommentCreate',
      views: {
        Comment: {
          templateUrl: 'state/Comment/CommentCreate/CommentCreate.html',
          controller: 'CommentCreateController as vm'
        }
      }
    }).state('Main.Comment.CommentUpdate', {
      url: '/CommentUpdate/:id',
      views: {
        Comment: {
          templateUrl: 'state/Comment/CommentUpdate/CommentUpdate.html',
          controller: 'CommentUpdateController as vm'
        }
      }
    })

    //====================================================
    // Push
    //====================================================
    .state('Main.Push', {
      url: '/Push',
      views: {
        Main: {
          templateUrl: 'state/Push/Push.html'
        }
      }
    }).state('Main.Push.PushCreate', {
      url: '/PushCreate',
      views: {
        Push: {
          templateUrl: 'state/Push/PushCreate/PushCreate.html',
          controller: 'PushCreateController as vm'
        }
      }
    })

    //====================================================
    //  ZZZ Samples
    //====================================================

    .state('zLogin', {
      url: '/zLogin',
      templateUrl: 'state/ZZZ/Login/Login.html',
      controller: 'zLoginController as Login'
    }).state('Main.zSignup', {
      url: '/zSignup',
      templateUrl: 'state/ZZZ/Signup/Signup.html',
      controller: 'zSignupController as Signup'
    }).state('Main.zTerms', {
      url: '/zTerms',
      templateUrl: 'state/ZZZ/Terms/Terms.html',
      controller: 'zTermsController as Terms'
    }).state('Main.zPostList', {
      url: '/zPostList',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/PostList/PostList.html',
          controller: 'zPostListController as PostList'
        }
      }
    }).state('Main.zPostDetail', {
      url: '/zPostDetail/:id',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/PostDetail/PostDetail.html',
          controller: 'zPostDetailController as PostDetail'
        }
      }
    }).state('Main.zPostUpdate', {
      url: '/zPostUpdate/:id',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/PostUpdate/PostUpdate.html',
          controller: 'zPostUpdateController as PostUpdate'
        }
      }
    }).state('Main.zPostCreate', {
      url: '/zPostCreate',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/PostCreate/PostCreate.html',
          controller: 'zPostCreateController as PostCreate'
        }
      }
    }).state('Main.zCouponList', {
      url: '/zCouponList',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/CouponList/CouponList.html',
          controller: 'zCouponListController as CouponList'
        }
      }
    }).state('Main.zCouponDetail', {
      url: '/zCouponDetail',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/CouponDetail/CouponDetail.html',
          controller: 'zCouponDetailController as CouponDetail'
        }
      }
    }).state('Main.zProfile', {
      url: '/zProfile',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/Profile/Profile.html',
          controller: 'zProfileController as Profile'
        }
      }
    }).state('Main.zPassword', {
      url: '/zPassword',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/Password/Password.html',
          controller: 'zPasswordController as Password'
        }
      }
    });
  } //route end
})(angular);
'use strict';

// Used to preload assets. Done automatically in gulp
(function (angular) {
  'use strict';

  angular.module('app').value('Assets', ["img/ad.png", "img/ad_tap.png", "img/event.png", "img/event_tap.png", "img/keyword_hover_icon01.png", "img/keyword_hover_icon02.png", "img/keyword_hover_icon03.png", "img/keyword_hover_icon04.png", "img/keyword_hover_icon05.png", "img/keyword_hover_icon06.png", "img/keyword_hover_icon07.png", "img/keyword_hover_icon08.png", "img/keyword_hover_icon09.png", "img/keyword_hover_icon10.png", "img/keyword_hover_icon11.png", "img/keyword_hover_icon12.png", "img/keyword_hover_icon13.png", "img/keyword_hover_icon14.png", "img/keyword_hover_icon15.png", "img/keyword_hover_icon16.png", "img/keyword_icon01.png", "img/keyword_icon02.png", "img/keyword_icon03.png", "img/keyword_icon04.png", "img/keyword_icon05.png", "img/keyword_icon06.png", "img/keyword_icon07.png", "img/keyword_icon08.png", "img/keyword_icon09.png", "img/keyword_icon10.png", "img/keyword_icon11.png", "img/keyword_icon12.png", "img/keyword_icon13.png", "img/keyword_icon14.png", "img/keyword_icon15.png", "img/keyword_icon16.png", "img/like.png", "img/like_tap.png", "img/list.png", "img/list_tap.png", "img/message.png", "img/message_tap.png", "img/notice.png", "img/notice_tap.png", "img/phone.png", "img/phone_tap.png", "img/photo.png", "img/photo_tap.png", "img/place.png", "img/place_tap.png", "img/price.png", "img/price_tap.png", "img/push.png", "img/push_tap.png", "img/rank.png", "img/rank_tap.png", "img/reply.png", "img/reply_tap.png", "img/reserch.png", "img/reserch_tap.png", "img/review.png", "img/review_tap.png", "img/user.png", "img/user_tap.png", "img/vote.png", "img/vote_tap.png"]);
})(angular);
'use strict';

// App constants
(function (angular) {
  'use strict';

  angular.module('app')
  // Social login with Kakao
  .constant("KAKAO_KEY", "abcdefghijklmnopqrstu0123456789")
  // Social login with Facebook
  .constant("FACEBOOK_KEY", "1234567890123456")
  // Social login with twitter
  .constant("TWITTER_CONSUMER_KEY", "abCde1GHiJklmn2PqRSTuVWXY").constant("TWITTER_CONSUMER_SECRET", "a1CDefGhIjK2MNopQRst3VwXY4zabC5Ef6HIJK6MNOpQrsTUVw")
  // social login with google+
  .constant("GOOGLE_OAUTH_CLIENT_ID", "12345678901-abcde2gh3j4lmn5p6rs7uvw8x90y1234.apps.googleusercontent.com")
  // Used for sending push notification
  .constant("GOOGLE_PROJECT_NUMBER", "12345678901")
  // Development mode
  .constant("DEV_MODE", true)
  // Server
  .constant("SERVER_URL", "http://192.168.0.65:1337").constant("OAUTH_CALLBACK_URL", "http://localhost/callback").constant("APP_NAME", "JOODANG_ADMIN").constant("APP_NAME_KOREAN", "주당 어드민").constant("APP_ID", 13);
})(angular);
'use strict';

// Global variables
/* beautify preserve:start */
(function (angular) {
  'use strict';

  angular.module('app').value('Province', {

    '서울': [{ text: '강남/역삼/서초' }, { text: '잠실/신천' }, { text: '영등포/구로/금천' }, { text: '강서/화곡/까치산역/목동' }, { text: '천호/길동/둔촌' }, { text: '서울대/신림/사당' }, { text: '종로/명동/용산' }, { text: '수유/성북/도봉/노원/대학로' }, { text: '왕십리/성수/건대' }, { text: '동대문/장안/중랑/상봉' }, { text: '홍대/신촌/은평' }],

    '경기': [{ text: '수원/인계/권선/세류/영통' }, { text: '수원역/팔달문/북문/구운/장안' }, { text: '안성/평택/송탄' }, { text: '오산/화성' }, { text: '파주/일산/김포' }, { text: '의정부/양주' }, { text: '부천' }, { text: '과천/안양/군포/의왕' }, { text: '안산' }, { text: '광명/시흥' }, { text: '용인/이천/여주' }, { text: '성남' }, { text: '구리/하남/남양주/가평/양평' }, { text: '포천/동두천/연천' }],

    '인천': [{ text: '부평' }, { text: '주안' }, { text: '계양/서구/동암/남동구' }, { text: '남구/동구/중구' }, { text: '송도/강화/옹진' }],

    '강원': [{ text: '경포대/강릉/정동진' }, { text: '속초/양양/고성' }, { text: '춘천/홍천/인제' }, { text: '원주/횡성' }, { text: '동해/삼천/태백' }, { text: '평창/영월/정선' }],

    '부산': [{ text: '해운대/재송' }, { text: '송정/기장' }, { text: '서면/초읍/양정' }, { text: '연산/토곡' }, { text: '동래/온천장/부산대' }, { text: '부산역/남포동/송도/영도' }, { text: '광안리/경성대/남구' }, { text: '사상/덕천/북구' }, { text: '하단/사하/명지' }],

    '경남': [{ text: '김해/장유' }, { text: '양산/밀양' }, { text: '거제/통영' }, { text: '진주/사천/남해/고성' }, { text: '창원/진해' }, { text: '마산' }, { text: '거창/산청/의령/합천' }],

    '대구': [{ text: '동성로/수성구/남구/서구' }, { text: '동대구역/경북대/신천/북구' }, { text: '성서/죽전/달서구' }],

    '경북': [{ text: '경주' }, { text: '구미/김천' }, { text: '포항/영덕/울진' }, { text: '영천/칠곡/경산/청도' }, { text: '문경/상주/안동/영주/청송' }],

    '대전': [{ text: '중구/은행' }, { text: '유성' }, { text: '동구/대덕/용전' }, { text: '서구/둔산/괴정' }],

    '충남': [{ text: '천안/세종' }, { text: '계룡/공주/금산/논산/영동' }, { text: '아산/예산/청양/홍성' }, { text: '태안/당진/안면도/서산' }, { text: '대천/보령/서천/부여' }],

    '충북': [{ text: '청주' }, { text: '충주/제천/단양' }, { text: '증평/진천/음성/괴산' }],

    '광주': [{ text: '광산구/북구/동구' }, { text: '서구/남구' }],

    '전남': [{ text: '순천/여수/광양' }, { text: '목포/무안/해남/나주' }, { text: '화순/고흥/담양/장성/곡성' }],

    '울산': [{ text: '남구/중구' }, { text: '동구/울주군' }],

    '전북': [{ text: '전주' }, { text: '군산/익산' }, { text: '김제/부안/임실/정읍' }],

    '제주': [{ text: '제주시' }, { text: '서귀포' }]
  }).value('UniqueKeywords', [{
    title: '포차/호프',
    photoUrl: 'img/keyword_icon01.png',
    photoHoverUrl: 'img/keyword_hover_icon01.png'
  }, {
    title: 'Pub',
    photoUrl: 'img/keyword_icon02.png',
    photoHoverUrl: 'img/keyword_hover_icon02.png'
  }, {
    title: 'Bar/라운지',
    photoUrl: 'img/keyword_icon03.png',
    photoHoverUrl: 'img/keyword_hover_icon03.png'
  }, {
    title: '이자카야',
    photoUrl: 'img/keyword_icon04.png',
    photoHoverUrl: 'img/keyword_hover_icon04.png'
  }, {
    title: 'Beer',
    photoUrl: 'img/keyword_icon05.png',
    photoHoverUrl: 'img/keyword_hover_icon05.png'
  }, {
    title: '와인',
    photoUrl: 'img/keyword_icon06.png',
    photoHoverUrl: 'img/keyword_hover_icon06.png'
  }, {
    title: '전통주점',
    photoUrl: 'img/keyword_icon07.png',
    photoHoverUrl: 'img/keyword_hover_icon07.png'
  }, {
    title: '퓨전주점',
    photoUrl: 'img/keyword_icon08.png',
    photoHoverUrl: 'img/keyword_hover_icon08.png'
  }]).value('MultipleKeywords', [{
    title: '음식',
    photoUrl: 'img/keyword_icon09.png',
    photoHoverUrl: 'img/keyword_hover_icon09.png'
  }, {
    title: '24시',
    photoUrl: 'img/keyword_icon10.png',
    photoHoverUrl: 'img/keyword_hover_icon10.png'
  }, {
    title: '조용한',
    photoUrl: 'img/keyword_icon11.png',
    photoHoverUrl: 'img/keyword_hover_icon11.png'
  }, {
    title: '편한의자',
    photoUrl: 'img/keyword_icon12.png',
    photoHoverUrl: 'img/keyword_hover_icon12.png'
  }, {
    title: '내부화장실',
    photoUrl: 'img/keyword_icon13.png',
    photoHoverUrl: 'img/keyword_hover_icon13.png'
  }, {
    title: '좌식',
    photoUrl: 'img/keyword_icon14.png',
    photoHoverUrl: 'img/keyword_hover_icon14.png'
  }, {
    title: '흡연가능',
    photoUrl: 'img/keyword_icon15.png',
    photoHoverUrl: 'img/keyword_hover_icon15.png'
  }, {
    title: '싸다',
    photoUrl: 'img/keyword_icon16.png',
    photoHoverUrl: 'img/keyword_hover_icon16.png'
  }]);
})(angular);
/* beautify preserve:end */
'use strict';

// Set authorization header(token based), if in dev mode use Admin token
//by logging in through admin page and copy past in `adminTOKEN`;
(function (angular) {
  'use strict';

  angular.module('app').factory('AuthInterceptor', AuthInterceptor);

  AuthInterceptor.$inject = ['AppStorage'];

  function AuthInterceptor(AppStorage) {

    var interceptor = {
      request: request
    };

    return interceptor;

    function request(req) {
      var token = AppStorage.token;
      if (token) {
        if (req.headers.enctype && req.headers.enctype.includes('multipart/form-data')) {
          console.log("---------- 'req.headers.enctype.includes multipart/form-date AuthInterceptor' ----------");
        } else {
          req.headers['Content-Type'] = 'application/json';
        }
        req.headers.Authorization = 'Bearer ' + token;
      }
      return req;
    }
  }
})(angular);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Utility
(function (angular) {
  'use strict';

  angular.module('app').factory('PhotoClass', PhotoClass);

  PhotoClass.$inject = ['$window', 'Message'];

  function PhotoClass($window, Message) {
    var _ = $window._;

    return function () {
      function Photo() {
        _classCallCheck(this, Photo);
      }

      _createClass(Photo, [{
        key: 'pushToImages',

        // (banner.photos, Model.images)
        // on banner response push photos to images
        value: function pushToImages(imagesArray, photos) {
          if (!Array.isArray(photos)) {
            photos = photos ? [photos] : [];
          }
          if (!Array.isArray(imagesArray)) {
            imagesArray = [];
          }
          angular.forEach(photos, function (photo) {
            imagesArray.push(photo);
          });
        }

        // on deselect photo remove photo from images      ?, and add photo.id to destroy
        // on deselect file remove file from images

      }, {
        key: 'deselectImage',
        value: function deselectImage(imagesArray, $index) {
          if (imagesArray[$index].id) {
            // is a photo
            imagesArray.splice($index, 1);
          } else if (imagesArray[$index].name) {
            // is a file
            imagesArray.splice($index, 1);
          } else {
            console.log("'not a photo/file --deselectImage--'");
            return false;
          }
        }

        // on new tempFiles push to images i.e on ngf-select;

      }, {
        key: 'selectImage',
        value: function selectImage(imagesArray, tempFiles, limit) {
          if (!Array.isArray(imagesArray)) {
            imagesArray = [];
            console.log('vm.Model.images not defined');
          }
          if (!Array.isArray(tempFiles)) {
            tempFiles = [];
            console.log('vm.Model.tempFiles not defined');
          }
          angular.forEach(tempFiles, function (file) {
            imagesArray.push(file);
          });
          if (imagesArray.length > limit) {
            Message.alert('사진수 초과', '사진은 최대 ' + limit + '개 까지만 업로드 가능합니다.');
            imagesArray.splice(limit, imagesArray.length);
          }
        }

        // onBefore request, loop images and find index of file
        // and add {index: $indexOfFile} to create

      }, {
        key: 'processCreate',
        value: function processCreate(imagesArray, createArray, files) {
          if (!Array.isArray(files)) {
            files = [];
          }
          angular.forEach(imagesArray, function (image, i) {
            if (!image.id) {
              files.push(image);
              createArray.push({ index: i });
            }
          });
        }

        // onBefore request, find photos to delete and add to delete array
        // finde difference between images and photos and create destroy array

      }, {
        key: 'processDestroy',
        value: function processDestroy(imagesArray, destroyArray, initialPhotos) {
          if (!Array.isArray(initialPhotos)) {
            initialPhotos = initialPhotos ? [initialPhotos] : [];
          }
          if (!Array.isArray(destroyArray)) {
            destroyArray = [destroyArray];
          }
          var photosArray = [];
          angular.forEach(imagesArray, function (image) {
            if (image.id) {
              photosArray.push(image);
            }
          });
          var idInImages = _.map(photosArray, 'id');
          var idInInitialPhotos = _.map(initialPhotos, 'id');
          var differences = _.difference(idInInitialPhotos, idInImages);
          angular.forEach(differences, function (toDeleteId) {
            destroyArray.push(toDeleteId);
          });
        }

        // on response of created photoIds create array of photoIds with exsiting non-file images
        // prepend to photos.

      }, {
        key: 'createPhotoIds',
        value: function createPhotoIds(imagesArray, initialPhotos, createdPhotoIds) {
          if (!initialPhotos) {
            initialPhotos = [];
          }
          if (!Array.isArray(initialPhotos)) {
            initialPhotos = [initialPhotos];
          }
          var photosArray = [];
          angular.forEach(imagesArray, function (image) {
            if (image.id) {
              photosArray.push(image);
            }
          });
          var idInImages = _.map(photosArray, 'id');
          var idInPhotos = _.map(initialPhotos, 'id');
          var intersection = _.intersection(idInImages, idInPhotos);
          var photos = _.concat(intersection, createdPhotoIds);
          return photos;
        }
      }]);

      return Photo;
    }();
  } // Service END
})(angular);
'use strict';

// local storage wrapper, name spaced.
(function (angular) {
  'use strict';

  angular.module('app').factory('AppStorage', AppStorage);

  AppStorage.$inject = ['$localStorage', 'APP_NAME'];

  function AppStorage($localStorage, APP_NAME) {

    setInitialState();

    return $localStorage[APP_NAME];

    //====================================================
    //  Implementations
    //====================================================
    function setInitialState() {
      if (!$localStorage[APP_NAME]) {
        $localStorage[APP_NAME] = {};
      }
      var storage = $localStorage[APP_NAME];
      if (storage.isFirstTime === undefined) {
        storage.isFirstTime = true;
      }
    }

    //====================================================
    //  Helper
    //====================================================
  }
})(angular);
'use strict';

// Usage
// Distance.between({latitude: 33, longitude: 33}, {latitude: 44, longitude:44});

// Output: distance between two points in meters.
// 20000
(function (angular) {
  'use strict';

  angular.module('app').factory('Distance', Distance);

  Distance.$inject = ['$window'];

  function Distance($window) {

    var service = {
      between: $window.geolib.getDistance
    };

    return service;
  }
})(angular);
'use strict';

// Simple dom manipulation when making directive is a overkill
// USAGE;
// In View;
//<input id="daum-map-search-input" type="text">
// In controller;
//Dom.focusById('daum-map-search-input');
(function (angular) {
  'use strict';

  angular.module('app').factory('Dom', Dom);

  Dom.$inject = ['$timeout', '$window'];

  function Dom($timeout, $window) {
    var service = {
      focusById: focusById,
      blurById: blurById
    };

    return service;

    function focusById(id) {
      $timeout(function () {
        var domElement = $window.document.getElementById(id);
        if (domElement) {
          domElement.focus();
        }
      }, 0);
    }

    function blurById(id) {
      $timeout(function () {
        var domElement = $window.document.getElementById(id);
        if (domElement) {
          domElement.blur();
        }
      }, 0);
    }
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('ErrorService', ErrorService);

  ErrorService.$inject = ['Dom', 'Message'];

  function ErrorService(Dom, Message) {
    var service = {
      handleError: handleError
    };

    return service;

    function handleError(err) {
      if (err.data && err.data.invalidAttributes && err.data.invalidAttributes.username) {
        return Message.alert('회원가입 알림', '이미 존제하는 이메일입니다. 다른이메일을 입력해주세요.').then(function () {
          Dom.focusById('email');
        });
      } else if (err.data && err.data.invalidAttributes && err.data.invalidAttributes.email) {
        return Message.alert('회원가입 알림', '이미 존제하는 이메일입니다. 다른이메일을 입력해주세요.').then(function () {
          Dom.focusById('email');
        });
      } else if (err === 'Problem authenticating') {
        Message.alert('로그인 알림', '로그인이 잘못 되었습니다. 다시 시도해주세요.');
      } else if (err === 'Facebook returned error_code=100: Invalid permissions') {
        Message.alert('로그인 알림', '로그인이 잘못 되었습니다. 다시 시도해주세요.');
      } else if (err === 'The sign in flow was canceled') {
        Message.alert('로그인 알림', '로그인을 취소 하셨습니다.');
      } else if (err.message === 'ionic:confirm:no') {
        Message.alert('글 삭제 알림', '글 삭제를 취소 하셨습니다.');
      } else {
        return Message.alert();
      }
    }
  }
})(angular);
'use strict';

// like post avaiable to call from $rootScope
(function (angular) {
  'use strict';

  angular.module('app').factory('Favorite', Favorite);

  Favorite.$inject = ['$timeout', 'AppStorage', 'Posts', 'Message', 'Places', 'Events'];

  function Favorite($timeout, AppStorage, Posts, Message, Places, Events) {

    var service = {
      toggleSaveToFavorite: toggleSaveToFavorite,
      isFavorite: isFavorite,

      likePost: likePost,
      likePlace: likePlace,
      likeEvent: likeEvent
    };

    return service;
    //====================================================
    //  Favorite.toggleSaveToFavorite
    //====================================================
    // Usage;
    //Favorite.toggleFavorite('1asf31sf1adf31')
    // Output(localStorage favorites array);
    //AppStorage.favorites.
    function toggleSaveToFavorite(id) {
      if (!Array.isArray(AppStorage.favorites)) {
        AppStorage.favorites = [];
      }
      if (isFavorite(id)) {
        //delte favorite
        var index = AppStorage.favorites.indexOf(id);
        AppStorage.favorites.splice(index, 1);
      } else if (!isFavorite(id)) {
        // add favorite
        AppStorage.favorites.push(id);
      }
      return AppStorage.favorites;
    }

    //====================================================
    //  Favorite.isFavorite
    //====================================================
    // Usage;
    //Favorite.isFavorite('1asf31sf1adf31')
    // Output(boolean if id exists in AppStorage.favorites);
    //true || false
    function isFavorite(id) {
      if (!Array.isArray(AppStorage.favorites)) {
        AppStorage.favorites = [];
      }
      for (var i = 0; i < AppStorage.favorites.length; i++) {
        if (String(id) === String(AppStorage.favorites[i])) {
          return true;
        }
      }
      return false;
    }

    function likePost(postObj) {
      Message.loading();
      Posts.like({}, {
        post: postObj.id
      }).$promise.then(function (post) {
        if (post.message) {
          Message.alert('좋아요 알림', post.message);
        } else {
          $timeout(function () {
            postObj.likes = post.likes;
            Message.alert('좋아요 알림', '좋아요 성공!');
          }, 0);
        }
        console.log("---------- post ----------");
        console.log(post);
      }).catch(function (err) {
        Message.hide();
        Message.alert();
        console.log("---------- err ----------");
        console.log(err);
      });
    }

    function likePlace(placeObj) {
      Message.loading();
      Places.like({}, {
        place: placeObj.id
      }).$promise.then(function (place) {
        if (place.message) {
          Message.alert('좋아요 알림', place.message);
        } else {
          $timeout(function () {
            placeObj.likes = place.likes;
            Message.alert('좋아요 알림', '좋아요 성공!');
          }, 0);
        }
        console.log("---------- place ----------");
        console.log(place);
      }).catch(function (err) {
        Message.hide();
        Message.alert();
        console.log("---------- err ----------");
        console.log(err);
      });
    }

    function likeEvent(eventObj) {
      Message.loading();
      Events.like({}, {
        event: eventObj.id
      }).$promise.then(function (event) {
        if (event.message) {
          Message.alert('좋아요 알림', event.message);
        } else {
          $timeout(function () {
            eventObj.likes = event.likes;
            Message.alert('좋아요 알림', '좋아요 성공!');
          }, 0);
        }
        console.log("---------- event ----------");
        console.log(event);
      }).catch(function (err) {
        Message.hide();
        if (err.data.message) {
          Message.alert('좋아요 알림', err.data.message);
        } else {
          Message.alert();
        }
        console.log("---------- err ----------");
        console.log(err);
      });
    }
  } // Service END
})(angular);
'use strict';

// Used to call external resource such as external browser, calling phone, and social sharing;
// Dependencies
//Cordova InAppBrowser
//Cordova SocialSharing
(function (angular) {
  'use strict';

  angular.module('app').factory('Link', Link);

  Link.$inject = ['$window', '$cordovaSocialSharing', '$state', 'AppStorage', 'Message'];

  function Link($window, $cordovaSocialSharing, $state, AppStorage, Message) {

    var service = {
      call: call,
      open: open,
      share: share
    };
    return service;

    //====================================================
    //  Link.call Usage
    //====================================================
    //Link.call(01011010101)
    // Output
    //phone call
    function call(phone) {
      if (!phone) {
        Message.alert('전화하기 알림', '전화가 없습니다.');
        return false;
      }
      phone = String(phone);
      if (phone[0] !== '0') {
        phone = '0' + phone;
      }
      var phoneArray = phone.split('');
      var indexParen = phoneArray.indexOf(')');
      if (indexParen !== -1) {
        phoneArray.splice(indexParen, 1);
      }
      var indexDash = phoneArray.indexOf('-');
      if (indexDash !== -1) {
        phoneArray.splice(indexDash, 1);
      }
      indexDash = phoneArray.indexOf('-');
      if (indexDash !== -1) {
        phoneArray.splice(indexDash, 1);
      }
      indexDash = phoneArray.indexOf('-');
      if (indexDash !== -1) {
        phoneArray.splice(indexDash, 1);
      }
      phone = phoneArray.join('');
      $window.location.href = 'tel:' + phone;
    }

    //====================================================
    //  Link.openLink Usage
    //====================================================
    //Link.openLink('http://www.applicat.co.kr');
    // Output
    //InAppBrowser open new window with url
    function open(link) {
      return $window.open(link, '_system');
    }

    //====================================================
    //  Link.share Usage
    //====================================================
    // Link.share('my title', 'my content stuff', 'http://www.applicat.co.kr')
    // Output
    //Social Share title content and link
    function share(title, content, url) {
      return $cordovaSocialSharing.share(title, content, null, url).then(function (suc) {
        console.log(suc);
      }, function (err) {
        console.log(err);
      });
    }
  }
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('Log', Log);

  Log.$inject = ['$cordovaDevice', '$window', 'appStorage', 'Logs'];

  function Log($cordovaDevice, $window, appStorage, Logs) {
    var moment = $window.moment;

    var Service = {
      sendUUID: sendUUID
    };

    return Service;

    //====================================================
    //  Send device UUID if not sent between 00:00 to 23:59:59
    //====================================================
    function sendUUID() {
      var today = moment().hour(0).minute(0).second(0);
      if (!appStorage.loggedDate || moment(appStorage.loggedDate).isBefore(today)) {
        appStorage.loggedDate = new Date().toString();
        return Logs.log({}, {
          deviceId: $cordovaDevice.getUUID()
        }).$promise.then(function (data) {
          console.log("---------- data ----------");
          console.log(data);
          appStorage.loggedDate = new Date().toString();
        }).catch(function (err) {
          console.log("---------- err ----------");
          console.log(err);
        });
      }
    }
  }
})();
'use strict';

// loading spinner and common message wrapper
(function (angular) {
  'use strict';

  angular.module('app').factory('Message', Message);

  Message.$inject = ['$ionicLoading', '$ionicPopup'];

  function Message($ionicLoading, $ionicPopup) {
    var service = {
      loading: loading,
      hide: hide,
      success: success,
      error: error,
      alert: alert,
      confirm: confirm
    };

    return service;

    function loading(message) {
      $ionicLoading.show(message);
    }

    function success(message) {
      $ionicLoading.show({
        template: '<h4 class="message-success">' + message + '</h4>',
        duration: 2000
      });
    }

    function error(message) {
      $ionicLoading.show({
        template: '<h4 class="message-error">' + message + '</h4>',
        duration: 2000
      });
    }

    function hide() {
      $ionicLoading.hide();
    }

    function alert(title, message) {
      hide();
      return $ionicPopup.alert({
        title: title || '인터넷이 끊겼습니다.',
        template: message || '인터넷을 켜주세요.'
      });
    }

    function confirm(title, message) {
      hide();
      return $ionicPopup.confirm({
        title: title || '글 삭제 알림',
        template: message || '정말로 지우시겠습니까?'
      });
    }
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// function loginWithFacebook() {
//   return Oauth.facebook(FACEBOOK_KEY, ["email", "public_profile"])
//     .then(function() {
//       U.goToState('Main.Home', null, 'forward');
//     })
//     .catch(function(err) {
//       U.error(err);
//     });
// }

// function loginWithKakao() {
//   return Oauth.kakao(KAKAO_KEY)
//     .then(function() {
//       U.goToState('Main.Home', null, 'forward');
//     })
//     .catch(function(err) {
//       U.error(err);
//     });
// }

(function () {
  'use strict';

  angular.module('app').factory('Oauth', Oauth);

  Oauth.$inject = ['$q', '$window', '$http', '$timeout', 'Message', 'AppStorage', 'OAUTH_CALLBACK_URL', 'SERVER_URL'];

  function Oauth($q, $window, $http, $timeout, Message, AppStorage, OAUTH_CALLBACK_URL, SERVER_URL) {

    var Service = {
      facebook: facebook,
      kakao: kakao
    };

    return Service;

    function facebook(clientId, appScope, options) {
      Message.loading();
      var deferred = $q.defer();
      var redirect_uri = OAUTH_CALLBACK_URL;
      var flowUrl = "https://www.facebook.com/v2.0/dialog/oauth?client_id=" + clientId + "&redirect_uri=" + redirect_uri + "&response_type=token&scope=" + appScope.join(",");
      if (options !== undefined && options.hasOwnProperty("auth_type")) {
        flowUrl += "&auth_type=" + options.auth_type;
      }
      var success = false;
      var browserRef = $window.cordova.InAppBrowser.open(flowUrl, '_blank', 'location=no,clearsessioncache=yes,clearcache=yes,hidden=yes');

      browserRef.addEventListener('loadstart', function (event) {
        if (event.url.indexOf(redirect_uri) === 0) {
          success = true;
          browserRef.removeEventListener("exit", function () {});
          browserRef.close();
          var callbackResponse = event.url.split("#")[1];
          var responseParameters = callbackResponse.split("&");
          var parameterMap = [];
          for (var i = 0; i < responseParameters.length; i++) {
            parameterMap[responseParameters[i].split("=")[0]] = responseParameters[i].split("=")[1];
          }
          if (parameterMap.access_token !== undefined && parameterMap.access_token !== null) {
            // Message.hide();
            deferred.resolve({
              access_token: parameterMap.access_token,
              expires_in: parameterMap.expires_in
            });
          } else {
            if (event.url.indexOf("error_code=100") !== 0) {
              // Message.hide();
              deferred.reject("Facebook returned error_code=100: Invalid permissions");
            } else {
              // Message.hide();
              deferred.reject("Problem authenticating");
            }
          }
        }
      });

      browserRef.addEventListener('loadstop', function () {
        browserRef.show();
      });

      browserRef.addEventListener('exit', function () {
        if (!success) {
          // Message.hide();
          deferred.reject("The sign in flow was canceled");
        }
      });

      return deferred.promise.then(function (result) {
        result.provider = 'facebook';
        return $http({
          url: SERVER_URL + '/user/registerPassport',
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          data: result
        });
      }).then(function (dataWrapper) {
        var userWrapper = dataWrapper.data;
        console.log("userWrapper :::\n", userWrapper);
        AppStorage.user = userWrapper.user;
        AppStorage.token = userWrapper.token;
        AppStorage.isFirstTime = false;
        return userWrapper;
      });
    }

    function kakao(clientId) {
      Message.loading();
      var deferred = $q.defer();
      var redirect_uri = OAUTH_CALLBACK_URL;
      var flowUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=' + clientId + '&redirect_uri=' + redirect_uri + '&response_type=code';
      var browserRef = $window.cordova.InAppBrowser.open(flowUrl, '_blank', 'location=no,clearsessioncache=yes,clearcache=yes,hidden=yes');
      var success = false;

      browserRef.addEventListener('loadstart', function (event) {
        if (event.url.indexOf(redirect_uri) === 0) {
          success = true;
          browserRef.removeEventListener("exit", function () {});
          browserRef.close();
          var requestToken = event.url.split("code=")[1];
          $http({
            method: "post",
            url: "https://kauth.kakao.com/oauth/token",
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            },
            data: "client_id=" + clientId + "&redirect_uri=" + redirect_uri + "&grant_type=authorization_code" + "&code=" + requestToken
          }).success(function (data) {
            deferred.resolve(data);
          }).error(function () {
            deferred.reject("Problem authenticating");
          });
        }
      });

      browserRef.addEventListener('loadstop', function () {
        browserRef.show();
      });

      browserRef.addEventListener('exit', function () {
        // Message.hide();
        if (!success) {
          deferred.reject("The sign in flow was canceled");
        }
      });
      return deferred.promise.then(function (result) {
        result.provider = 'kakao';
        console.log("result :::\n", result);
        return $http({
          url: SERVER_URL + '/user/registerPassport',
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          data: result
        });
      }).then(function (dataWrapper) {
        var userWrapper = dataWrapper.data;
        console.log("userWrapper :::\n", userWrapper);
        AppStorage.user = userWrapper.user;
        AppStorage.token = userWrapper.token;
        AppStorage.isFirstTime = false;
        return userWrapper;
      });
    }
  }
})();
'use strict';

//  Dependencies
//ng-file-uploead
//cordovaCamera/
//MessageService
(function (angular) {
  'use strict';

  angular.module('app').factory('Photo', Photo);

  Photo.$inject = ['$cordovaCamera', '$window', '$timeout', '$q', '$cordovaFile', '$rootScope', '$ionicModal', 'SERVER_URL', 'Message', 'Upload'];

  function Photo($cordovaCamera, $window, $timeout, $q, $cordovaFile, $rootScope, $ionicModal, SERVER_URL, Message, Upload) {

    var _ = $window._;
    $ionicModal.fromTemplateUrl('state/0Template/ImageCropModal.html', {
      id: '9999',
      scope: $rootScope,
      animation: 'instant-slide'
    }).then(function (modal) {
      $rootScope.ImageCropModal = modal;
      $rootScope.hideImageCropModal = function () {
        $rootScope.getPhotoCancelled = false;
        $rootScope.ImageCropModal.hide();
      };
    });

    $rootScope.ImageCropAttribute = {
      sourceImageBase64: '',
      croppedImageBase64: '',
      resultImageSize: 600,
      areaType: 'square',
      aspectRatio: 1
    };

    $rootScope.getPhotoCancelled = true;

    var service = {
      get: get,
      post: post,
      clean: clean
    };

    return service;

    //====================================================
    //  Photo.get Usage
    //====================================================
    //Usage
    //  Photo.get('camera' || 'gallery', 800, true, 300,'square | circle | rectangle', aspectRatioIfRectangle)
    //Output:
    //  'data:base64, asdfk1jmcl1...'
    function get(sourceType, width, cropTrue, resultImageSize, areaType, aspectRatio) {

      var promise;

      if (sourceType === 'camera') {
        promise = $cordovaCamera.getPicture({
          quality: 50,
          destinationType: $window.Camera.DestinationType.FILE_URI,
          encodingType: $window.Camera.EncodingType.JPEG,
          targetWidth: width || 800,
          correctOrientation: true,
          mediaType: $window.Camera.MediaType.PICTURE,
          cameraDirection: $window.Camera.Direction.BACK,
          sourceType: 1 //camera
        });
      } else if (sourceType === 'gallery') {
          promise = pickImage(width);
        }

      promise = promise.then(function (filePath) {
        var name = filePath.substr(filePath.lastIndexOf('/') + 1);
        var namePath = filePath.substr(0, filePath.lastIndexOf('/') + 1);
        return $cordovaFile.readAsDataURL(namePath, name);
      }).catch(function () /* cancelled */{
        $rootScope.ImageCropModal.hide();
        return $q.reject({
          message: 'cancelled'
        });
      });

      if (cropTrue) {
        $rootScope.ImageCropAttribute.sourceImageBase64 = null;
        $rootScope.ImageCropAttribute.areaType = areaType || 'square';
        $rootScope.ImageCropAttribute.aspectRatio = aspectRatio || 1;
        $rootScope.ImageCropAttribute.resultImageSize = resultImageSize || 600;
        $rootScope.ImageCropModal.show();
        promise = promise.then(function (base64) {
          $rootScope.ImageCropAttribute.sourceImageBase64 = base64;
          // $rootScope.ImageCropModal.show();
          var deferred = $q.defer();
          var modalHiddenListenerOff = $rootScope.$on('modal.hidden', function (event, modal) {
            if (modal.id === '9999') {
              if ($rootScope.getPhotoCancelled === true) {
                return $q.reject({
                  message: 'cancelled'
                });
              } else {
                $rootScope.getPhotoCancelled = true;
                deferred.resolve($rootScope.ImageCropAttribute.croppedImageBase64);
              }
            }
          });
          return $q.all([deferred.promise, modalHiddenListenerOff]);
        }).then(function (array) {
          var base64 = array[0];
          var modalHiddenListenerOff = array[1];
          modalHiddenListenerOff();
          return base64;
        });
      }

      return promise;
    }

    //====================================================
    //  Photo.post Usage
    //====================================================
    // Usage:
    //Photo.post(
    //  '/place',
    //  { files: ['dataUri:base64', 'dataUri:base64'],
    //    title: '포스트 이름',
    //    content: '냠냠냠'
    //  },
    //  POST
    //)
    //  Promise with with response from server:
    // Output usage:
    //promise
    //  .then(function(createdPlaceWrapper){
    //    console.log(createdPlaceWrapper.data);
    //  })
    //  .catch(function(err){
    //    $q.reject(err);
    //  })
    function post(url, form, method) {
      var form_copy = _.clone(form);
      var filesToSend = [];
      angular.forEach(form_copy.files, function (base64File) {
        if (base64File != null) {
          filesToSend.push(base64ToFile(base64File));
        }
      });
      delete form_copy.files;

      if (url[0] !== '/') {
        url = '/' + url;
      }

      var promise = Upload.upload({
        url: SERVER_URL + url,
        method: method || 'POST',
        file: filesToSend,
        fields: form_copy,
        header: {
          enctype: "multipart/form-data"
        }
      });
      return promise;
    } //end post

    function clean() {
      return $cordovaCamera.cleanup();
    }

    //====================================================
    //  HELPERS
    //====================================================

    function pickImage(width) {
      var deferred = $q.defer();
      $window.imagePicker.getPictures(function (results) {
        if (results.length === 0) {
          deferred.reject({
            message: 'cancelled'
          });
        } else {
          deferred.resolve(results[0]);
        }
      }, function (cancelled) {
        deferred.reject(cancelled);
      }, {
        maximumImagesCount: 1,
        width: width || 800,
        height: width || 800
      });
      return deferred.promise;
    }

    function base64ToFile(dataUris) {
      var byteString;
      var mimestring;
      if (dataUris.split(',')[0].indexOf('base64') !== -1) {
        byteString = $window.atob(dataUris.split(',')[1]);
      } else {
        byteString = decodeURI(dataUris.split(',')[1]);
      }
      mimestring = dataUris.split(',')[0].split(':')[1].split(';')[0];
      console.log(mimestring);
      var content = [];
      for (var i = 0; i < byteString.length; i++) {
        content[i] = byteString.charCodeAt(i);
      }
      return new $window.Blob([new $window.Uint8Array(content)], {
        type: mimestring
      });
    }
  } // End
})(angular);
'use strict';

// Preload photos no longer used. use before enter init() and after enter bind approach;
// Preload.assets are used in app.js to load everything when app starts, automatically done
(function (angular) {
  'use strict';

  angular.module('app').factory('Preload', Preload);

  Preload.$inject = ['$q', '$filter', '$window'];

  function Preload($q, $filter, $window) {

    var _ = $window._;

    var service = {
      photos: photos,
      assets: assets
    };

    return service;

    //====================================================
    //  Implementation
    //====================================================
    function photos(arrayOfObjsWithPhotosArray, cloudinaryFilterName, onlyFirstOnesBool, neverMind) {
      if (neverMind) {
        return [];
      }
      var urls = getPhotos(arrayOfObjsWithPhotosArray, cloudinaryFilterName, onlyFirstOnesBool);
      var promises = [];
      angular.forEach(urls, function (url) {
        var deferred = $q.defer();
        var img = new $window.Image();
        img.onload = onImageLoad(deferred);
        img.onerror = onImageError(deferred, url);
        promises.push(deferred.promise);
        img.src = url;
      });
      return $q.all(promises);
    }

    function assets(fileUrls) {
      var promises = [];
      // var images = [];
      angular.forEach(fileUrls, function (url) {
        var deferred = $q.defer();
        var img = new $window.Image();
        img.onload = onImageLoad(deferred);
        img.onerror = onImageError(deferred, url);
        promises.push(deferred.promise);
        img.src = url;
        // images.push(img);
      });
      return $q.all(promises);
    }

    //====================================================
    //  Helper
    //====================================================
    function onImageLoad(deferred) {
      return function () {
        deferred.resolve();
      };
    }

    function onImageError(deferred, url) {
      return function () {
        deferred.reject(url);
      };
    }

    function getPhotos(posts, cloudinaryFilterName, onlyFirstOnesBool) {
      var preProcessedUrls = [];
      // make it work for single object
      if (!Array.isArray(posts)) {
        posts = [posts];
      }
      var arrayOfUrls = _.pluck(posts, 'photos');
      angular.forEach(arrayOfUrls, function (photos) {
        var urls = _.pluck(photos, 'url');
        if (onlyFirstOnesBool) {
          var first = urls[0];
          urls = [first];
        }
        preProcessedUrls = preProcessedUrls.concat(urls);
      });
      var urls = _.map(preProcessedUrls, function (url) {
        return $filter(cloudinaryFilterName)(url);
      });
      urls = _.filter(urls, function (url) {
        return url != null;
      });
      return urls;
    }
  } // Service END
})(angular);
'use strict';

// Implements latest version of phonegap-push-plugin
(function () {
  'use strict';

  angular.module('applicat.push.service', ['ngCordova']).service('PushService', PushService);

  PushService.$inject = ['$http', '$log', '$q', '$cordovaDialogs', '$window', '$timeout', '$rootScope', '$cordovaMedia', 'GOOGLE_PROJECT_NUMBER', 'SERVER_URL'];

  function PushService($http, $log, $q, $cordovaDialogs, $window, $timeout, $rootScope, $cordovaMedia, GOOGLE_PROJECT_NUMBER, SERVER_URL) {
    var deviceId = null;

    this.registerDevice = registerDevice;
    // maybe devideId is used outside of this service, or not...
    this.getDeviceId = function () {
      return deviceId;
    };

    //====================================================
    //  Implementation
    //====================================================
    function registerDevice() {
      var push = $window.PushNotification.init({
        android: {
          "senderID": GOOGLE_PROJECT_NUMBER,
          "icon": "pushicon"
        },
        ios: {
          "badge": true,
          "sound": "true",
          "alert": "true"
        }
      });

      if (ionic.Platform.isIOS()) {
        push.getApplicationIconBadgeNumber(function (n) {
          push.setApplicationIconBadgeNumber(function () {
            console.log('---- setApplicationBadegeNumber success with ' + n + ' ----');
          }, function () {
            console.log('----- setApplicationBadgeNumber error -----');
          }, n);
        }, function () {
          console.log('---- getBadgeNumber error ----');
        });
      }

      push.on('registration', function (result) {
        if (ionic.Platform.isIOS()) {
          storeDeviceToken(result.registrationId, 'IOS');
        } else if (ionic.Platform.isAndroid()) {
          storeDeviceToken(result.registrationId, 'ANDROID');
        }
      });

      push.on('notification', function (notification) {
        if (ionic.Platform.isAndroid()) {
          $window.plugin.notification.local.schedule({
            title: notification.title,
            text: notification.message,
            icon: "res://icon.png",
            smallIcon: "res://pushicon.png"
          });
        } else if (ionic.Platform.isIOS()) {
          handleIOS(notification);
        }
      });
    }

    //====================================================
    //  Helpers
    //====================================================
    function storeDeviceToken(deviceId, deviceType) {
      var registration = {
        deviceId: deviceId,
        platform: deviceType,
        active: true
      };
      return $http({
        url: SERVER_URL + '/device/register',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        data: registration
      }).then(function (dataWrapper) {
        $log.info("PushService - registered to server: " + JSON.stringify(dataWrapper));
        deviceId = dataWrapper.data.device.deviceId;
      }).catch(function (err) {
        $log.info("PushService - error: " + JSON.stringify(err));
      });
    }

    function handleIOS(notification) {
      // If foreground is not checked here it would make a sound twice,
      //once when received in background and once more upon opening it by clicking
      //the notification.
      if (notification.additionalData.foreground === true) {
        // Play custom audio if a sound specified.
        if (notification.sound) {
          var audio = $cordovaMedia.newMedia(notification.sound);
          audio.then(function (r) {
            console.log('success');
            console.log(r);
            $timeout(function () {
              audio.play();
            }, 500);
          }, function (r) {
            console.log('error');
            console.log(r);
          });
        }
        $cordovaDialogs.alert(notification.title, notification.message);
      } else {
        $cordovaDialogs.alert(notification.title, notification.message);
      }
    }
  }
})();
'use strict';

// Description: Extends $rootScope with custom functions;

// Usage;
// In app.js
// .run(['$rootScope', 'RootScope', function ($rootScope, RootScope){
//   angular.extend($rootScope, RootScope);
// }])
(function (angular) {
  'use strict';

  angular.module('app').factory('RootScope', RootScope);

  RootScope.$inject = ['$state', '$stateParams', '$ionicHistory', '$ionicSideMenuDelegate', '$timeout', '$rootScope', '$ionicViewSwitcher', '$ionicModal', '$ionicScrollDelegate', '$window', 'Message', 'AppStorage', 'Favorite', 'PhotoClass', 'DEV_MODE'];

  function RootScope($state, $stateParams, $ionicHistory, $ionicSideMenuDelegate, $timeout, $rootScope, $ionicViewSwitcher, $ionicModal, $ionicScrollDelegate, $window, Message, AppStorage, Favorite, PhotoClass, DEV_MODE) {
    var daum = $window.daum;
    var _ = $window._;
    var service = {
      AppStorage: AppStorage,
      $state: $state,
      $stateParams: $stateParams,
      isState: isState,
      areStates: areStates,
      getState: getState,
      isParam: isParam,
      hasParam: hasParam,
      getParam: getParam,
      goToState: goToState,
      goBack: goBack,
      loading: loading,
      toggleSideMenu: toggleSideMenu,
      closeSideMenu: closeSideMenu,
      comingSoon: comingSoon,
      DEV_MODE: DEV_MODE,
      resize: resize,
      unselect: unselect,
      addToArray: addToArray,
      searchPlace: searchPlace,
      selectPlace: selectPlace,
      getColWidth: getColWidth,
      PhotoClass: new PhotoClass(),
      likePost: Favorite.likePost,
      likePlace: Favorite.likePlace
    };
    return service;

    function isState(state) {
      return state === $ionicHistory.currentStateName();
    }

    function areStates(states) {
      return states.indexOf($ionicHistory.currentStateName()) !== -1;
    }

    function getState() {
      return $ionicHistory.currentStateName();
    }
    //====================================================
    //  $rootScope.isParam({id: '123', category: ''}) >> true | false
    //====================================================
    function isParam(paramObj) {
      for (var key in paramObj) {
        if ($state.params[key] !== paramObj[key]) {
          return false;
        }
      }
      return true;
    }

    function hasParam(paramKey) {

      if ($state.params[paramKey] !== '') {
        return true;
      } else {
        return false;
      }
    }
    //====================================================
    // $rootScope.getParam(category)  >> $stateParams[category]
    //====================================================
    function getParam(key) {
      return $state.params[key];
    }
    //====================================================
    //  $rootScope.goToState('Main.Home', {category: 'apple', theme: 'drink'}, 'forward | back', CtrlAsModel)
    //====================================================
    function goToState(state, params, direction, Model) {
      Message.hide();
      if (Model) {
        //if model remember scrollpostion and save
        if (Model.handle) {
          Model.scrollPosition = $ionicScrollDelegate.$getByHandle(Model.handle).getScrollPosition().top;
        } else {
          console.log('no CtrlAs.Model.handle --RootScope.goToState');
        }
      }
      $timeout(function () {
        if (direction) {
          $ionicViewSwitcher.nextDirection(direction);
        }
        $state.go(state, params);
        $ionicSideMenuDelegate.toggleLeft(false);
      }, 0);
    }
    //====================================================
    //  $rootScope.goBack();
    //====================================================
    function goBack(direction) {
      Message.hide();
      if (direction) {
        $ionicViewSwitcher.nextDirection(direction);
      }
      $ionicHistory.goBack();
    }
    //====================================================
    //  $rootScope.loading();
    //====================================================
    function loading() {
      Message.loading();
      $timeout(function () {
        Message.hide();
      }, 5000);
    }

    function resize() {
      $timeout(function () {
        $ionicScrollDelegate.resize();
      }, 0);
    }
    //====================================================
    //  $rootScope.closeSideMenu();
    //====================================================
    function closeSideMenu() {
      $ionicSideMenuDelegate.toggleLeft(false);
    }

    // (fromArray, $index)
    function unselect(fromArray, item) {
      $timeout(function () {
        var index = _.findIndex(fromArray, item);
        fromArray.splice(index, 1);
      }, 0);
      $ionicScrollDelegate.resize();
    }

    function addToArray(toArray, item, $index) {
      $timeout(function () {
        if (!$index) {
          toArray.push(item);
        } else {
          toArray.splice($index, 0, item);
        }
        $ionicScrollDelegate.resize();
      }, 0);
    }

    //====================================================
    //  DaumMap Search Place
    //====================================================
    function searchPlace(searchAddressWord, saveResultsArray) {
      if (!searchAddressWord) {
        return Message.alert('주소찾기 알림', '주소를 입력해주세요');
      }
      var ps = new daum.maps.services.Places();
      Message.loading();
      ps.keywordSearch(searchAddressWord, function (status, data) {
        // if no search result, notify and exit.
        Message.hide();
        if (data.places[0] === undefined) {
          Message.alert('요청하신 장소가 없습니다', '다시검색해주세요');
          return false;
        }
        angular.forEach(data.places, function (placeObj) {
          saveResultsArray.push(placeObj);
        });
        console.log(data.places);
      }, function (err) {
        console.log(err);
        Message.alert();
      });
    }

    //====================================================
    //  DaumMap Select Place
    //====================================================
    function selectPlace(placeObj, modelData, saveResultsArrayToReset) {
      modelData.address = placeObj.address;
      modelData.geoJSON = {
        type: 'Point',
        coordinates: [Number(placeObj.longitude), Number(placeObj.latitude)]
      };
      angular.copy([], saveResultsArrayToReset);
      resize();
    }

    //====================================================
    //  $rootScope.toggleSideMenu();
    //====================================================
    function toggleSideMenu() {
      // if (requireLoggedIn) {
      //   if (!AppStorage.token) {
      //     return Message.alert('둘러보기 알림', '로그인을 하셔야 볼수있는 내용입니다.');
      //   }
      // }
      $ionicSideMenuDelegate.toggleLeft();
    }
    //====================================================
    //  $rootScope.comingSoon();
    //====================================================
    function comingSoon(title) {
      return Message.alert(title + ' 준비중인 서비스입니다.', '빠른시일내에 준비완료하겠습니다.');
    }

    function getColWidth(array, $first) {
      var filteredArray = _.map(array, function (columnNameObj) {
        if (columnNameObj.show === true) {
          return columnNameObj;
        }
      });
      array = _.compact(filteredArray);
      var length = array.length;
      if ($first) {
        return 'col';
      }
      var width = Math.floor(100 / length);
      return 'col-' + width;
    }
  } //end
})(angular);
'use strict';

// Twitter example
(function () {
  'use strict';

  angular.module('app').factory('Twitter', Twitter);

  Twitter.$inject = ['$cordovaOauth', '$cordovaOauthUtility', '$http', '$reource', '$q', '$window'];

  function Twitter($cordovaOauth, $cordovaOauthUtility, $http, $resource, $q, $window) {
    // 1
    var twitterKey = "STORAGE.TWITTER.KEY";
    var clientId = 'TwitterAppConsumerKey';
    var clientSecret = 'TwitterAppConsumerSecret';

    // 2
    function storeUserToken(data) {
      $window.localStorage.setItem(twitterKey, JSON.stringify(data));
    }

    function getStoredToken() {
      return $window.localStorage.getItem(twitterKey);
    }

    // 3
    function createTwitterSignature(method, url) {
      var token = angular.fromJson(getStoredToken());
      var oauthObject = {
        oauth_consumer_key: clientId,
        oauth_nonce: $cordovaOauthUtility.createNonce(10),
        oauth_signature_method: "HMAC-SHA1",
        oauth_token: token.oauth_token,
        oauth_timestamp: Math.round(new Date().getTime() / 1000.0),
        oauth_version: "1.0"
      };
      var signatureObj = $cordovaOauthUtility.createSignature(method, url, oauthObject, {}, clientSecret, token.oauth_token_secret);
      $http.defaults.headers.common.Authorization = signatureObj.authorization_header;
    }

    return {
      // 4
      initialize: function initialize() {
        var deferred = $q.defer();
        var token = getStoredToken();

        if (token !== null) {
          deferred.resolve(true);
        } else {
          $cordovaOauth.twitter(clientId, clientSecret).then(function (result) {
            storeUserToken(result);
            deferred.resolve(true);
          }, function (error) {
            deferred.reject(false);
          });
        }
        return deferred.promise;
      },
      // 5
      isAuthenticated: function isAuthenticated() {
        return getStoredToken() !== null;
      },
      // 6
      getHomeTimeline: function getHomeTimeline() {
        var home_tl_url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';
        createTwitterSignature('GET', home_tl_url);
        return $resource(home_tl_url).query();
      },
      storeUserToken: storeUserToken,
      getStoredToken: getStoredToken,
      createTwitterSignature: createTwitterSignature
    };
  }
})();
'use strict';

// Utility
(function (angular) {
  'use strict';

  angular.module('app').factory('U', U);

  U.$inject = ['$ionicHistory', '$ionicScrollDelegate', '$timeout', '$filter', '$window', '$rootScope', '$ionicSideMenuDelegate', '$state', '$ionicViewSwitcher', '$ionicSlideBoxDelegate', '$q', 'Message', 'RootScope', 'Dom', 'ErrorService'];

  function U($ionicHistory, $ionicScrollDelegate, $timeout, $filter, $window, $rootScope, $ionicSideMenuDelegate, $state, $ionicViewSwitcher, $ionicSlideBoxDelegate, $q, Message, RootScope, Dom, ErrorService) {

    var _ = $window._;
    var service = {
      isForwardView: isForwardView,
      isBackView: isBackView,
      isSiblingView: isSiblingView,
      areSiblingViews: areSiblingViews,
      hasPreviousStates: hasPreviousStates,
      resize: resize,
      update: update,
      resetSlides: resetSlides,
      error: error,
      bindData: bindData,
      appendData: appendData,
      broadcast: broadcast,
      top: top,
      scrollTo: scrollTo,
      scrollToHash: scrollToHash,
      freeze: freeze,
      loading: loading,
      saveIdToArray: saveIdToArray
    };

    _.defaults(service, RootScope);

    return service;

    // Within Parent State Stack
    function isForwardView(stateName) {
      if ($ionicHistory.viewHistory().forwardView) {
        return $ionicHistory.viewHistory().forwardView.stateName === stateName;
      } else {
        return false;
      }
    }

    // Within Parent State Stack
    function isBackView(stateName) {
      if ($ionicHistory.viewHistory().backView) {
        return $ionicHistory.viewHistory().backView.stateName === stateName;
      } else {
        return false;
      }
    }

    // Within Parent State Stack
    function isSiblingView(stateName) {
      return isForwardView(stateName) || isBackView(stateName);
    }

    // Within Parent State Stack
    function areSiblingViews(stateNames) {
      var i;
      var stateName;
      for (i = 0; i < stateNames.length; i++) {
        stateName = stateNames[i];
        if (isSiblingView(stateName)) {
          return true;
        }
      }
      return false;
    }

    // Absolute previous State. Within or Without parent stack.
    function hasPreviousStates(stateNames) {
      if (stateNames.length === 0) {
        return false;
      }
      var currentViewId = $ionicHistory.currentView().viewId.split('ion').pop();
      var prevViewId = Number(currentViewId) - 1;
      var prevViewKey = 'ion' + prevViewId;
      var prevStateName = $ionicHistory.viewHistory().views[prevViewKey] && $ionicHistory.viewHistory().views[prevViewKey].stateName;
      var hasPrevView = _.indexOf(stateNames, prevStateName) !== -1;
      var hasSiblingView = areSiblingViews(stateNames);
      if (hasPrevView) {
        return true;
      } else if (hasSiblingView) {
        return true;
      }
      return false;
    }

    // update content scroll
    function resize() {
      $timeout(function () {
        $ionicScrollDelegate.resize();
      }, 0);
    }

    // update slidebox
    function update() {
      $timeout(function () {
        $ionicSlideBoxDelegate.update();
      }, 0);
    }

    // fix bug where prev slide number persist
    function resetSlides() {
      $ionicSlideBoxDelegate.slide(0, 0);
      $ionicSlideBoxDelegate.update();
    }

    function error(err) {
      console.log(err);
      freeze(false);
      $rootScope.$broadcast('scroll.refreshComplete');
      $rootScope.$broadcast('scroll.infiniteScrollComplete');
      ErrorService.handleError(err);
    }

    function bindData(data, model, name, emitEventTrue, loadingModel) {
      var deferred = $q.defer();
      $timeout(function () {
        // if data is a dataArrayWrapper
        if (name[name.length - 1] === 's') {
          model[name] = data[name];
          model.more = data.more !== undefined ? data.more : model.more;
          model.total = data.total !== undefined ? data.total : model.total;
        } else {
          // if data is a dataObject
          model[name] = data;
        }
        if (!loadingModel) {
          model.loading = false;
        } else {
          loadingModel.loading = false;
        }
        freeze(false);
        update();
        resize();
        $rootScope.$broadcast('scroll.refreshComplete');
        $rootScope.$broadcast('scroll.infiniteScrollComplete');
        if (emitEventTrue) {
          $rootScope.$broadcast('$rootScope:bindDataComplete');
        }
        deferred.resolve();
      }, 0);
      return deferred.promise;
    }

    function appendData(dataWrapper, model, name, emitEventTrue) {
      $timeout(function () {
        if (name[name.length - 1] === 's') {
          angular.forEach(dataWrapper[name], function (item) {
            model[name].push(item);
          });
          model.more = dataWrapper.more;
          freeze(false);
          resize();
          $rootScope.$broadcast('scroll.refreshComplete');
          $rootScope.$broadcast('scroll.infiniteScrollComplete');
          if (emitEventTrue) {
            $rootScope.$broadcast('$rootScope:appendDataComplete');
          }
        } else {
          // if data is a data
          console.error('no dataArrayWrapper.dataArray perhaps dataWrapper is dataObject.');
        }
      }, 0);
    }

    function broadcast($scope) {
      $scope.$broadcast('scroll.refreshComplete');
      $scope.$broadcast('scroll.infiniteScrollComplete');
    }

    function top() {
      $ionicScrollDelegate.scrollTop(false);
    }

    function scrollTo(Model) {
      if (Model) {
        if (Model.scrollPosition === undefined) {
          console.log('no CtrlAs.Model.scollPosition -- U.scrollTo');
        }
        if (Model.handle) {
          $ionicScrollDelegate.$getByHandle(Model.handle).scrollTo(undefined, Model.scrollPosition, false);
        } else {
          console.log('no CtrlAs.Model.handle -- U.scrollTo');
        }
      } else {
        console.log('no CtrlAs.Model -- U.scrollTo');
      }
    }

    function scrollToHash() {
      $ionicScrollDelegate.anchorScroll(false);
    }

    function freeze(shouldFreezeTrue) {
      $ionicScrollDelegate.freezeScroll(shouldFreezeTrue);
    }

    function loading(Model) {
      Model.loading = true;
      top();
      freeze(true);
    }

    function saveIdToArray(array, data, index) {
      var id = data.id;
      if (!id) {
        return false;
      }
      if (index) {
        array[index] = id;
      } else {
        array.push(id);
      }
      return array;
    }
  } // Service END
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// <ion-content class="has-subheader bottom44px"
//   scroll="false"
// >
//   <div id="gm0"
//     google-map
//     icon="img/map_iconunselect.png"
//     active-icon="img/map_iconselect.png"
//     center-marker="true"
//     idle-event="true"
//     vm="GoogleMap"
//     places="GoogleMap.Model.products"
//   >

//   </div>
// </ion-content>
(function () {
  'use strict';

  angular.module('app').directive('googleMap', googleMap);

  googleMap.$inject = ['$window', '$timeout', '$state', '$cordovaGeolocation', 'Message', 'AppStorage'];

  function googleMap($window, $timeout, $state, $cordovaGeolocation, Message, AppStorage) {
    var _ = $window._;

    // Required Input
    // scope.vm: <Object>CtrlAsObject
    // scope.places: <Array>{ geoJSON: { type: 'Point', coordinates: <Array>Number } }
    // atrs.id: String
    // EventListener: <Event>(EventName: '$rootScope:dataBindComplete', data: null)
    // EventListener: <Event>(EventName: 'view.afterEnter', data: null)

    // Optional Input
    // attrs.icon: <String>imgUrl
    // attrs.activeIcon: <String>imgUrl
    // attrs.centerMarker: <String>Boolean
    // attrs.idleEvent: <String>Boolean

    // Output =>
    // vm.setCenterByAddress: (address: String) => void
    // vm.setCEnterByCurrentPosition: () => $qPromise
    // EventEmitter: <Event>(EventName: 'googleMap:featureClicked', data: <String>Place.id)
    // EventEmitter: <Event>(EventName: 'googleMap:centerChanged', data: <Object>{lat: Number, lng: Number})
    var directiveDefinitionObject = {
      scope: {
        vm: '=',
        places: '='
      },
      compile: function compile(element, attrs) {
        var google = $window.google;
        //====================================================
        //  Initial Setup
        //====================================================
        attrs.$set('dataTapDisabled', true);
        element.css({
          height: '100%',
          width: '100%'
        });
        var div = element[0];

        if (!AppStorage[attrs.id]) {
          AppStorage[attrs.id] = {
            lastCenter: {
              lat: null,
              lng: null
            }
          };
        }
        if (!AppStorage[attrs.id].lastCenter.lat || !AppStorage[attrs.id].lastCenter.lng) {
          AppStorage[attrs.id].lastCenter.lat = 37.497942;
          AppStorage[attrs.id].lastCenter.lng = 127.027621;
        }
        var mapOptions = {
          center: AppStorage[attrs.id].lastCenter,
          zoom: 15,
          streetViewControl: true,
          scaleControl: false,
          rotateControl: false,
          zoomControl: false,
          mapTypeControl: false
        };

        var map = new google.maps.Map(div, mapOptions);
        var geocoder = new google.maps.Geocoder();
        var ps = new google.maps.places.PlacesService(map);
        var myMarker; /* available when center-marker="true"*/
        if (attrs.icon) {
          /*set marker image*/
          map.data.setStyle({
            icon: attrs.icon
          });
        }

        //====================================================
        //  Compile Implementations
        //====================================================
        // (searchWord: String) => void
        function setCenterByPlace(searchWord) {
          console.log("'searchPlace' :::\n", 'searchPlace');
          ps.textSearch({
            query: searchWord
          }, function (results, status) {
            console.log("results[0] :::\n", results[0]);
            if (status == google.maps.places.PlacesServiceStatus.OK) {
              map.setCenter(results[0].geometry.location);
              if (attrs.centerMarker === 'true') {
                if (myMarker) {
                  myMarker.setMap(null);
                }
                myMarker = new google.maps.Marker({
                  map: map,
                  position: results[0].geometry.location,
                  draggable: true
                });
                myMarker.addListener('dragend', function () {
                  map.setCenter(myMarker.getPosition());
                });
              }
            } else {
              console.log("googleMap.searchPlace status :::\n", status);
            }
          });
        }
        // (address: String) => void
        function setCenterByAddress(address) {
          geocoder.geocode({
            address: address
          }, function (results, status) {
            console.log("results :::\n", results);
            if (status === google.maps.GeocoderStatus.OK) {
              map.setCenter(results[0].geometry.location);
              if (attrs.centerMarker === 'true') {
                if (myMarker) {
                  myMarker.setMap(null);
                }
                myMarker = new google.maps.Marker({
                  map: map,
                  position: results[0].geometry.location,
                  draggable: true
                });
                myMarker.addListener('dragend', function () {
                  map.setCenter(myMarker.getPosition());
                });
              }
            } else {
              console.log("googleMap.setCenterByAddress :::\n", status);
            }
          });
        }

        // () => $qPromise
        function setCenterByCurrentPosition() {
          Message.loading();
          return $cordovaGeolocation.getCurrentPosition({
            maximumAge: 10000,
            timeout: 7000
          }).then(function (position) {
            Message.hide();
            if (position.coords == null) {
              Message.alert('위치 공유가 꺼져있습니다.', '위치 공유를 켜주세요.');
              return false;
            }
            var centerLatLng = new google.maps.LatLng(Number(position.coords.latitude), Number(position.coords.longitude));
            map.setCenter(centerLatLng);
            if (attrs.centerMarker === 'true') {
              if (myMarker) {
                myMarker.setMap(null);
              }
              myMarker = new google.maps.Marker({
                map: map,
                position: centerLatLng,
                draggable: true
              });
              myMarker.addListener('dragend', function () {
                map.setCenter(myMarker.getPosition());
              });
            }
          }).catch(function (err) {
            console.log("googleMap.setCenterByCurrentPosition :::\n", err);
            Message.hide();
            Message.alert('위치 공유가 꺼져있습니다.', '위치 공유를 켜주세요.');
          });
        }

        // find address.

        //====================================================
        //  Link Function
        //====================================================
        return function link(scope, element, attrs) {
          // functions bind to CtrlAs method
          scope.vm.setCenterByAddress = setCenterByAddress;
          scope.vm.setCenterByCurrentPosition = setCenterByCurrentPosition;
          scope.vm.setCenterByPlace = setCenterByPlace;
          // on bindDataComplete add features to the map
          // if params.id exists remove all features and add only one back.
          scope.$on('$rootScope:bindDataComplete', function () {
            $timeout(function () {
              var geoJson = dataToFeatures(scope.places);
              if (geoJson.length === 0) {
                return false;
              }
              if ($state.params.id) {
                map.setCenter(new google.maps.LatLng(Number(geoJson.features[0] && geoJson.features[0].geometry.coordinates[1]), Number(geoJson.features[0] && geoJson.features[0].geometry.coordinates[0])));
              }
              map.data.addGeoJson(geoJson);
            }, 0);
          });

          map.data.addListener('click', function (event) {
            scope.$emit('googleMap:featureClicked', event.feature.getProperty('id'));
            if (attrs.activeIcon) {
              /* set clicked feature's style */
              map.data.revertStyle();
              map.data.overrideStyle(event.feature, {
                icon: attrs.activeIcon
              });
            }
          });

          scope.$on('relayout', function () {
            $timeout(function () {
              google.maps.event.trigger(map, 'resize');
            }, 5);
          });

          if (attrs.idleEvent === 'true') {
            map.addListener('idle', function () {
              var lng = map.getCenter().lng();
              var lat = map.getCenter().lat();
              AppStorage[attrs.id].lastCenter.lat = lat;
              AppStorage[attrs.id].lastCenter.lng = lng;
              scope.$emit('googleMap:centerChanged', AppStorage[attrs.id].lastCenter);
            });
          }
        }; /*link ends*/
      } /*compile ends*/
    }; /* directive definition object ends */

    return directiveDefinitionObject;

    //====================================================
    //  Helper
    //====================================================
    //( placeArray: <Array>{geoJSON: {type: 'Point', coordinates: <Array>Number}} )
    //=> FeatureObjs: <Array> {
    //  type: String,
    //  features: {
    //    type: String,
    //    geometry: <Array>Number,
    //    properties: Object
    //  }}
    function dataToFeatures(placeArray) {
      var result = {
        type: 'FeatureCollection',
        features: []
      };
      if (!Array.isArray(placeArray)) {
        placeArray = _.compact([placeArray]);
      }
      var features = _.map(placeArray, function (item) {
        var feature = {
          type: 'Feature'
        };
        if (item.geoJSON) {
          var geometry = _.clone(item.geoJSON);
          delete item.geoJSON;
          feature.properties = item;
          feature.geometry = geometry;
          return feature;
        }
      });
      result.features = _.compact(features);
      return result;
    }
  } // google map directive ends
})();
'use strict';

// Calls a specified function when enter is pressed on input
// Usage
// <input ng-enter="vm.myFunction()"></input>
(function (angular) {
  'use strict';

  angular.module('app').directive('ngEnter', ngEnter);

  ngEnter.$inject = ['$window'];

  function ngEnter($window) {
    return function (scope, element, attrs) {
      element.bind("keydown keypress", function (event) {
        if (event.which === 13) {
          scope.$apply(function () {
            scope.$eval(attrs.ngEnter);
          });
          if ($window.cordova) {
            $window.cordova.plugins.Keyboard.close();
          }
          event.preventDefault();
        }
      });
    };
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// wait for ng repat to finish 'ngRepeatFinished' event emitted to controller
(function (angular) {
  'use strict';

  angular.module('app').directive('onFinishRender', onFinishRender);

  onFinishRender.$inject = ['$timeout'];

  function onFinishRender($timeout) {
    return {
      restrict: 'A',
      link: link
    };

    function link(scope) {
      if (scope.$last === true) {
        $timeout(function () {
          scope.$emit('ngRepeatFinished');
        });
      }
    }
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// Set by default in index.html
// make device width in pixels available globally
(function (angular) {
  'use strict';

  angular.module('app').directive('pgh', pgh).directive('pgha', pgha).directive('pghb', pghb).directive('pghc', pghc).directive('pghd', pghd).directive('pghe', pghe).directive('pghf', pghf).directive('pghg', pghg).directive('pghh', pghh).directive('pghi', pghi).directive('pghj', pghj);

  pgh.$inject = ['$rootScope', '$window', '$timeout'];

  function pgh($rootScope, $window, $timeout) {
    return {
      link: link
    };

    function link(scope, element) {
      scope.$on('$ionicView.afterEnter', function () {
        $timeout(function () {
          $rootScope.pgh = element.prop('offsetHeight');
        }, 0);
      });

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.pgh = element.prop('offsetHeight');
        });
      });
    }
  }

  pgha.$inject = ['$rootScope', '$window', '$timeout'];

  function pgha($rootScope, $window, $timeout) {
    return {
      link: link
    };

    function link(scope, element) {
      scope.$on('$ionicView.afterEnter', function () {
        $timeout(function () {
          $rootScope.pgha = element.prop('offsetHeight');
        }, 0);
      });

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.pgha = element.prop('offsetHeight');
        });
      });
    }
  }

  pghb.$inject = ['$rootScope', '$window', '$timeout'];

  function pghb($rootScope, $window, $timeout) {
    return {
      link: link
    };

    function link(scope, element) {
      scope.$on('$ionicView.afterEnter', function () {
        $timeout(function () {
          $rootScope.pghb = element.prop('offsetHeight');
        }, 0);
      });

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.pghb = element.prop('offsetHeight');
        });
      });
    }
  }

  pghc.$inject = ['$rootScope', '$window', '$timeout'];

  function pghc($rootScope, $window, $timeout) {
    return {
      link: link
    };

    function link(scope, element) {
      scope.$on('$ionicView.afterEnter', function () {
        $timeout(function () {
          $rootScope.pghc = element.prop('offsetHeight');
        }, 0);
      });

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.pghc = element.prop('offsetHeight');
        });
      });
    }
  }

  pghd.$inject = ['$rootScope', '$window', '$timeout'];

  function pghd($rootScope, $window, $timeout) {
    return {
      link: link
    };

    function link(scope, element) {
      scope.$on('$ionicView.afterEnter', function () {
        $timeout(function () {
          $rootScope.pghd = element.prop('offsetHeight');
        }, 0);
      });

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.pghd = element.prop('offsetHeight');
        });
      });
    }
  }

  pghe.$inject = ['$rootScope', '$window', '$timeout'];

  function pghe($rootScope, $window, $timeout) {
    return {
      link: link
    };

    function link(scope, element) {
      scope.$on('$ionicView.afterEnter', function () {
        $timeout(function () {
          $rootScope.pghe = element.prop('offsetHeight');
        }, 0);
      });

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.pghe = element.prop('offsetHeight');
        });
      });
    }
  }

  pghf.$inject = ['$rootScope', '$window', '$timeout'];

  function pghf($rootScope, $window, $timeout) {
    return {
      link: link
    };

    function link(scope, element) {
      scope.$on('$ionicView.afterEnter', function () {
        $timeout(function () {
          $rootScope.pghf = element.prop('offsetHeight');
        }, 0);
      });

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.pghf = element.prop('offsetHeight');
        });
      });
    }
  }

  pghg.$inject = ['$rootScope', '$window', '$timeout'];

  function pghg($rootScope, $window, $timeout) {
    return {
      link: link
    };

    function link(scope, element) {
      scope.$on('$ionicView.afterEnter', function () {
        $timeout(function () {
          $rootScope.pghg = element.prop('offsetHeight');
        }, 0);
      });

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.pghg = element.prop('offsetHeight');
        });
      });
    }
  }

  pghh.$inject = ['$rootScope', '$window', '$timeout'];

  function pghh($rootScope, $window, $timeout) {
    return {
      link: link
    };

    function link(scope, element) {
      scope.$on('$ionicView.afterEnter', function () {
        $timeout(function () {
          $rootScope.pghh = element.prop('offsetHeight');
        }, 0);
      });

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.pghh = element.prop('offsetHeight');
        });
      });
    }
  }

  pghi.$inject = ['$rootScope', '$window', '$timeout'];

  function pghi($rootScope, $window, $timeout) {
    return {
      link: link
    };

    function link(scope, element) {
      scope.$on('$ionicView.afterEnter', function () {
        $timeout(function () {
          $rootScope.pghi = element.prop('offsetHeight');
        }, 0);
      });

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.pghi = element.prop('offsetHeight');
        });
      });
    }
  }

  pghj.$inject = ['$rootScope', '$window', '$timeout'];

  function pghj($rootScope, $window, $timeout) {
    return {
      link: link
    };

    function link(scope, element) {
      scope.$on('$ionicView.afterEnter', function () {
        $timeout(function () {
          $rootScope.pghj = element.prop('offsetHeight');
        }, 0);
      });

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.pghj = element.prop('offsetHeight');
        });
      });
    }
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// ion-scroll[direction="x" parent-scroll]

// Fixes the case where parent veritcal scrolling(eg ion-content scroll) is disabled on area where ion-scroll is located.
(function (angular) {
  'use strict';

  angular.module('app').directive('parentScroll', parentScroll);

  parentScroll.$inject = ['$ionicScrollDelegate', '$timeout', '$window', '$document'];

  function parentScroll($ionicScrollDelegate, $timeout, $window, $document) {
    return {
      scope: true,
      restrict: 'A',
      compile: compile
    };

    function compile(element, attr) {

      if (!$window.horizontalIonScrollCount) {
        $window.horizontalIonScrollCount = 0;
      }

      $window.horizontalIonScrollCount++;
      attr.delegateHandle = "horizontal" + $window.horizontalIonScrollCount;

      return function (scope, element, attr) {
        $timeout(function () {
          var horizontal = attr.delegateHandle;
          var sv = $ionicScrollDelegate.$getByHandle(horizontal).getScrollView();

          var container = sv.__container;

          var originaltouchStart = sv.touchStart;
          var originalmouseDown = sv.mouseDown;
          var originaltouchMove = sv.touchMove;
          var originalmouseMove = sv.mouseMove;

          container.removeEventListener('touchstart', sv.touchStart);
          container.removeEventListener('mousedown', sv.mouseDown);
          $document.removeEventListener('touchmove', sv.touchMove);
          $document.removeEventListener('mousemove', sv.mousemove);

          sv.touchStart = function (e) {
            e.preventDefault = function () {};
            originaltouchStart.apply(sv, [e]);
          };

          sv.touchMove = function (e) {
            e.preventDefault = function () {};
            originaltouchMove.apply(sv, [e]);
          };

          sv.mouseDown = function (e) {
            e.preventDefault = function () {};

            if (originalmouseDown) {
              originalmouseDown.apply(sv, [e]);
            }
          };

          sv.mouseMove = function (e) {
            e.preventDefault = function () {};

            if (originalmouseMove) {
              originalmouseMove.apply(sv, [e]);
            }
          };

          container.addEventListener("touchstart", sv.touchStart, false);
          container.addEventListener("mousedown", sv.mouseDown, false);
          $document.addEventListener("touchmove", sv.touchMove, false);
          $document.addEventListener("mousemove", sv.mouseMove, false);
        });
      };
    }
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================

// Injects findPlaces(searchWord) to PostCreate CtrlAsObj
// vm.findPlaces(searchWord) => vm.Model.places: [{}];

// IN HTML
// <div
//   place-search
//   vm="PostCreate"
// ></div>

// <div class="row zero">
//   <div class="col zero">
//     <input type="text"
//       placeholder="국가 / 지역 / 역(건물) 주변까지 검색하여 입력"
//       ng-model="PostCreate.searchWord"
//       ng-enter="PostCreate.findPlaces(PostCreate.searchWord)"
//     >
//   </div>
//   <div class="col-10 flex"
//     ng-click="PostCreate.findPlaces(PostCreate.searchWord);"
//   >
//     <i class="ion-android-search"></i>
//   </div>
// </div>

// <div
//   ng-if="PostCreate.Model.places.length > 0"
// >
//   <p class="zero">
//     장소를 골라주세요
//   </p>
//   <div class="row zero row-places"
//     ng-repeat="place in PostCreate.Model.places"
//     ng-click="PostCreate.selectAbroadPlace(place);"
//   >
//     <div class="col zero col-address flex">
//       <p class="zero address-text">
//         {{place.formatted_address}}
//       </p>
//     </div>
//   </div>
// </div>

// IN CONTROLLER
// function selectAbroadPlace(placeObj) {
//   PostCreate.searchWord = placeObj.formatted_address;
//   PostCreateModel.form.address = placeObj.formatted_address;
//   PostCreateModel.form.geoJSON = {
//     type: 'Point',
//     coordinates: [
//       Number(placeObj.geometry.location.lng()),
//       Number(placeObj.geometry.location.lat())
//     ]
//   };
//   PostCreateModel.places = [];
//   $ionicScrollDelegate.resize();
// }

(function () {
  'use strict';

  angular.module('app').directive('placeSearch', placeSearch);

  placeSearch.$inject = ['$window', '$timeout', '$state', '$cordovaGeolocation', '$q'];

  function placeSearch($window, $timeout, $state, $cordovaGeolocation, $q) {

    var directiveDefinitionObject = {
      scope: {
        vm: '='
      },
      compile: function compile(element) {
        var google = $window.google;
        //====================================================
        //  Initial Setup
        //====================================================
        var div = element[0];
        var map = new google.maps.Map(div);
        var geocoder = new google.maps.Geocoder();
        var ps = new google.maps.places.PlacesService(map);

        //====================================================
        //  Compile Implementations
        //====================================================

        //====================================================
        //  Link Function
        //====================================================
        return function link(scope) {
          // functions bind to CtrlAs method
          scope.vm.findPlaces = findPlaces;
          //====================================================
          //  Link Implementation
          //====================================================
          function findPlaces(searchWord) {
            var deferred = $q.defer();
            ps.textSearch({
              query: searchWord
            }, function (results, status) {
              if (status == google.maps.places.PlacesServiceStatus.OK) {
                var latLng = results[0].geometry.location;
                deferred.resolve(latLng);
              } else {
                deferred.reject(status);
              }
            });

            deferred.promise.then(function (latLng) {
              var lat = latLng.lat();
              var lng = latLng.lng();

              var deferred = $q.defer();
              geocoder.geocode({
                location: {
                  lat: lat,
                  lng: lng
                }
              }, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                  deferred.resolve(results);
                } else {
                  deferred.reject(status);
                }
              });
              return deferred.promise;
            }).then(function (results) {
              console.log("results :::\n", results);
              $timeout(function () {
                scope.vm.Model.places = results;
                console.log("scope.vm.Model.places :::\n", scope.vm.Model.places);
              }, 0);
            }).catch(function (status) {
              console.log("placeSearch.findPlaces status :::\n", status);
            });
          }
        }; /*link ends*/
      } /*compile ends*/
    }; /* directive definition object ends */

    return directiveDefinitionObject;
  } // google map directive ends
})();
'use strict';

//====================================================
//  Usage
//====================================================
// <div class="h300px w100p"
//   static-daum-map
//   marker-src="img/map_04.png"
//   marker-width="40"
//   marker-height="22"
//   longitude="{{PlaceDetail.Model.place.geoJSON.coordinates[0]}}"
//   latitude="{{PlaceDetail.Model.place.geoJSON.coordinates[1]}}"
// >
// </div>
//====================================================
//  Dependencies
//====================================================
// daum map api in www/index.html;
// <script src="http://apis.daum.net/maps/maps3.js?apikey=1d77329135df78c95c219758f5fdddfb&libraries=services"></script>

(function (angular) {
  'use strict';

  angular.module('app').directive('staticDaumMap', staticDaumMap);

  staticDaumMap.$inject = ['$timeout', '$window'];

  function staticDaumMap($timeout, $window) {
    var daum = $window.daum;
    return {
      restrict: 'A',
      link: link
    };

    function link(scope, element, attrs) {
      var DOM = element[0];
      // static daum map does not allow marker image to be set.
      // disabled class is added to normal daumMap to disable all touch events
      element.addClass('disabled' /*30_touched.scss*/);
      scope.$on('$rootScope:bindDataComplete', function () {
        var markerSize = new daum.maps.Size(Number(attrs.markerWidth), Number(attrs.markerHeight));
        var markerImg = new daum.maps.MarkerImage(attrs.markerSrc, markerSize);
        var placePosition = new daum.maps.LatLng(Number(attrs.latitude), Number(attrs.longitude));
        var marker = new daum.maps.Marker({
          position: placePosition,
          image: markerImg
        });
        var staticMapOption = {
          center: placePosition,
          level: 4
        };
        $timeout(function () {
          var map = new daum.maps.Map(DOM, staticMapOption);
          marker.setMap(map);
        }, 0);
      });
    }
  }
})(angular);
'use strict';

// used for setting top value of ion-content
// needed as ios has 20px difference

(function (angular) {
  'use strict';

  angular.module('app').directive('top', top);

  top.$inject = [];

  function top() {
    return {
      restrict: 'A',
      compile: compile
    };

    // link: link
    function compile(element, attrs) {
      var height = attrs.top;
      if (ionic.Platform.isIOS()) {
        element.css('top', Number(height) + 20 + 'px');
      } else {
        element.css('top', Number(height) + 'px');
      }
      return function () {};
    }
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// Some element would not apply .activated class, this fixes it
// div[touch]
// style in touched.scss

(function (angular) {
  'use strict';

  angular.module('app').directive('touch', touch);

  touch.$inject = ['$timeout'];

  function touch($timeout) {
    return {
      restrict: 'A',
      link: link
    };

    function link(scope, element) {
      element.on('click', function () {
        element.addClass('touch');
        $timeout(function () {
          element.removeClass('touch');
        }, 50);
      });
    }
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// Set by default in index.html
// make device width in pixels available globally
(function (angular) {
  'use strict';

  angular.module('app').directive('vw', vw);

  vw.$inject = ['$rootScope', '$window'];

  function vw($rootScope, $window) {
    return {
      link: link
    };

    function link(scope, element) {
      $rootScope.vw = element.prop('offsetWidth');

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.vw = element.prop('offsetWidth');
        });
      });
    }
  }
})(angular);
'use strict';

//<p>{{input | AppText}}</p>
(function (angular) {
  'use strict';

  angular.module('app').filter('AppText', AppText);

  AppText.$inject = [];

  function AppText() {
    return function (input) {
      //====================================================
      //  Common
      //====================================================
      if (input === 'JOODANG-EVENT') {
        return '주당 이벤트';
      } else if (input === 'BAR-EVENT') {
        return '바 이벤트';
      } else if (input === 'ALL') {
        return '전체글';
      } else if (input === 'TALK-NOTICE') {
        return '주당톡 공지';
      } else if (input === 'FAQ') {
        return '자주 묻는 질문';
      } else if (input === 'NOTICE') {
        return '공지사항';
      } else {
        return input;
      }
    };
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').filter('Cloudinary800', CloudinaryFilter.bind(null, 800)).filter('Cloudinary750', CloudinaryFilter.bind(null, 750)).filter('Cloudinary700', CloudinaryFilter.bind(null, 700)).filter('Cloudinary650', CloudinaryFilter.bind(null, 650)).filter('Cloudinary600', CloudinaryFilter.bind(null, 600)).filter('Cloudinary550', CloudinaryFilter.bind(null, 550)).filter('Cloudinary500', CloudinaryFilter.bind(null, 500)).filter('Cloudinary450', CloudinaryFilter.bind(null, 450)).filter('Cloudinary400', CloudinaryFilter.bind(null, 400)).filter('Cloudinary350', CloudinaryFilter.bind(null, 350)).filter('Cloudinary300', CloudinaryFilter.bind(null, 300)).filter('Cloudinary250', CloudinaryFilter.bind(null, 250)).filter('Cloudinary200', CloudinaryFilter.bind(null, 200)).filter('Cloudinary150', CloudinaryFilter.bind(null, 150)).filter('Cloudinary100', CloudinaryFilter.bind(null, 100)).filter('Cloudinary50', CloudinaryFilter.bind(null, 50));

  function CloudinaryFilter(size) {
    var matching = /upload/;
    return function (input) {
      if (input) {
        var index = input.search(matching);
        if (index !== -1) {
          return input.substring(0, index) + 'upload/c_scale,w_' + size + '/' + input.substring(input.lastIndexOf('/'));
        } else {
          return input;
        }
      } else if (input == null) {
        return null;
      } else {
        return input;
      }
    };
  }
})(angular);
/**
 * Created by Seunghoon Ko on 10/10/2015
 * As part of applicat platform
 *
 * Copyright (C) Applicat (www.applicat.co.kr) & Seunghoon Ko - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Seunghoon Ko <imskojs@gmail.com>, 10/10/2015
 *
 */
'use strict';

//<p>{{input | ColumnText}}</p>
(function (angular) {
  'use strict';

  angular.module('app').filter('ColumnText', ColumnText);

  ColumnText.$inject = [];

  function ColumnText() {
    return function (input) {
      //====================================================
      //  Common
      //====================================================
      if (input === 'owner') {
        return '주인/작성자';
      } else if (input === 'createdAt') {
        return '작성일';
        //====================================================
        //  Banner
        //====================================================
      } else if (input === 'homepage') {
          return '홈페이지';
        } else if (input === 'isExternal') {
          return '외부 사이트';
        } else if (input === 'index') {
          return '보이는 순서(1 ~ 5)';
        } else if (input === 'event') {
          return '링크 이벤트';
        } else if (input === 'photo') {
          return '사진';
          //====================================================
          //  Event
          //====================================================
        } else if (input === 'title') {
            return '제목';
          } else if (input === 'content') {
            return '내용';
          } else if (input === 'warning') {
            return '주의 사항';
          } else if (input === 'category') {
            return '종류';
          } else if (input === 'showLinkButton') {
            return '바로가기 보이기';
          } else if (input === 'duration') {
            return '기간';
          } else if (input === 'location') {
            return '장소';
            //====================================================
            //  Place
            //====================================================
          } else if (input === 'name') {
              return '이름';
            } else if (input === 'province') {
              return '장소(구)';
            } else if (input === 'address') {
              return '주소';
            } else if (input === 'summary') {
              return '한줄소개';
            } else if (input === 'theme') {
              return '태마';
            } else if (input === 'phone') {
              return '전화번호';
            } else if (input === 'averageRating') {
              return '평균 별점';
              //====================================================
              //  Review
              //====================================================
            } else if (input === 'place') {
                return 'Bar';
              } else if (input === 'rating') {
                return '별점';
                //====================================================
                //  Comment
                //====================================================
              } else if (input === 'isAnnonymous') {
                  return '익명글';
                } else if (input === 'post') {
                  return '주당톡 제목';
                } else if (input === 'review') {
                  return '리뷰글 내용';
                  //====================================================
                  //  Post
                  //====================================================
                } else if (input === 'commentCount') {
                    return '댓글 수';
                  } else {
                    return input;
                  }
    };
  }
})(angular);
'use strict';

//<p>{{post.owner | GetName}}</p>
(function (angular) {
  'use strict';

  angular.module('app').filter('GetName', GetName);

  GetName.$inject = [];

  function GetName() {
    return function (user) {
      if (user.name) {
        return user.name;
      } else if (user.nickname) {
        return user.nickname;
      } else if (user.username) {
        return user.username;
      } else if (user.fullname) {
        return user.fullname;
      } else {
        return 'UserX';
      }
    };
  }
})(angular);
'use strict';

// Input
// vm.openingHours = [{start: "07:00", end: "20:20"}, ..., {start: "08:00", end: "18:00"} ]

// Usage
// div{vm.openingHours | GroupByOpeningHours}

// Output
// ["월~목 07:00 ~ 20:20", "금~토 08:00 ~ 16:00", "일요일 휴무"]

(function (angular) {
  'use strict';

  angular.module('app').filter('GroupByOpeningHours', GroupByOpeningHours);

  GroupByOpeningHours.$inject = ['$window'];

  function GroupByOpeningHours($window) {
    return filter;

    function filter(openingHours) {
      // append index to object
      if (!openingHours) {
        return ['업데이트 해주세요'];
      }
      openingHours = appendIndexToObj(openingHours);
      // group by same hours
      var grouped = groupByBusinessHours(openingHours);
      // create [{days: [0, 1], start: "08:00", end: "20:00"},...}
      var orderedResultArray = createArrayOfObjWithGroup(grouped);
      // create ["월 ~ 금" 08:00 ~ 03:00", "일요일 휴무"]
      var textArray = $window._.map(orderedResultArray, function (result) {
        // result = {days:[0,1], start: '', end: ''};
        result.days = $window._.map(result.days, function (day) {
          var daysKorean = parseDay(day);
          return daysKorean;
        });
        result.days = tildeArrayValuesToText(result.days);
        var apendTime = '';
        if (result.start === result.end) {
          apendTime = '휴무';
        } else {
          apendTime = result.start + ' ~ ' + result.end;
        }
        var texts = result.days + ' ' + apendTime;
        return texts;
      });

      return textArray;
    }

    function appendIndexToObj(openingHours) {
      for (var i = 0; i < openingHours.length; i++) {
        openingHours[i].index = i;
      }
      return openingHours;
    }

    function groupByBusinessHours(openingHours) {
      var grouped = $window._.groupBy(openingHours, function (hoursObj) {
        var start = hoursObj.start;
        var end = hoursObj.end;
        var groupCategory = start + end;
        return groupCategory;
      });
      return grouped;
    }

    function createArrayOfObjWithGroup(grouped) {
      // grouped = ['1212': [{start:'', end:'', index: 0}, ...]]
      // out = [{days:[0,1], start:'',  end:''}, ...]
      var keys = Object.keys(grouped);

      var resultArray = [];
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var subOpeningHoursArray = grouped[key];

        var daysResult = [];
        for (var j = 0; j < subOpeningHoursArray.length; j++) {
          var openingHourObj = subOpeningHoursArray[j];
          daysResult.push(openingHourObj.index);
        }

        var start = subOpeningHoursArray[0].start;
        var end = subOpeningHoursArray[0].end;

        resultArray.push({
          days: daysResult,
          start: start,
          end: end
        });
      }

      var orderedResultArray = $window._.sortBy(resultArray, function (obj) {
        var day = obj.days[0];
        if (day === 0) {
          day = 7;
        }
        return day;
      });

      return orderedResultArray;
    }

    function parseDay(day) {
      if (day === 0) {
        return '일';
      } else if (day === 1) {
        return '월';
      } else if (day === 2) {
        return '화';
      } else if (day === 3) {
        return '수';
      } else if (day === 4) {
        return '목';
      } else if (day === 5) {
        return '금';
      } else if (day === 6) {
        return '토';
      }
    }

    function tildeArrayValuesToText(array) {
      var daysInNumbers = $window._.map(array, function (dayInKorean) {
        if (dayInKorean === '일요일') {
          return 7;
        } else if (dayInKorean === '월') {
          return 1;
        } else if (dayInKorean === '화') {
          return 2;
        } else if (dayInKorean === '수') {
          return 3;
        } else if (dayInKorean === '목') {
          return 4;
        } else if (dayInKorean === '금') {
          return 5;
        } else if (dayInKorean === '토') {
          return 6;
        }
      });
      for (var i = 0; i < daysInNumbers.length - 1; i++) {
        var day_1 = daysInNumbers[i];
        var day_2 = daysInNumbers[i + 1];
        if (Math.abs(day_1 - day_2) > 1) {
          var concatStart = array[0];
          for (var j = 1; j < daysInNumbers.length; j++) {
            concatStart = concatStart + ', ' + array[j];
          }
          return concatStart;
        }
      }
      if (array.length > 2) {
        return array[0] + ' ~ ' + array[array.length - 1];
      } else if (array.length === 2) {
        return array[0] + ', ' + array[1];
      } else if (array.length === 1) {
        return array[0];
      }
    }
  }
})(angular);
/**
 * Created by Seunghoon Ko on 10/10/2015
 * As part of applicat platform
 *
 * Copyright (C) Applicat (www.applicat.co.kr) & Seunghoon Ko - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Seunghoon Ko <imskojs@gmail.com>, 10/10/2015
 *
 */
'use strict';

//====================================================
//  Usage
//====================================================
// <p> {{diatanceInMeters | MeterToKilometer}} </p>
// if distance is bigger than 1000m it will convert it to km
(function (angular) {
  'use strict';

  angular.module('app').filter('MeterToKilometer', MeterToKilometer);

  MeterToKilometer.$inject = [];

  function MeterToKilometer() {
    return function (input) {
      if (input >= 1000) {
        return (input / 1000).toFixed(2) + ' km';
      } else if (input === undefined) {
        return '0 m';
      } else {
        return input + ' m';
      }
    };
  }
})(angular);
'use strict';

//<p>{{input | PropertyDisplay: propertyName}}</p>
(function (angular) {
  'use strict';

  angular.module('app').filter('PropertyDisplay', PropertyDisplay);

  PropertyDisplay.$inject = ['$filter'];

  function PropertyDisplay($filter) {
    return function (input, propertyName) {
      //====================================================
      //  Common
      //====================================================
      if (propertyName === 'owner') {
        return input.name || input.nickname || input.username;
      } else if (propertyName === 'createdAt') {
        return $filter('date')(input, 'yyyy.MM.dd HH:mm');
        //====================================================
        //  Banner
        //====================================================
      } else if (propertyName === 'event') {
          return input && input.title || '외부 사이트';
        } else if (propertyName === 'isExternal') {
          if (input === true) {
            return '외부 홈페이지';
          } else if (input === false) {
            return '이벤트 페이지';
          } else {
            return '지정해 주세요';
          }
          //====================================================
          //  Event / Bar(Place)
          //====================================================
        } else if (propertyName === 'category') {
            // Event Category
            if (input === 'JOODANG-EVENT') {
              return '주당 이벤트';
            } else if (input === 'BAR-EVENT') {
              return '바 이벤트';

              // Place Category
            } else if (input === 'PREMIUM') {
                return '프리미엄';
              } else if (input === 'SPECIAL') {
                return '스페셜';
              } else if (input === 'NORMAL') {
                return '일반';
                // Comment Category
              } else if (input === 'POST-COMMENT') {
                  return '주당톡 댓글';
                } else if (input === 'REVIEW-COMMENT') {
                  return '리뷰 댓글';
                  // Post Category
                } else if (input === '자유톡') {
                    return '자유톡';
                  } else if (input === '연애톡') {
                    return '연애톡';
                  } else if (input === '번개톡') {
                    return '번개톡';
                  } else if (input === '유머톡') {
                    return '유머톡';
                  } else if (input === 'TALK-NOTICE') {
                    return '주당톡 공지';
                  } else if (input === 'NOTICE') {
                    return '공지사항';
                  } else if (input === 'FAQ') {
                    return '자주 묻는 질문';
                  } else {
                    return '지정해 주세요';
                  }
          } else if (propertyName === 'showLinkButton' || propertyName === 'showDiscountTag' || propertyName === 'showEventTag') {
            if (input === true) {
              return '보이기';
            } else if (input === false) {
              return '숨기기';
            } else {
              return '지정해 주세요';
            }
          } else if (propertyName === 'averageRating') {
            return $filter('number')(input, 0);
            //====================================================
            //  Review
            //====================================================
          } else if (propertyName === 'place') {
              return input.name;
              //====================================================
              //  Comment
              //====================================================
            } else if (propertyName === 'review') {
                return input.content;
              } else if (propertyName === 'post') {
                return input.title;
              } else if (propertyName === 'isAnnonymous') {
                if (input === true) {
                  return '익명으로';
                } else {
                  return '실명으로';
                }
              } else {
                return input;
              }
    };
  }
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('Banners', Banners);

  Banners.$inject = ['$resource', 'SERVER_URL'];

  function Banners($resource, SERVER_URL) {

    var bannerUrl = SERVER_URL + '/banner' + '/:uri';

    var params = {
      uri: '@uri'
    };

    // 'POST /banner/create': 'BannerController.create',
    // 'GET /banner/find': 'BannerController.find',
    // 'GET /banner/findFive': 'BannerController.findFive',
    // 'PUT /banner/update': 'BannerController.update',
    // 'DELETE /banner/destroy': 'BannerController.destroy',
    var actions = {

      create: {
        method: 'POST',
        params: {
          uri: 'create'
        }
      },

      find: {
        method: 'GET',
        params: {
          uri: 'find'
        }
      },

      findFive: {
        method: 'GET',
        params: {
          uri: 'findFive'
        }
      },

      findOne: {
        method: 'GET',
        params: {
          uri: 'findOne'
        }
      },

      update: {
        method: 'PUT',
        params: {
          uri: 'update'
        }
      },

      destroy: {
        method: 'DELETE',
        params: {
          uri: 'destroy'
        }
      }

    };

    var service = $resource(bannerUrl, params, actions);
    return service;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('Comments', Comments);

  Comments.$inject = ['$resource', 'SERVER_URL'];

  function Comments($resource, SERVER_URL) {

    var bannerUrl = SERVER_URL + '/comment' + '/:uri';

    var params = {
      uri: '@uri'
    };

    // 'POST /comment/createComment': 'CommentController.createComment',
    // 'GET /comment/find': 'CommentController.find',
    // 'GET /comment/findFive': 'CommentController.findFive',
    // 'PUT /comment/updateComment': 'CommentController.updateComment',
    // 'DELETE /comment/destroyComment': 'CommentController.destroyComment',
    var actions = {

      createComment: {
        method: 'POST',
        params: {
          uri: 'createComment'
        }
      },

      updateComment: {
        method: 'PUT',
        params: {
          uri: 'updateComment'
        }
      },

      find: {
        method: 'GET',
        params: {
          uri: 'find'
        }
      },

      findOne: {
        method: 'GET',
        params: {
          uri: 'findOne'
        }
      },

      destroyComment: {
        method: 'DELETE',
        params: {
          uri: 'destroyComment'
        }
      }

    };

    var service = $resource(bannerUrl, params, actions);
    return service;
  }
})();
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Coupons', Coupons);

  Coupons.$inject = ['$resource', 'SERVER_URL'];

  function Coupons($resource, SERVER_URL) {

    var couponUrl = SERVER_URL + '/coupon' + '/:find' + '/:findOne' + '/:create' + '/:update' + '/:updatePassword' + '/:use' + '/:destroy';

    var params = {
      find: '@find',
      findOne: '@findOne',
      create: '@create',
      update: '@update',
      destroy: '@destroy',
      updatePassword: '@updatePassword',
      use: '@use'
    };

    var actions = {
      find: {
        method: 'GET',
        params: {
          find: 'find'
        }
      },
      findOne: {
        method: 'GET',
        params: {
          findOne: 'findOne'
        }
      },
      create: {
        method: 'POST',
        params: {
          create: 'create'
        }
      },
      update: {
        method: 'PUT',
        params: {
          update: 'update'
        }
      },
      updatePassword: {
        method: 'PUT',
        params: {
          updatePassword: 'updatePassword'
        }
      },
      use: {
        method: 'PUT',
        params: {
          use: 'use'
        }
      },
      destroy: {
        method: 'DELETE',
        params: {
          destroy: 'destroy'
        }
      }
    };

    var service = $resource(couponUrl, params, actions);

    return service;
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Devices', Devices);

  Devices.$inject = ['$resource', 'SERVER_URL'];

  function Devices($resource, SERVER_URL) {

    var eventUrl = SERVER_URL + '/device' + '/:uri';

    var params = {
      uri: '@uri'
    };

    var actions = {

      pushAll: {
        method: 'POST',
        params: {
          uri: 'pushAll'
        }
      }

    };

    var service = $resource(eventUrl, params, actions);

    return service;
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Events', Events);

  Events.$inject = ['$resource', 'SERVER_URL'];

  function Events($resource, SERVER_URL) {

    var eventUrl = SERVER_URL + '/event' + '/:uri';

    var params = {
      uri: '@uri'
    };

    // 'POST /event/create': 'EventController.create',
    // 'GET /event/find': 'EventController.find',
    // 'GET /event/findOne': 'EventController.findOne',
    // 'PUT /event/update': 'EventController.update',
    // 'DELETE /event/destroy': 'EventController.destroy',
    var actions = {

      create: {
        method: 'POST',
        params: {
          uri: 'create'
        }
      },

      find: {
        method: 'GET',
        params: {
          uri: 'find'
        }
      },

      findOne: {
        method: 'GET',
        params: {
          uri: 'findOne'
        }
      },

      update: {
        method: 'PUT',
        params: {
          uri: 'update'
        }
      },

      destroy: {
        method: 'DELETE',
        params: {
          uri: 'destroy'
        }
      }

    };

    var service = $resource(eventUrl, params, actions);

    return service;
  }
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('Logs', Logs);

  Logs.$inject = ['$resource', 'governorUrl'];

  function Logs($resource, governorUrl) {

    var postUrl = governorUrl + '/log';

    var params = {
      log: '@log'
    };

    var actions = {
      log: {
        method: 'POST',
        params: {
          log: 'log'
        }
      }
    };

    var service = $resource(postUrl, params, actions);
    return service;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('Photos', Photos);

  Photos.$inject = ['$resource', 'SERVER_URL'];

  function Photos($resource, SERVER_URL) {

    var bannerUrl = SERVER_URL + '/photo' + '/:uri';

    // 'POST /photo/createPhotos': 'PhotoController.createPhotos',
    // 'PUT /photo/updatePhotos': 'PhotoController.updatePhotos',
    var params = {
      uri: '@uri'
    };

    var actions = {

      createPhotos: {
        method: 'POST',
        params: {
          uri: 'createPhotos'
        }
      },

      updatePhotos: {
        method: 'PUT',
        params: {
          uri: 'updatePhotos'
        }
      }

    };

    var service = $resource(bannerUrl, params, actions);
    return service;
  }
})();
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Places', Places);

  Places.$inject = ['$resource', 'SERVER_URL'];

  function Places($resource, SERVER_URL) {

    var placeUrl = SERVER_URL + '/place' + '/:find' + '/:findLikedPlaces' + '/:findOne' + '/:create' + '/:update' + '/:destroy' + '/:like' + '/:updateProducts' + '/:findNative' + '/:contactOwner';

    var params = {
      find: '@find',
      findLikedPlaces: '@findLikedPlaces',
      findOne: '@findOne',
      create: '@create',
      update: '@update',
      destroy: '@destroy',
      like: '@like',
      updateProducts: '@updateProducts',

      findNative: '@findNative',
      contactOwner: '@contactOwner'
    };

    var actions = {

      find: {
        method: 'GET',
        params: {
          find: 'find'
        }
      },

      findLikedPlaces: {
        method: 'GET',
        params: {
          findLikedPlaces: 'findLikedPlaces'
        }
      },

      findOne: {
        method: 'GET',
        params: {
          findOne: 'findOne'
        }
      },

      create: {
        method: 'POST',
        params: {
          create: 'create'
        }
      },

      update: {
        method: 'PUT',
        params: {
          update: 'update'
        }
      },

      destroy: {
        method: 'DELETE',
        params: {
          destroy: 'destroy'
        }
      },

      like: {
        method: 'POST',
        params: {
          like: 'like'
        }
      },

      updateProducts: {
        method: 'PUT',
        params: {
          updateProducts: 'updateProducts'
        }
      },

      // longitude, latitude, distance
      findNative: {
        method: 'GET',
        params: {
          findNative: 'findNative'
        }
      },

      contactOwner: {
        method: 'POST',
        params: {
          contactOwner: 'contactOwner'
        }
      }

    };

    var service = $resource(placeUrl, params, actions);

    return service;
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Posts', Posts);

  Posts.$inject = ['$resource', 'SERVER_URL'];

  function Posts($resource, SERVER_URL) {

    var eventUrl = SERVER_URL + '/post' + '/:uri';

    var params = {
      uri: '@uri'
    };

    // 'POST /post/create': 'PostController.create',
    // 'GET /post/find': 'PostController.find',
    // 'GET /post/findOne': 'PostController.findOne',
    // 'PUT /post/update': 'PostController.update',
    // 'DELETE /post/destroy': 'PostController.destroy',
    var actions = {

      create: {
        method: 'POST',
        params: {
          uri: 'create'
        }
      },

      find: {
        method: 'GET',
        params: {
          uri: 'find'
        }
      },

      findOne: {
        method: 'GET',
        params: {
          uri: 'findOne'
        }
      },

      update: {
        method: 'PUT',
        params: {
          uri: 'update'
        }
      },

      destroy: {
        method: 'DELETE',
        params: {
          uri: 'destroy'
        }
      }

    };

    var service = $resource(eventUrl, params, actions);

    return service;
  }
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('Reviews', Reviews);

  Reviews.$inject = ['$resource', 'SERVER_URL'];

  function Reviews($resource, SERVER_URL) {

    var bannerUrl = SERVER_URL + '/review' + '/:uri';

    var params = {
      uri: '@uri'
    };

    // 'POST /review/createReview': 'ReviewController.createReview',
    // 'GET /review/find': 'ReviewController.find',
    // 'GET /review/findFive': 'ReviewController.findFive',
    // 'PUT /review/update': 'ReviewController.update',
    // 'DELETE /review/destroy': 'ReviewController.destroy',
    var actions = {

      createReview: {
        method: 'POST',
        params: {
          uri: 'createReview'
        }
      },

      updateReview: {
        method: 'PUT',
        params: {
          uri: 'updateReview'
        }
      },

      find: {
        method: 'GET',
        params: {
          uri: 'find'
        }
      },

      findOne: {
        method: 'GET',
        params: {
          uri: 'findOne'
        }
      },

      update: {
        method: 'PUT',
        params: {
          uri: 'update'
        }
      },

      destroyReview: {
        method: 'DELETE',
        params: {
          uri: 'destroyReview'
        }
      }

    };

    var service = $resource(bannerUrl, params, actions);
    return service;
  }
})();
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Users', Users);

  Users.$inject = ['$resource', 'Photo', 'SERVER_URL'];

  function Users($resource, Photo, SERVER_URL) {

    var postUrl = SERVER_URL + '/user' + '/:uri';

    var params = {
      uri: '@uri'
    };

    var actions = {
      find: {
        method: 'GET',
        params: {
          uri: 'find'
        }
      },

      findOne: {
        method: 'GET',
        params: {
          uri: 'findOne'
        }
      },

      login: {
        method: 'POST',
        params: {
          uri: 'login'
        }
      },

      update: {
        method: 'PUT',
        params: {
          uri: 'update'
        }
      },

      changePassword: {
        method: 'POST',
        params: {
          uri: 'changePassword'
        }
      }
    };

    var service = $resource(postUrl, params, actions);

    service.register = register;
    service.updateMyPageBg = updateMyPageBg;
    service.update = update;

    return service;

    function register(param, query) {
      console.log("---------- Users.register Service Query ----------");
      console.log(query);
      var promise = Photo.post('/user/register', query, 'POST').then(function (dataWrapper) {
        return dataWrapper.data;
      });
      return {
        $promise: promise
      };
    }

    function updateMyPageBg(param, query) {
      var promise = Photo.post('/user/updateMyPageBg', query, 'PUT').then(function (dataWrapper) {
        return dataWrapper.data;
      });
      return {
        $promise: promise
      };
    }

    function update(param, query) {
      var promise = Photo.post('/user/update', query, 'PUT').then(function (dataWrapper) {
        return dataWrapper;
      });
      return {
        $promise: promise
      };
    }
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').controller('MainController', MainController);

  MainController.$inject = ['$scope', '$state', '$ionicSideMenuDelegate', '$ionicModal', 'MainModel', 'AppStorage'];

  function MainController($scope, $state, $ionicSideMenuDelegate, $ionicModal, MainModel, AppStorage) {

    var Main = this;
    Main.Model = MainModel;

    Main.logout = logout;
    //====================================================
    //  Implementation
    //====================================================
    function logout(stateAfterLogout) {
      AppStorage = {
        isFirstTime: true
      };
      $ionicSideMenuDelegate.toggleLeft(false);
      $state.go(stateAfterLogout);
    }

    //====================================================
    //  Modal
    //====================================================
    // $ionicModal.fromTemplateUrl('state/Main/Modal/RequestLoginModal.html', {
    //   scope: $scope,
    //   animation: 'mh-slide'
    // }).then(function(modal) {
    //   Main.RequestLoginModal = modal;
    // });
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('MainModel', MainModel);

  MainModel.$inject = [];

  function MainModel() {

    var model = {};

    return model;
  }
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('LoginController', LoginController);

  LoginController.$inject = ['$q', 'LoginModel', 'Users', 'U', 'Message', 'AppStorage'];

  function LoginController($q, LoginModel, Users, U, Message, AppStorage) {

    var Login = this;
    Login.Model = LoginModel;

    Login.localLogin = localLogin;

    //====================================================
    //  Implementation
    //====================================================
    function localLogin() {
      Message.loading();
      return userLogin().then(function (userWrapper) {
        Message.hide();
        console.log("userWrapper :::\n", userWrapper);
        var role = userWrapper.user.roles[0];
        if (role.name !== 'ADMIN') {
          return $q.reject({
            message: 'not admin'
          });
        }
        AppStorage.user = userWrapper.user;
        AppStorage.token = userWrapper.token;
        AppStorage.isFirstTime = false;
        U.goToState('Main.Banner.BannerList', null, 'forward');
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
        if (err.status === 403) {
          return Message.alert('로그인 알림', '비밀번호/이메일이 틀렸습니다. 다시 입력해주세요');
        } else if (err.message === 'not admin') {
          return Message.alert('로그인 알림', '어드민 유저만 로그인 할수 있습니다.');
        } else {
          return Message.alert();
        }
      });
    }

    //====================================================
    //  REST
    //====================================================
    function userLogin() {
      return Users.login({}, {
        identifier: LoginModel.form.identifier,
        password: LoginModel.form.password
      }).$promise.then(function (userWrapper) {
        return userWrapper;
      });
    }
  } //end
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('LoginModel', LoginModel);

  LoginModel.$inject = [];

  function LoginModel() {

    var model = {
      form: {
        identifier: null,
        password: null
      }
    };
    return model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('BannerCreateController', BannerCreateController);

  BannerCreateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', 'BannerCreateModel', 'Banners', 'Events', 'U', 'Message', 'Upload', 'SERVER_URL'];

  function BannerCreateController($scope, $q, $timeout, $window, $ionicPopover, BannerCreateModel, Banners, Events, U, Message, Upload, SERVER_URL) {
    var initPromise = undefined;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = BannerCreateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.create = create;
    vm.searchEvent = searchEvent;
    vm.selectEvent = selectEvent;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!vm.selectBox1) {
        createSelectBox1();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (message) {
          console.log("message :::\n", message);
          U.freeze(false);
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================
    function create() {
      Message.loading();
      return createPhotos().then(function (idsWrapper) {
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = U.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.banner.photo, ids);
        vm.Model.banner.photo = photos[0];
      }).then(function () {
        return bannerCreate();
      }).then(function (banner) {
        console.log("banner :::\n", banner);
        return Message.alert("배너 등록 알림", "배너가 성공적으로 등록되었습니다.");
      }).then(function () {
        U.goToState('Main.Banner.BannerList');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function searchEvent() {
      var searchEventWord = vm.Model.searchEventWord;
      return eventFind({
        title: { contains: searchEventWord }
      }).then(function (eventsWrapper) {
        console.log("eventsWrapper :::\n", eventsWrapper);
        return U.bindData(eventsWrapper, vm.Model, 'events');
      }).then(function () {
        if (vm.Model.events.length === 0) {
          Message.alert('검색 하신 이벤트가 없습니다', '다시 검색해주세요.');
        }
      }).catch(function (err) {
        U.error(err);
      });
    }

    function selectEvent(event) {
      vm.Model.searchEventWord = event.title;
      vm.Model.banner.event = event.id;
      vm.Model.events = [];
    }

    //====================================================
    // Private
    //====================================================
    function init() {
      return $q.resolve({
        message: 'empty'
      });
    }

    function reset() {
      var defaultObj = {
        searchEventWord: '',
        banner: {
          homepage: '',
          isExternal: null,
          index: null,
          event: null, //ass
          photo: null //ass
        },
        images: [], // mixture of photos, and files
        events: [], // to hold search results of event to bind to banner
        tempFiles: [], // hold selected image files
        files: [],
        create: [],
        destroy: []
      };
      angular.copy(defaultObj, vm.Model);
      removeModals();
    }

    //====================================================
    //  Modals
    //====================================================
    function createSelectBox1() {
      return $ionicPopover.fromTemplateUrl('state/Banner/BannerCreate/Popover/SelectBox1.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox1 = popover;
      });
    }

    function removeModals() {
      vm.selectBox1.remove();
      delete vm.selectBox1;
    }

    //====================================================
    //  REST
    //====================================================
    function createPhotos() {
      U.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      var uploadOptions = {
        url: SERVER_URL + '/photo/createPhotos',
        method: 'POST',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      return promise.then(function (dataWrapper) {
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    function bannerCreate(extraQuery) {
      var queryWrapper = {
        query: vm.Model.banner
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --bannerCreate-- :::\n", queryWrapper);
      return Banners.create({}, queryWrapper).$promise.then(function (banner) {
        return banner;
      });
    }

    function eventFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 50
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Events.find(queryWrapper).$promise.then(function (eventsWrapper) {
        return eventsWrapper;
      });
    }
  } // end
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('BannerCreateModel', BannerCreateModel);

  BannerCreateModel.$inject = [];

  function BannerCreateModel() {

    var Model = {
      searchEventWord: '',
      banner: {
        homepage: '',
        isExternal: null,
        index: null,
        //association
        event: null,
        photo: null
      },
      images: [], // mixture of photos, and files

      events: [], // to hold search results of event to bind to banner

      tempFiles: [], // hold selected image files
      files: [],
      create: [],
      destroy: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('BannerListController', BannerListController);

  BannerListController.$inject = ['$scope', '$q', '$ionicPopover', '$window', 'BannerListModel', 'U', 'Banners', 'Message'];

  function BannerListController($scope, $q, $ionicPopover, $window, BannerListModel, U, Banners, Message) {
    // let _ = $window._;
    var initPromise = undefined;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = BannerListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.loadMore = loadMore;
    vm.search = search;
    vm.destroy = destroy;
    vm.findBanner = findBanner;

    //====================================================
    // View Events
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      } else {
        U.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!vm.categoryPopover) {
        createCategoryPopover();
      }
      if (!vm.columnPopover) {
        createColumnPopover();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (bannersWrapper) {
          console.log("bannersWrapper :::\n", bannersWrapper);
          U.bindData(bannersWrapper, vm.Model, 'banners');
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.scrollTo(vm.Model);
      }
    }

    function onBeforeLeave() {
      removeModals();
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function loadMore() {
      var last = vm.Model.banners.length - 1;
      return bannerFind({
        updatedAt: {
          '<': vm.Model.banners[last].updatedAt
        }
      }).then(function (bannersWrapper) {
        U.appendData(bannersWrapper, vm.Model, 'banners');
      }).catch(function (err) {
        U.error(err);
      }).finally(function () {
        U.broadcast($scope);
      });
    }

    function search(searchWord) {
      U.loading(vm.Model);
      return bannerFind({
        or: [{ title: { contains: searchWord } }, { content: { contains: searchWord } }, { createdAt: { contains: searchWord } }]
      }).then(function (bannersWrapper) {
        U.bindData(bannersWrapper, vm.Model, 'banners');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroy(banner, $index, $event) {
      $event.stopPropagation();
      Message.loading();
      return bannerDestroy({
        id: banner.id
      }).then(function (banner) {
        console.log("banner :::\n", banner);
        vm.Model.banners.splice($index, 1);
        Message.alert('글 지우기 알림', '글을 성공적으로 지웠습니다.');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function findBanner(extraQuery) {
      U.loading(BannerListModel);
      return bannerFind(extraQuery).then(function (bannersWrapper) {
        U.bindData(bannersWrapper, BannerListModel, 'banners');
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    // Private
    //====================================================
    function init() {
      return bannerFind();
    }

    function reset() {}

    //====================================================
    //  Modals
    //====================================================
    function createCategoryPopover() {
      return $ionicPopover.fromTemplateUrl('state/Banner/BannerList/Popover/CategoryPopover.html', {
        scope: $scope
      }).then(function (popover) {
        vm.categoryPopover = popover;
      });
    }

    function createColumnPopover() {
      return $ionicPopover.fromTemplateUrl('state/Banner/BannerList/Popover/ColumnPopover.html', {
        scope: $scope
      }).then(function (popover) {
        vm.columnPopover = popover;
      });
    }

    function removeModals() {
      vm.columnPopover.remove();
      delete vm.columnPopover;
      vm.categoryPopover.remove();
      delete vm.categoryPopover;
    }

    //====================================================
    // REST
    //====================================================
    function bannerFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            // category: BannerListModel.selectedCategory
          },
          limit: 51,
          sort: 'index ASC',
          populate: ['photo', 'event', 'owner']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Banners.find(queryWrapper).$promise.then(function (bannersWrapper) {
        return bannersWrapper;
      });
    }

    function bannerDestroy(extraQuery) {
      var queryWrapper = {};
      angular.extend(queryWrapper, extraQuery);
      return Banners.destroy(queryWrapper).$promise.then(function (bannersWrapper) {
        return bannersWrapper;
      });
    }
  }
})();
'use strict';

/* beautify preserve:start */
(function () {
  'use strict';

  angular.module('app').factory('BannerListModel', BannerListModel);

  BannerListModel.$inject = [];

  function BannerListModel() {
    var Model = {
      handle: 'BannerListModel',
      loading: false,
      searchWord: '',
      banners: [],
      selectedCategory: 'BANNER',
      columnFilterOption: {
        BANNER: [{ name: 'homepage', show: true }, { name: 'isExternal', show: true }, // columnNameObj
        { name: 'index', show: true }, { name: 'event', show: true }, //ass
        { name: 'photo', show: true }, //ass
        { name: 'owner', show: true }, //ass
        { name: 'createdAt', show: true }]
      }
    };

    return Model;
  }
})();
/* beautify preserve:end */
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('BannerUpdateController', BannerUpdateController);

  BannerUpdateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', '$state', 'BannerUpdateModel', 'Banners', 'Events', 'U', 'Message', 'Upload', 'SERVER_URL'];

  function BannerUpdateController($scope, $q, $timeout, $window, $ionicPopover, $state, BannerUpdateModel, Banners, Events, U, Message, Upload, SERVER_URL) {
    var initPromise = undefined;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = BannerUpdateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.update = update;
    vm.destroy = destroy;
    vm.searchEvent = searchEvent;
    vm.selectEvent = selectEvent;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!vm.selectBox1) {
        createSelectBox1();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (banner) {
          U.PhotoClass.pushToImages(vm.Model.images, banner.photo);
          if (banner.event) {
            vm.Model.searchEventWord = banner.event.title;
          }
          return U.bindData(banner, vm.Model, 'banner');
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      reset();
    }

    //====================================================
    //  VM
    //====================================================
    function update() {
      Message.loading();
      return updatePhotos().then(function (idsWrapper) {
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = U.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.banner.photo, ids);
        vm.Model.banner.photo = photos[0];
      }).then(function () {
        return bannerUpdate();
      }).then(function (banner) {
        console.log("banner :::\n", banner);
        return Message.alert('배너 수정 알림', '배너가 성공적으로 수정되었습니다.');
      }).then(function () {
        U.goToState('Main.Banner.BannerList');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroy() {
      return Message.confirm('배너 삭제 알림', '정말로 지우시겠습니까?').then(function (yes) {
        if (yes) {
          Message.loading();
          return bannerDestroy();
        } else {
          return $q.reject({ message: 'ionic:confirm:no' });
        }
      }).then(function (banner) {
        console.log("banner :::\n", banner);
        return Message.alert('배너 지우기 알림', '배너를 성공적으로 지웠습니다.');
      }).then(function () {
        U.goToState('Main.Banner.BannerList', null, 'back');
      }).catch(function (err) {
        console.log("err :::\n", err);
        U.error(err);
      });
    }

    function searchEvent() {
      var searchEventWord = vm.Model.searchEventWord;
      return eventFind({
        title: { contains: searchEventWord }
      }).then(function (eventsWrapper) {
        console.log("eventsWrapper :::\n", eventsWrapper);
        return U.bindData(eventsWrapper, vm.Model, 'events');
      }).then(function () {
        if (vm.Model.events.length === 0) {
          Message.alert('검색 하신 이벤트가 없습니다', '다시 검색해주세요.');
        }
      }).catch(function (err) {
        U.error(err);
      });
    }

    function selectEvent(event) {
      vm.Model.searchEventWord = event.title;
      vm.Model.banner.event = event.id;
      vm.Model.events = [];
    }

    //====================================================
    // Private
    //====================================================
    function init() {
      return bannerFindOne();
    }

    function reset() {
      var defaultObj = {
        searchEventWord: '',
        banner: {
          homepage: '',
          isExternal: null,
          index: null,
          event: null, //ass
          photo: null //ass
        },
        images: [], // mixture of photos, and files
        events: [], // to hold search results of event to bind to banner
        tempFiles: [], // hold selected image files
        files: [],
        create: [],
        destroy: []
      };
      angular.copy(defaultObj, vm.Model);
      removeModals();
    }

    //====================================================
    //  Modals
    //====================================================
    function createSelectBox1() {
      return $ionicPopover.fromTemplateUrl('state/Banner/BannerUpdate/Popover/SelectBox1.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox1 = popover;
      });
    }

    function removeModals() {
      vm.selectBox1.remove();
      delete vm.selectBox1;
    }

    //====================================================
    //  REST
    //====================================================

    // banner/findOne
    function bannerFindOne(extraQuery) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          },
          populate: ['event', 'photo']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      return Banners.findOne(queryWrapper).$promise.then(function (banner) {
        return banner;
      });
    }

    // photo/upatePhotos
    function updatePhotos() {
      U.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      U.PhotoClass.processDestroy(vm.Model.images, vm.Model.destroy, vm.Model.banner.photo);
      var uploadOptions = {
        url: SERVER_URL + '/photo/updatePhotos',
        method: 'PUT',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create,
            destroy: vm.Model.destroy
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      return promise.then(function (dataWrapper) {
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    // banner/update
    function bannerUpdate(extraQuery) {
      var queryWrapper = {
        query: vm.Model.banner
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --bannerUpdate-- :::\n", queryWrapper);
      return Banners.update({}, queryWrapper).$promise.then(function (banner) {
        return banner;
      });
    }

    // banner/destroy
    function bannerDestroy(extraQuery) {
      var queryWrapper = {
        id: $state.params.id
      };
      angular.extend(queryWrapper, extraQuery);
      return Banners.destroy(queryWrapper).$promise.then(function (bannersWrapper) {
        return bannersWrapper;
      });
    }

    // event/find
    function eventFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 50
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Events.find(queryWrapper).$promise.then(function (eventsWrapper) {
        return eventsWrapper;
      });
    }
  } // end
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('BannerUpdateModel', BannerUpdateModel);

  BannerUpdateModel.$inject = [];

  function BannerUpdateModel() {

    var Model = {
      searchEventWord: '',
      banner: {
        homepage: '',
        isExternal: null,
        index: null,
        //association
        event: null,
        photo: null
      },
      images: [],
      events: [],

      tempFiles: [],
      files: [],
      create: [],
      destroy: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('CommentCreateController', CommentCreateController);

  CommentCreateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', '$ionicModal', '$state', '$location', 'CommentCreateModel', 'Comments', 'Posts', 'Reviews', 'U', 'Message', 'Upload', 'SERVER_URL'];

  function CommentCreateController($scope, $q, $timeout, $window, $ionicPopover, $ionicModal, $state, $location, CommentCreateModel, Comments, Posts, Reviews, U, Message, Upload, SERVER_URL) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = CommentCreateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.create = create;
    vm.searchPost = searchPost;
    vm.selectPost = selectPost;
    vm.searchReview = searchReview;
    vm.selectReview = selectReview;
    //====================================================
    //  View Comments
    //====================================================
    function onBeforeEnter() {
      if ($state.params.flag) {
        $location.hash($state.params.flag);
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!vm.selectBox1) {
        createSelectBox1();
      }
      if (!vm.selectBox2) {
        createSelectBox2();
      }
      if (!vm.selectBox3) {
        createSelectBox3();
      }
      if (!vm.selectBox4) {
        createSelectBox4();
      }
      if (!vm.provinceModal) {
        createProvinceModal();
      }
      if (!vm.keywordModal) {
        createKeywordModal();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (message) {
          console.log("message :::\n", message);
          U.freeze(false);
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function create() {
      Message.loading();
      // return createPhotos()
      //   .then((idsWrapper) => {
      //     if (!idsWrapper) {
      //       return false;
      //     }
      //     let ids = idsWrapper.ids;
      //     let photos = U.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.comment.photos, ids);
      //     vm.Model.comment.photos = photos;
      //   })
      $q.resolve().then(function () {
        return commentCreateComment();
      }).then(function (comment) {
        console.log("comment :::\n", comment);
        return Message.alert('댓글 등록 알림', '댓글이 성공적으로 등록 되었습니다.');
      }).then(function () {
        U.goToState('Main.Comment.CommentList');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function searchPost() {
      var searchWord0 = vm.Model.searchWord0;
      return postFind({
        title: { contains: searchWord0 }
      }).then(function (postsWrapper) {
        console.log("postsWrapper :::\n", postsWrapper);
        return U.bindData(postsWrapper, vm.Model, 'posts');
      }).then(function () {
        if (vm.Model.posts.length === 0) {
          Message.alert('검색 하신 주당톡이 없습니다', '주당톡제목을 확인하시고 다시 검색해주세요.');
        }
      }).catch(function (err) {
        U.error(err);
      });
    }

    function selectPost(post) {
      vm.Model.searchWord0 = post.title;
      vm.Model.comment.post = post.id;
      vm.Model.posts = [];
    }

    function searchReview() {
      var searchWord1 = vm.Model.searchWord1;
      return reviewFind({
        content: { contains: searchWord1 }
      }).then(function (reviewsWrapper) {
        console.log("reviewsWrapper :::\n", reviewsWrapper);
        return U.bindData(reviewsWrapper, vm.Model, 'reviews');
      }).then(function () {
        if (vm.Model.reviews.length === 0) {
          Message.alert('검색 하신 리뷰가 없습니다', '리뷰내용을 확인하시고 다시 검색해주세요.');
        }
      }).catch(function (err) {
        U.error(err);
      });
    }

    function selectReview(review) {
      vm.Model.searchWord1 = review.content;
      vm.Model.comment.review = review.id;
      vm.Model.reviews = [];
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return $q.resolve({
        message: 'empty'
      });
    }

    function reset() {
      var defaultObj = {
        searchWord0: '',
        searchWord1: '',
        review: {
          content: '',
          isAnnonymouse: null,
          category: '',
          // ass
          post: '',
          review: '',
          owner: {}
        },
        posts: [],
        reviews: [],

        images: [], // mixture of photos, and files
        tempFiles: [], // hold selected image files
        files: [],
        create: [],
        destroy: []
      };
      angular.copy(defaultObj, vm.Model);
      removeModals();
    }

    //====================================================
    //  Modals
    //====================================================
    function createSelectBox1() {
      return $ionicPopover.fromTemplateUrl('state/Comment/CommentCreate/Popover/SelectBox1.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox1 = popover;
      });
    }

    function createSelectBox2() {
      return $ionicPopover.fromTemplateUrl('state/Comment/CommentCreate/Popover/SelectBox2.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox2 = popover;
      });
    }

    function createSelectBox3() {
      return $ionicPopover.fromTemplateUrl('state/Comment/CommentCreate/Popover/SelectBox3.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox3 = popover;
      });
    }

    function createSelectBox4() {
      return $ionicPopover.fromTemplateUrl('state/Comment/CommentCreate/Popover/SelectBox4.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox4 = popover;
      });
    }

    function createProvinceModal() {
      return $ionicModal.fromTemplateUrl('state/Comment/CommentCreate/Modal/ProvinceModal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.provinceModal = modal;
      });
    }

    function createKeywordModal() {
      return $ionicModal.fromTemplateUrl('state/Comment/CommentCreate/Modal/KeywordModal.html', {
        id: 'keyword',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.keywordModal = modal;
      });
    }

    function removeModals() {
      vm.selectBox1.remove();
      delete vm.selectBox1;
      vm.selectBox2.remove();
      delete vm.selectBox2;
      vm.selectBox3.remove();
      delete vm.selectBox3;
      vm.selectBox4.remove();
      delete vm.selectBox4;
      vm.provinceModal.remove();
      delete vm.provinceModal;
      vm.keywordModal.remove();
      delete vm.keywordModal;
    }

    //====================================================
    //  REST
    //====================================================
    // function createPhotos() {
    //   U.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
    //   let uploadOptions = {
    //     url: SERVER_URL + '/photo/createPhotos',
    //     method: 'POST',
    //     file: vm.Model.files,
    //     fields: {
    //       query: {
    //         create: vm.Model.create
    //       }
    //     },
    //     headers: {
    //       enctype: "multipart/form-data"
    //     }
    //   };
    //   var promise = Upload.upload(uploadOptions);
    //   return promise
    //     .then(function(dataWrapper) {
    //       var idsWrapper = dataWrapper.data;
    //       return idsWrapper;
    //     });
    // }

    function commentCreateComment(extraQuery) {
      var queryWrapper = {
        query: vm.Model.comment
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --commentCreateComment-- :::\n", queryWrapper);
      return Comments.createComment({}, queryWrapper).$promise.then(function (comment) {
        return comment;
      });
    }

    function reviewFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 50
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Reviews.find(queryWrapper).$promise.then(function (postsWrapper) {
        return postsWrapper;
      });
    }

    function postFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 50
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.find(queryWrapper).$promise.then(function (postsWrapper) {
        return postsWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('CommentCreateModel', CommentCreateModel);

  CommentCreateModel.$inject = [];

  function CommentCreateModel() {

    var Model = {
      searchWord0: '',
      searchWord1: '',
      review: {
        content: '',
        isAnnonymouse: null,
        category: '',
        // ass
        post: '',
        review: '',
        owner: {}
      },
      posts: [],
      reviews: [],

      images: [], // mixture of photos, and files
      tempFiles: [], // hold selected image files
      files: [],
      create: [],
      destroy: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('CommentListController', CommentListController);

  CommentListController.$inject = ['$scope', '$q', '$ionicPopover', '$window', 'CommentListModel', 'U', 'Comments', 'Message'];

  function CommentListController($scope, $q, $ionicPopover, $window, CommentListModel, U, Comments, Message) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = CommentListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.loadMore = loadMore;
    vm.find = find;
    vm.search = search;
    vm.destroy = destroy;

    //====================================================
    // View Comments
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      } else {
        U.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!vm.categoryPopover) {
        createCategoryPopover();
      }
      if (!vm.columnPopover) {
        createColumnPopover();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (commentsWrapper) {
          console.log("commentsWrapper :::\n", commentsWrapper);
          U.bindData(commentsWrapper, CommentListModel, 'comments');
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.scrollTo(vm.Model);
      }
    }

    function onBeforeLeave() {
      removeModals();
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function loadMore() {
      var last = CommentListModel.comments.length - 1;
      return commentFind({
        updatedAt: {
          '<': CommentListModel.comments[last].updatedAt
        }
      }).then(function (commentsWrapper) {
        U.appendData(commentsWrapper, vm.Model, 'comments');
      }).catch(function (err) {
        U.error(err);
      }).finally(function () {
        U.broadcast($scope);
      });
    }

    function search(searchWord) {
      U.loading(vm.Model);
      var extraQuery = undefined;
      if (vm.Model.selectedCategory === 'POST-COMMENT') {
        extraQuery = {
          or: [{ content: { contains: searchWord } }]
        };
      } else
        // { post: { contains: searchWord } }, //title
        {
          extraQuery = {
            or: [{ content: { contains: searchWord } }]
          };
        }

      // { review: { contains: searchWord } }, // content
      console.log("extraQuery :::\n", extraQuery);

      return commentFind(extraQuery).then(function (commentsWrapper) {
        U.bindData(commentsWrapper, CommentListModel, 'comments');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroy(comment, $index, $event) {
      $event.stopPropagation();
      Message.loading();
      return commentDestroyComment({
        id: comment.id
      }).then(function (comment) {
        console.log("comment :::\n", comment);
        CommentListModel.comments.splice($index, 1);
        Message.alert('댓글 지우기 알림', '댓글을 성공적으로 지웠습니다');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function find(extraQuery) {
      U.loading(CommentListModel);
      return commentFind(extraQuery).then(function (commentsWrapper) {
        U.bindData(commentsWrapper, CommentListModel, 'comments');
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    // Private
    //====================================================
    function init() {
      return commentFind();
    }

    function reset() {
      vm.Model.searchWord = '';
    }

    //====================================================
    //  Modals
    //====================================================
    function createCategoryPopover() {
      return $ionicPopover.fromTemplateUrl('state/Comment/CommentList/Popover/CategoryPopover.html', {
        scope: $scope
      }).then(function (popover) {
        vm.categoryPopover = popover;
      });
    }

    function createColumnPopover() {
      return $ionicPopover.fromTemplateUrl('state/Comment/CommentList/Popover/ColumnPopover.html', {
        scope: $scope
      }).then(function (popover) {
        vm.columnPopover = popover;
      });
    }

    function removeModals() {
      vm.columnPopover.remove();
      delete vm.columnPopover;
      vm.categoryPopover.remove();
      delete vm.categoryPopover;
    }

    //====================================================
    // REST
    //====================================================
    function commentFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            category: vm.Model.selectedCategory
          },
          limit: 51,
          sort: 'updatedAt DESC',
          populate: ['owner', 'review', 'post']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Comments.find(queryWrapper).$promise.then(function (commentsWrapper) {
        return commentsWrapper;
      });
    }

    function commentDestroyComment(extraQuery) {
      var queryWrapper = {};
      angular.extend(queryWrapper, extraQuery);
      return Comments.destroyComment(queryWrapper).$promise.then(function (commentsWrapper) {
        return commentsWrapper;
      });
    }
  }
})();
'use strict';

/* beautify preserve:start */
(function () {
  'use strict';

  angular.module('app').factory('CommentListModel', CommentListModel);

  CommentListModel.$inject = [];

  function CommentListModel() {
    var Model = {
      searchWord: '',
      handle: 'CommentListModel',
      loading: false,
      events: [],
      sort: {
        id: -1
      },
      selectedCategory: 'POST-COMMENT',
      columnFilterOption: {
        'POST-COMMENT': [{ name: 'post', show: true }, { name: 'category', show: false }, { name: 'content', show: true }, { name: 'isAnnonymous', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }],
        'REVIEW-COMMENT': [{ name: 'review', show: true }, { name: 'category', show: true }, { name: 'content', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }]
      }
    };

    return Model;
  }
})();
/* beautify preserve:end */
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('CommentUpdateController', CommentUpdateController);

  CommentUpdateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', '$ionicModal', '$state', '$location', 'CommentUpdateModel', 'Comments', 'Posts', 'Reviews', 'U', 'Message'
  /*, 'Upload',
      'SERVER_URL'*/
  ];

  function CommentUpdateController($scope, $q, $timeout, $window, $ionicPopover, $ionicModal, $state, $location, CommentUpdateModel, Comments, Posts, Reviews, U, Message
  /*, Upload,
      SERVER_URL*/
  ) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = CommentUpdateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.update = update;
    vm.destroy = destroy;
    vm.searchPost = searchPost;
    vm.selectPost = selectPost;
    vm.searchReview = searchReview;
    vm.selectReview = selectReview;
    //====================================================
    //  View Comments
    //====================================================
    function onBeforeEnter() {
      if ($state.params.flag) {
        $location.hash($state.params.flag);
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!vm.selectBox1) {
        createSelectBox1();
      }
      if (!vm.selectBox2) {
        createSelectBox2();
      }
      if (!vm.selectBox3) {
        createSelectBox3();
      }
      if (!vm.selectBox4) {
        createSelectBox4();
      }
      if (!vm.provinceModal) {
        createProvinceModal();
      }
      if (!vm.keywordModal) {
        createKeywordModal();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (comment) {
          // U.PhotoClass.pushToImages(vm.Model.images, review.photos);
          return U.bindData(comment, vm.Model, 'comment');
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function update() {
      Message.loading();
      // return createPhotos()
      //   .then((idsWrapper) => {
      //     if (!idsWrapper) {
      //       return false;
      //     }
      //     let ids = idsWrapper.ids;
      //     let photos = U.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.comment.photos, ids);
      //     vm.Model.comment.photos = photos;
      //   })
      $q.resolve().then(function () {
        return commentUpdateComment();
      }).then(function (comment) {
        console.log("comment :::\n", comment);
        return Message.alert('댓글 등록 알림', '댓글이 성공적으로 등록 되었습니다.');
      }).then(function () {
        U.goToState('Main.Comment.CommentList');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroy() {
      return Message.confirm('댓글 지우기', '정말로 지우시겠습니까?').then(function (yes) {
        if (yes) {
          Message.loading();
          return commentDestroyComment({
            id: $state.params.id
          });
        } else {
          return $q.reject({ message: 'no' });
        }
      }).then(function (comment) {
        console.log("comment :::\n", comment);
        return Message.alert('댓글 지우기 알림', '댓글을 성공적으로 지웠습니다');
      }).then(function () {
        U.goToState('Main.Comment.CommentList', null, 'back');
      }).catch(function (err) {
        if (err.message !== 'no') {
          U.error(err);
        }
      });
    }

    function searchPost() {
      var searchWord0 = vm.Model.searchWord0;
      return postFind({
        title: { contains: searchWord0 }
      }).then(function (postsWrapper) {
        console.log("postsWrapper :::\n", postsWrapper);
        return U.bindData(postsWrapper, vm.Model, 'posts');
      }).then(function () {
        if (vm.Model.posts.length === 0) {
          Message.alert('검색 하신 주당톡이 없습니다', '주당톡제목을 확인하시고 다시 검색해주세요.');
        }
      }).catch(function (err) {
        U.error(err);
      });
    }

    function selectPost(post) {
      vm.Model.searchWord0 = post.title;
      vm.Model.comment.post = post.id;
      vm.Model.posts = [];
    }

    function searchReview() {
      var searchWord1 = vm.Model.searchWord1;
      return reviewFind({
        content: { contains: searchWord1 }
      }).then(function (reviewsWrapper) {
        console.log("reviewsWrapper :::\n", reviewsWrapper);
        return U.bindData(reviewsWrapper, vm.Model, 'reviews');
      }).then(function () {
        if (vm.Model.reviews.length === 0) {
          Message.alert('검색 하신 리뷰가 없습니다', '리뷰내용을 확인하시고 다시 검색해주세요.');
        }
      }).catch(function (err) {
        U.error(err);
      });
    }

    function selectReview(review) {
      vm.Model.searchWord1 = review.content;
      vm.Model.comment.review = review.id;
      vm.Model.reviews = [];
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return commentFindOne().then(function (comment) {
        if (comment.post && comment.post.id) {
          vm.Model.searchWord0 = comment.post.title;
        }
        if (comment.review && comment.review.id) {
          vm.Model.searchWord1 = comment.review.content;
        }
        return comment;
      });
    }

    function reset() {
      var defaultObj = {
        searchWord0: '',
        searchWord1: '',
        review: {
          content: '',
          isAnnonymouse: null,
          category: '',
          // ass
          post: '',
          review: '',
          owner: {}
        },
        posts: [],
        reviews: [],

        images: [], // mixture of photos, and files
        tempFiles: [], // hold selected image files
        files: [],
        create: [],
        destroy: []
      };
      angular.copy(defaultObj, vm.Model);
      removeModals();
    }

    //====================================================
    //  Modals
    //====================================================
    function createSelectBox1() {
      return $ionicPopover.fromTemplateUrl('state/Comment/CommentUpdate/Popover/SelectBox1.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox1 = popover;
      });
    }

    function createSelectBox2() {
      return $ionicPopover.fromTemplateUrl('state/Comment/CommentUpdate/Popover/SelectBox2.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox2 = popover;
      });
    }

    function createSelectBox3() {
      return $ionicPopover.fromTemplateUrl('state/Comment/CommentUpdate/Popover/SelectBox3.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox3 = popover;
      });
    }

    function createSelectBox4() {
      return $ionicPopover.fromTemplateUrl('state/Comment/CommentUpdate/Popover/SelectBox4.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox4 = popover;
      });
    }

    function createProvinceModal() {
      return $ionicModal.fromTemplateUrl('state/Comment/CommentUpdate/Modal/ProvinceModal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.provinceModal = modal;
      });
    }

    function createKeywordModal() {
      return $ionicModal.fromTemplateUrl('state/Comment/CommentUpdate/Modal/KeywordModal.html', {
        id: 'keyword',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.keywordModal = modal;
      });
    }

    function removeModals() {
      vm.selectBox1.remove();
      delete vm.selectBox1;
      vm.selectBox2.remove();
      delete vm.selectBox2;
      vm.selectBox3.remove();
      delete vm.selectBox3;
      vm.selectBox4.remove();
      delete vm.selectBox4;
      vm.provinceModal.remove();
      delete vm.provinceModal;
      vm.keywordModal.remove();
      delete vm.keywordModal;
    }

    //====================================================
    //  REST
    //====================================================
    function commentFindOne(extraQuery) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          },
          populate: ['post', 'review']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      return Comments.findOne(queryWrapper).$promise.then(function (comment) {
        console.log("comment :::\n", comment);
        return comment;
      });
    }
    // function createPhotos() {
    //   U.PhotoClass.processUpdate(vm.Model.images, vm.Model.create, vm.Model.files);
    //   let uploadOptions = {
    //     url: SERVER_URL + '/photo/createPhotos',
    //     method: 'POST',
    //     file: vm.Model.files,
    //     fields: {
    //       query: {
    //         create: vm.Model.create
    //       }
    //     },
    //     headers: {
    //       enctype: "multipart/form-data"
    //     }
    //   };
    //   var promise = Upload.upload(uploadOptions);
    //   return promise
    //     .then(function(dataWrapper) {
    //       var idsWrapper = dataWrapper.data;
    //       return idsWrapper;
    //     });
    // }

    function commentUpdateComment(extraQuery) {
      var queryWrapper = {
        query: vm.Model.comment
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --commentUpdateComment-- :::\n", queryWrapper);
      return Comments.updateComment({}, queryWrapper).$promise.then(function (comment) {
        return comment;
      });
    }

    function reviewFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 50
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Reviews.find(queryWrapper).$promise.then(function (postsWrapper) {
        return postsWrapper;
      });
    }

    function postFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 50
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.find(queryWrapper).$promise.then(function (postsWrapper) {
        return postsWrapper;
      });
    }

    function commentDestroyComment(extraQuery) {
      var queryWrapper = {};
      angular.extend(queryWrapper, extraQuery);
      return Comments.destroyComment(queryWrapper).$promise.then(function (commentsWrapper) {
        return commentsWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('CommentUpdateModel', CommentUpdateModel);

  CommentUpdateModel.$inject = [];

  function CommentUpdateModel() {

    var Model = {
      searchWord0: '',
      searchWord1: '',
      review: {
        content: '',
        isAnnonymouse: null,
        category: '',
        // ass
        post: '',
        review: '',
        owner: {}
      },
      posts: [],
      reviews: [],

      images: [], // mixture of photos, and files
      tempFiles: [], // hold selected image files
      files: [],
      create: [],
      destroy: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('EventCreateController', EventCreateController);

  EventCreateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', 'EventCreateModel', 'Events', 'U', 'Message', 'Upload', 'SERVER_URL'];

  function EventCreateController($scope, $q, $timeout, $window, $ionicPopover, EventCreateModel, Events, U, Message, Upload, SERVER_URL) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = EventCreateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.create = create;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!vm.selectBox1) {
        createSelectBox1();
      }
      if (!vm.selectBox2) {
        createSelectBox2();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (message) {
          console.log("message :::\n", message);
          U.freeze(false);
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function create() {
      Message.loading();
      return createPhotos().then(function (idsWrapper) {
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = U.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.event.photos, ids);
        vm.Model.event.photos = photos;
      }).then(function () {
        return eventCreate();
      }).then(function (event) {
        console.log("event :::\n", event);
        return Message.alert('이벤트 등록 알림', '이벤트가 성공적으로 등록되었습니다.');
      }).then(function () {
        U.goToState('Main.Event.EventList');
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return $q.resolve({
        message: 'empty'
      });
    }

    function reset() {
      var defaultObj = {
        event: {
          title: '',
          content: '',
          warning: '',
          category: null,
          showLinkButton: null,
          duration: '',
          location: '',
          photos: []
        },
        images: [], // mixture of photos, and files
        tempFiles: [], // hold selected image files
        files: [],
        create: [],
        destroy: []
      };
      angular.copy(defaultObj, vm.Model);
      removeModals();
    }

    //====================================================
    //  Modals
    //====================================================
    function createSelectBox1() {
      return $ionicPopover.fromTemplateUrl('state/Event/EventCreate/Popover/SelectBox1.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox1 = popover;
      });
    }

    function createSelectBox2() {
      return $ionicPopover.fromTemplateUrl('state/Event/EventCreate/Popover/SelectBox2.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox2 = popover;
      });
    }

    function removeModals() {
      vm.selectBox1.remove();
      delete vm.selectBox1;
      vm.selectBox2.remove();
      delete vm.selectBox2;
    }

    //====================================================
    //  REST
    //====================================================
    function createPhotos() {
      U.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      var uploadOptions = {
        url: SERVER_URL + '/photo/createPhotos',
        method: 'POST',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      return promise.then(function (dataWrapper) {
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    function eventCreate(extraQuery) {
      var queryWrapper = {
        query: vm.Model.event
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --eventCreate-- :::\n", queryWrapper);
      return Events.create({}, queryWrapper).$promise.then(function (event) {
        return event;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('EventCreateModel', EventCreateModel);

  EventCreateModel.$inject = [];

  function EventCreateModel() {

    var Model = {
      event: {
        title: '',
        content: '',
        warning: '',
        category: null,
        showLinkButton: null,
        homepage: '',
        duration: '',
        location: '',
        photos: []
      },
      images: [], // mixture of photos, and files
      tempFiles: [], // hold selected image files
      files: [],
      create: [],
      destroy: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('EventListController', EventListController);

  EventListController.$inject = ['$scope', '$q', '$ionicPopover', '$window', 'EventListModel', 'U', 'Events', 'Message'];

  function EventListController($scope, $q, $ionicPopover, $window, EventListModel, U, Events, Message) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = EventListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.loadMore = loadMore;
    vm.findEvent = findEvent;
    vm.search = search;
    vm.destroy = destroy;

    //====================================================
    // View Events
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      } else {
        U.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!vm.categoryPopover) {
        createCategoryPopover();
      }
      if (!vm.columnPopover) {
        createColumnPopover();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (eventsWrapper) {
          console.log("eventsWrapper :::\n", eventsWrapper);
          U.bindData(eventsWrapper, EventListModel, 'events');
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.scrollTo(vm.Model);
      }
    }

    function onBeforeLeave() {
      removeModals();
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function loadMore() {
      var last = EventListModel.events.length - 1;
      return eventFind({
        updatedAt: {
          '<': EventListModel.events[last].updatedAt
        }
      }).then(function (eventsWrapper) {
        U.appendData(eventsWrapper, vm.Model, 'events');
      }).catch(function (err) {
        U.error(err);
      }).finally(function () {
        U.broadcast($scope);
      });
    }

    function search(searchWord) {
      U.loading(EventListModel);
      return eventFind({
        or: [{ title: { contains: searchWord } }, { content: { contains: searchWord } }, { warning: { contains: searchWord } }, { duration: { contains: searchWord } }, { location: { contains: searchWord } }]
      }).then(function (eventsWrapper) {
        U.bindData(eventsWrapper, EventListModel, 'events');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroy(event, $index, $event) {
      $event.stopPropagation();
      Message.loading();
      return eventDestroy({
        id: event.id
      }).then(function (event) {
        console.log("event :::\n", event);
        EventListModel.events.splice($index, 1);
        Message.alert('이벤트 지우기 알림', '이벤트를 성공적으로 지웠습니다');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function findEvent(extraQuery) {
      U.loading(EventListModel);
      return eventFind(extraQuery).then(function (eventsWrapper) {
        U.bindData(eventsWrapper, EventListModel, 'events');
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    // Private
    //====================================================
    function init() {
      return eventFind();
    }

    function reset() {}

    //====================================================
    //  Modals
    //====================================================
    function createCategoryPopover() {
      return $ionicPopover.fromTemplateUrl('state/Event/EventList/Popover/CategoryPopover.html', {
        scope: $scope
      }).then(function (popover) {
        vm.categoryPopover = popover;
      });
    }

    function createColumnPopover() {
      return $ionicPopover.fromTemplateUrl('state/Event/EventList/Popover/ColumnPopover.html', {
        scope: $scope
      }).then(function (popover) {
        vm.columnPopover = popover;
      });
    }

    function removeModals() {
      vm.columnPopover.remove();
      delete vm.columnPopover;
      vm.categoryPopover.remove();
      delete vm.categoryPopover;
    }

    //====================================================
    // REST
    //====================================================
    function eventFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            category: EventListModel.selectedCategory
          },
          limit: 51,
          sort: 'updatedAt DESC',
          populate: ['owner']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Events.find(queryWrapper).$promise.then(function (eventsWrapper) {
        return eventsWrapper;
      });
    }

    function eventDestroy(extraQuery) {
      var queryWrapper = {};
      angular.extend(queryWrapper, extraQuery);
      return Events.destroy(queryWrapper).$promise.then(function (eventsWrapper) {
        return eventsWrapper;
      });
    }
  }
})();
'use strict';

/* beautify preserve:start */
(function () {
  'use strict';

  angular.module('app').factory('EventListModel', EventListModel);

  EventListModel.$inject = [];

  function EventListModel() {
    var Model = {
      handle: 'EventListModel',
      loading: false,
      events: [],
      sort: {
        id: -1
      },
      selectedCategory: 'JOODANG-EVENT',
      columnFilterOption: {
        'JOODANG-EVENT': [{ name: 'title', show: true }, // columnNameObj
        { name: 'content', show: true }, { name: 'warning', show: true }, { name: 'showLinkButton', show: true }, { name: 'duration', show: true }, { name: 'location', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }],
        'BAR-EVENT': [{ name: 'title', show: true }, // columnNameObj
        { name: 'content', show: true }, { name: 'warning', show: true }, { name: 'showLinkButton', show: true }, { name: 'duration', show: true }, { name: 'location', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }]
      }
    };

    return Model;
  }
})();
/* beautify preserve:end */
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('EventUpdateController', EventUpdateController);

  EventUpdateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', '$state', 'EventUpdateModel', 'Events', 'U', 'Message', 'Upload', 'SERVER_URL'];

  function EventUpdateController($scope, $q, $timeout, $window, $ionicPopover, $state, EventUpdateModel, Events, U, Message, Upload, SERVER_URL) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = EventUpdateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.update = update;
    vm.destroy = destroy;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!vm.selectBox1) {
        createSelectBox1();
      }
      if (!vm.selectBox2) {
        createSelectBox2();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (event) {
          U.PhotoClass.pushToImages(vm.Model.images, event.photos);
          return U.bindData(event, vm.Model, 'event');
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function update() {
      Message.loading();
      return updatePhotos().then(function (idsWrapper) {
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = U.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.event.photos, ids);
        vm.Model.event.photos = photos;
      }).then(function () {
        return eventUpdate();
      }).then(function (event) {
        console.log("event :::\n", event);
        return Message.alert('이벤트 수정 알림', '이벤트가 성공적으로 수정되었습니다.');
      }).then(function () {
        U.goToState('Main.Event.EventList');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroy() {
      return Message.confirm('이벤트 삭제 알림', '정말로 지우시겠습니까?').then(function (yes) {
        if (yes) {
          Message.loading();
          return eventDestroy();
        } else {
          return $q.reject({ message: 'ionic:confirm:no' });
        }
      }).then(function (event) {
        console.log("event :::\n", event);
        return Message.alert('이벤트 지우기 알림', '이벤트를 성공적으로 지웠습니다.');
      }).then(function () {
        U.goToState('Main.Event.EventList', null, 'back');
      }).catch(function (err) {
        console.log("err :::\n", err);
        U.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return eventFindOne();
    }

    function reset() {
      var defaultObj = {
        event: {
          title: '',
          content: '',
          warning: '',
          category: null,
          showLinkButton: null,
          duration: '',
          location: '',
          photos: []
        },
        images: [], // mixture of photos, and files
        tempFiles: [], // hold selected image files
        files: [],
        create: [],
        destroy: []
      };
      angular.copy(defaultObj, vm.Model);
      removeModals();
    }

    //====================================================
    //  Modals
    //====================================================
    function createSelectBox1() {
      return $ionicPopover.fromTemplateUrl('state/Event/EventUpdate/Popover/SelectBox1.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox1 = popover;
      });
    }

    function createSelectBox2() {
      return $ionicPopover.fromTemplateUrl('state/Event/EventUpdate/Popover/SelectBox2.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox2 = popover;
      });
    }

    function removeModals() {
      vm.selectBox1.remove();
      delete vm.selectBox1;
      vm.selectBox2.remove();
      delete vm.selectBox2;
    }

    //====================================================
    //  REST
    //====================================================
    function eventFindOne(extraQuery) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          },
          populate: ['photos']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      return Events.findOne(queryWrapper).$promise.then(function (event) {
        return event;
      });
    }

    function updatePhotos() {
      U.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      U.PhotoClass.processDestroy(vm.Model.images, vm.Model.destroy, vm.Model.event.photos);
      var uploadOptions = {
        url: SERVER_URL + '/photo/updatePhotos',
        method: 'PUT',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create,
            destroy: vm.Model.destroy
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      return promise.then(function (dataWrapper) {
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    function eventUpdate(extraQuery) {
      var queryWrapper = {
        query: vm.Model.event
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --eventUpdate-- :::\n", queryWrapper);
      return Events.update({}, queryWrapper).$promise.then(function (event) {
        return event;
      });
    }

    function eventDestroy(extraQuery) {
      var queryWrapper = {
        id: $state.params.id
      };
      angular.extend(queryWrapper, extraQuery);
      return Events.destroy(queryWrapper).$promise.then(function (eventsWrapper) {
        return eventsWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('EventUpdateModel', EventUpdateModel);

  EventUpdateModel.$inject = [];

  function EventUpdateModel() {

    var Model = {
      event: {
        title: '',
        content: '',
        warning: '',
        category: null,
        showLinkButton: null,
        duration: '',
        location: '',
        photos: []
      },
      images: [], // mixture of photos, and files
      tempFiles: [], // hold selected image files
      files: [],
      create: [],
      destroy: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('PlaceCreateController', PlaceCreateController);

  PlaceCreateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', '$ionicModal', '$state', '$location', 'PlaceCreateModel', 'Places', 'U', 'Message', 'Upload', 'Province', 'UniqueKeywords', 'MultipleKeywords', 'Users', 'SERVER_URL'];

  function PlaceCreateController($scope, $q, $timeout, $window, $ionicPopover, $ionicModal, $state, $location, PlaceCreateModel, Places, U, Message, Upload, Province, UniqueKeywords, MultipleKeywords, Users, SERVER_URL) {
    var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = PlaceCreateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.create = create;
    vm.toggleMultipleKeywords = toggleMultipleKeywords;
    vm.toggleUniqueKeywords = toggleUniqueKeywords;
    vm.isSelected = isSelected;
    vm.searchUser = searchUser;
    vm.selectUser = selectUser;

    //====================================================
    //  View Places
    //====================================================
    function onBeforeEnter() {
      if ($state.params.flag) {
        $location.hash($state.params.flag);
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!vm.selectBox1) {
        createSelectBox1();
      }
      if (!vm.selectBox2) {
        createSelectBox2();
      }
      if (!vm.selectBox3) {
        createSelectBox3();
      }
      if (!vm.selectBox4) {
        createSelectBox4();
      }
      if (!vm.provinceModal) {
        createProvinceModal();
      }
      if (!vm.keywordModal) {
        createKeywordModal();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (message) {
          console.log("message :::\n", message);
          U.freeze(false);
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function create() {
      Message.loading();
      return beforeCreate().then(function () {
        return createPhotos();
      }).then(function (idsWrapper) {
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = U.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.place.photos, ids);
        vm.Model.place.photos = photos;
      }).then(function () {
        return placeCreate();
      }).then(function (place) {
        console.log("place :::\n", place);
        var messageConfirm = Message.confirm('장소가 성공적으로 등록되었습니다', '메뉴도 올리시겠습니까?');
        return $q.all([place, messageConfirm]);
      }).then(function (array) {
        var yes = array[1];
        var place = array[0];
        if (yes) {
          U.goToState('Main.Place.PlaceUpdate', { id: place.id, flag: 'products' });
        } else {
          U.goToState('Main.Place.PlaceList');
        }
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return $q.resolve({
        message: 'empty'
      });
    }

    function toggleMultipleKeywords(multipleKeywordObj) {
      var index = vm.Model.place.keywords.indexOf(multipleKeywordObj.title);
      if (index !== -1) {
        vm.Model.place.keywords.splice(index, 1);
      } else {
        vm.Model.place.keywords.push(multipleKeywordObj.title);
      }
    }

    function toggleUniqueKeywords(uniqueKeywordObj) {
      var uniqueKeys = _.map(vm.Model.uniqueKeywords, 'title');
      var existingUniqueKey = _.intersection(vm.Model.place.keywords, uniqueKeys)[0];
      var index = vm.Model.place.keywords.indexOf(existingUniqueKey);
      if (index !== -1) {
        vm.Model.place.keywords.splice(index, 1);
      }
      vm.Model.place.keywords.push(uniqueKeywordObj.title);
    }

    function isSelected(keywordObj) {
      var index = vm.Model.place.keywords.indexOf(keywordObj.title);
      if (index !== -1) {
        return true;
      } else {
        return false;
      }
    }

    function reset() {
      var defaultObj = {
        searchUserWord: '',
        place: {
          name: '',
          category: null, // PREMIUM, SPECIAL, NORMAL
          tagString: '',
          province: null, // String
          hours: '',
          size: '',
          summary: '',
          showDiscountTag: null,
          discountTitle: '',
          discountContent: '',
          showEventTag: null,
          eventContent: '',
          phone: '',
          tags: [],
          theme: null,
          keywords: [],
          photos: [],

          address: '',
          geoJSON: { type: 'Point', coordinates: [127.027621, 37.497942] },
          setOwner: ''

          // products: [],
          // reviews: [],
          // favorites: [],

          // viewCount: 0,
          // favoriteCount: 0,
          // reviewCount: 0
        },
        tag0: '',
        tag1: '',
        tag2: '',
        tag3: '',
        tag4: '',
        searchedPlaces: [],
        selectedState: '',
        images: [], // mixture of photos, and files
        tempFiles: [], // hold selected image files
        files: [],
        create: [],
        destroy: []
      };
      angular.copy(defaultObj, vm.Model);
      vm.Model.Province = Province;
      vm.Model.uniqueKeywords = UniqueKeywords;
      vm.Model.multipleKeywords = MultipleKeywords;
      removeModals();
    }

    function beforeCreate() {
      angular.forEach(['tag0', 'tag1', 'tag2', 'tag3', 'tag4'], function (tag) {
        if (vm.Model[tag]) {
          vm.Model.place.tags.push(vm.Model[tag]);
        }
        vm.Model.place.tagString = vm.Model.place.tags.join(',');
      });
      return $q.resolve();
    }

    function searchUser() {
      var searchUserWord = vm.Model.searchUserWord;
      vm.Model.searchUserLoading = true;
      console.log("searchUserWord :::\n", searchUserWord);
      return userFind({
        or: [{ username: { contains: searchUserWord } }, { nickname: { contains: searchUserWord } }, { name: { contains: searchUserWord } }, { id: { contains: searchUserWord } }]
      }).then(function (usersWrapper) {
        console.log("usersWrapper :::\n", usersWrapper);
        return U.bindData(usersWrapper, vm.Model, 'users');
      }).then(function () {
        vm.Model.searchUserLoading = false;
        if (vm.Model.users.length === 0) {
          Message.alert('검색 하신 사용자가 없습니다.', '다시 검색해주세요');
        }
      }).catch(function (err) {
        vm.Model.searchUserLoading = false;
        U.error(err);
      });
    }

    function selectUser(user) {
      vm.Model.searchUserWord = user.nickname;
      vm.Model.place.setOwner = user.id;
      vm.Model.users = [];
    }

    //====================================================
    //  Modals
    //====================================================
    function createSelectBox1() {
      return $ionicPopover.fromTemplateUrl('state/Place/PlaceCreate/Popover/SelectBox1.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox1 = popover;
      });
    }

    function createSelectBox2() {
      return $ionicPopover.fromTemplateUrl('state/Place/PlaceCreate/Popover/SelectBox2.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox2 = popover;
      });
    }

    function createSelectBox3() {
      return $ionicPopover.fromTemplateUrl('state/Place/PlaceCreate/Popover/SelectBox3.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox3 = popover;
      });
    }

    function createSelectBox4() {
      return $ionicPopover.fromTemplateUrl('state/Place/PlaceCreate/Popover/SelectBox4.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox4 = popover;
      });
    }

    function createProvinceModal() {
      return $ionicModal.fromTemplateUrl('state/Place/PlaceCreate/Modal/ProvinceModal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.provinceModal = modal;
      });
    }

    function createKeywordModal() {
      return $ionicModal.fromTemplateUrl('state/Place/PlaceCreate/Modal/KeywordModal.html', {
        id: 'keyword',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.keywordModal = modal;
      });
    }

    function removeModals() {
      vm.selectBox1.remove();
      delete vm.selectBox1;
      vm.selectBox2.remove();
      delete vm.selectBox2;
      vm.selectBox3.remove();
      delete vm.selectBox3;
      vm.selectBox4.remove();
      delete vm.selectBox4;
      vm.provinceModal.remove();
      delete vm.provinceModal;
      vm.keywordModal.remove();
      delete vm.keywordModal;
    }

    //====================================================
    //  REST
    //====================================================
    function createPhotos() {
      U.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      var uploadOptions = {
        url: SERVER_URL + '/photo/createPhotos',
        method: 'POST',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      return promise.then(function (dataWrapper) {
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    function placeCreate(extraQuery) {
      var queryWrapper = {
        query: vm.Model.place
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --placeCreate-- :::\n", queryWrapper);
      return Places.create({}, queryWrapper).$promise.then(function (place) {
        return place;
      });
    }

    function userFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 50
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Users.find(queryWrapper).$promise.then(function (usersWrapper) {
        return usersWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('PlaceCreateModel', PlaceCreateModel);

  PlaceCreateModel.$inject = ['Province', 'UniqueKeywords', 'MultipleKeywords'];

  function PlaceCreateModel(Province, UniqueKeywords, MultipleKeywords) {

    var Model = {
      searchUserWord: '',
      searchUserLoading: false,
      place: {
        name: '',
        category: null, // PREMIUM, SPECIAL, NORMAL
        tagString: '',
        province: null, // String
        hours: '',
        size: '',
        summary: '',
        showDiscountTag: null,
        discountTitle: '',
        discountContent: '',
        showEventTag: null,
        eventContent: '',
        phone: '',
        tags: [],
        theme: null,
        keywords: [],
        photos: [],

        address: '',
        geoJSON: { type: 'Point', coordinates: [127.027621, 37.497942] },

        setOwner: '' // only in create as owner is set by sails permission with user.id
        // Association
        // products: [],
        // reviews: [],
        // favorites: [],

        // viewCount: 0,
        // favoriteCount: 0,
        // reviewCount: 0
      },
      tag0: '',
      tag1: '',
      tag2: '',
      tag3: '',
      tag4: '',
      searchedPlaces: [],
      selectedState: '',
      images: [], // mixture of photos, and files
      tempFiles: [], // hold selected image files
      files: [],
      create: [],
      destroy: [],

      Province: Province,
      uniqueKeywords: UniqueKeywords,
      multipleKeywords: MultipleKeywords
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('PlaceListController', PlaceListController);

  PlaceListController.$inject = ['$scope', '$q', '$ionicPopover', '$window', 'PlaceListModel', 'U', 'Places', 'Message'];

  function PlaceListController($scope, $q, $ionicPopover, $window, PlaceListModel, U, Places, Message) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = PlaceListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.loadMore = loadMore;
    vm.findPlace = findPlace;
    vm.search = search;
    vm.destroy = destroy;

    //====================================================
    // View Places
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      } else {
        U.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!vm.categoryPopover) {
        createCategoryPopover();
      }
      if (!vm.columnPopover) {
        createColumnPopover();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (placesWrapper) {
          console.log("placesWrapper :::\n", placesWrapper);
          U.bindData(placesWrapper, PlaceListModel, 'places');
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
        U.scrollTo(vm.Model);
      }
    }

    function onBeforeLeave() {
      removeModals();
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function loadMore() {
      var last = PlaceListModel.places.length - 1;
      return placeFind({
        updatedAt: {
          '<': PlaceListModel.places[last].updatedAt
        }
      }).then(function (placesWrapper) {
        U.appendData(placesWrapper, vm.Model, 'places');
      }).catch(function (err) {
        U.error(err);
      }).finally(function () {
        U.broadcast($scope);
      });
    }

    function search(searchWord) {
      U.loading(PlaceListModel);
      return placeFind({
        or: [{ name: { contains: searchWord } }, { category: { contains: searchWord } }, { province: { contains: searchWord } }, { summary: { contains: searchWord } }, { address: { contains: searchWord } }, { theme: { contains: searchWord } }]
      }).then(function (placesWrapper) {
        U.bindData(placesWrapper, PlaceListModel, 'places');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroy(place, $index, $event) {
      $event.stopPropagation();
      Message.loading();
      return placeDestroy({
        id: place.id
      }).then(function (place) {
        console.log("place :::\n", place);
        PlaceListModel.places.splice($index, 1);
        Message.alert('장소 지우기 알림', '장소를 성공적으로 지웠습니다');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function findPlace(extraQuery) {
      U.loading(PlaceListModel);
      return placeFind(extraQuery).then(function (placesWrapper) {
        U.bindData(placesWrapper, PlaceListModel, 'places');
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    // Private
    //====================================================
    function init() {
      return placeFind();
    }

    function reset() {}

    //====================================================
    //  Modals
    //====================================================
    function createCategoryPopover() {
      return $ionicPopover.fromTemplateUrl('state/Place/PlaceList/Popover/CategoryPopover.html', {
        scope: $scope
      }).then(function (popover) {
        vm.categoryPopover = popover;
      });
    }

    function createColumnPopover() {
      return $ionicPopover.fromTemplateUrl('state/Place/PlaceList/Popover/ColumnPopover.html', {
        scope: $scope
      }).then(function (popover) {
        vm.columnPopover = popover;
      });
    }

    function removeModals() {
      vm.columnPopover.remove();
      delete vm.columnPopover;
      vm.categoryPopover.remove();
      delete vm.categoryPopover;
    }

    //====================================================
    // REST
    //====================================================
    function placeFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 51,
          sort: 'updatedAt DESC',
          populate: ['owner']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Places.find(queryWrapper).$promise.then(function (placesWrapper) {
        return placesWrapper;
      });
    }

    function placeDestroy(extraQuery) {
      var queryWrapper = {};
      angular.extend(queryWrapper, extraQuery);
      return Places.destroy(queryWrapper).$promise.then(function (placesWrapper) {
        return placesWrapper;
      });
    }
  }
})();
'use strict';

/* beautify preserve:start */
(function () {
  'use strict';

  angular.module('app').factory('PlaceListModel', PlaceListModel);

  PlaceListModel.$inject = [];

  function PlaceListModel() {
    var Model = {
      handle: 'PlaceListModel',
      loading: false,
      events: [],
      sort: {
        id: -1
      },
      selectedCategory: 'NA',
      columnFilterOption: {
        'NA': [{ name: 'name', show: true }, // columnNameObj
        { name: 'category', show: true }, { name: 'province', show: true }, { name: 'address', show: true }, { name: 'summary', show: true }, { name: 'theme', show: true }, { name: 'averageRating', show: true }, { name: 'phone', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }]
      }
    };

    return Model;
  }
})();
/* beautify preserve:end */
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('PlaceUpdateController', PlaceUpdateController);

  PlaceUpdateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', '$ionicModal', '$state', '$location', 'PlaceUpdateModel', 'Places', 'U', 'Message', 'Upload', 'Province', 'UniqueKeywords', 'MultipleKeywords', 'Users', 'SERVER_URL'];

  function PlaceUpdateController($scope, $q, $timeout, $window, $ionicPopover, $ionicModal, $state, $location, PlaceUpdateModel, Places, U, Message, Upload, Province, UniqueKeywords, MultipleKeywords, Users, SERVER_URL) {
    var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = PlaceUpdateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.update = update;
    vm.toggleMultipleKeywords = toggleMultipleKeywords;
    vm.toggleUniqueKeywords = toggleUniqueKeywords;
    vm.isSelected = isSelected;
    vm.destroy = destroy;
    vm.updateProducts = updateProducts;
    vm.searchUser = searchUser;
    vm.selectUser = selectUser;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      if ($state.params.flag) {
        $location.hash($state.params.flag);
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!vm.selectBox1) {
        createSelectBox1();
      }
      if (!vm.selectBox2) {
        createSelectBox2();
      }
      if (!vm.selectBox3) {
        createSelectBox3();
      }
      if (!vm.selectBox4) {
        createSelectBox4();
      }
      if (!vm.provinceModal) {
        createProvinceModal();
      }
      if (!vm.keywordModal) {
        createKeywordModal();
      }
      if (!vm.productModal) {
        createProductModal();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (place) {
          U.PhotoClass.pushToImages(vm.Model.images, place.photos);
          return U.bindData(place, vm.Model, 'place');
        }).then(function () {
          console.log("vm.Model.place :::\n", vm.Model.place);
          if ($location.hash()) {
            U.scrollToHash();
            vm.productModal.show();
          }
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function update() {
      Message.loading();
      return beforeUpdate().then(function () {
        return updatePhotos();
      }).then(function (idsWrapper) {
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = U.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.place.photos, ids);
        vm.Model.place.photos = photos;
      }).then(function () {
        return placeUpdate();
      }).then(function (place) {
        console.log("place :::\n", place);
        return Message.alert('장소 수정 알림', '장소가 성공적으로 수정되었습니다.');
      }).then(function () {
        U.goToState('Main.Place.PlaceList');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroy() {
      return Message.confirm('장소지우기', '정말로 지우시겠습니까?').then(function (yes) {
        if (yes) {
          Message.loading();
          return placeDestroy({
            id: $state.params.id
          });
        } else {
          return $q.reject({ message: 'no' });
        }
      }).then(function (place) {
        console.log("place :::\n", place);
        return Message.alert('장소 지우기 알림', '장소를 성공적으로 지웠습니다');
      }).then(function () {
        U.goToState('Main.Place.PlaceList', null, 'back');
      }).catch(function (err) {
        if (err.message !== 'no') {
          U.error(err);
        }
      });
    }

    function searchUser() {
      var searchUserWord = vm.Model.searchUserWord;
      vm.Model.searchUserLoading = true;
      console.log("searchUserWord :::\n", searchUserWord);
      return userFind({
        or: [{ username: { contains: searchUserWord } }, { nickname: { contains: searchUserWord } }, { name: { contains: searchUserWord } }, { id: { contains: searchUserWord } }]
      }).then(function (usersWrapper) {
        console.log("usersWrapper :::\n", usersWrapper);
        return U.bindData(usersWrapper, vm.Model, 'users');
      }).then(function () {
        vm.Model.searchUserLoading = false;
        if (vm.Model.users.length === 0) {
          Message.alert('검색 하신 사용자가 없습니다.', '다시 검색해주세요');
        }
      }).catch(function (err) {
        vm.Model.searchUserLoading = false;
        U.error(err);
      });
    }

    function selectUser(user) {
      vm.Model.searchUserWord = user.nickname;
      vm.Model.place.owner = user.id;
      vm.Model.users = [];
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return placeFindOne().then(function (place) {
        _.forEach(place.tags, function (tag, i) {
          vm.Model['tag' + i] = tag;
        });
        vm.Model.searchUserWord = place.owner.nickname;
        return place;
      });
    }

    function toggleMultipleKeywords(multipleKeywordObj) {
      var index = vm.Model.place.keywords.indexOf(multipleKeywordObj.title);
      if (index !== -1) {
        vm.Model.place.keywords.splice(index, 1);
      } else {
        vm.Model.place.keywords.push(multipleKeywordObj.title);
      }
    }

    function toggleUniqueKeywords(uniqueKeywordObj) {
      var uniqueKeys = _.map(vm.Model.uniqueKeywords, 'title');
      var existingUniqueKey = _.intersection(vm.Model.place.keywords, uniqueKeys)[0];
      var index = vm.Model.place.keywords.indexOf(existingUniqueKey);
      if (index !== -1) {
        vm.Model.place.keywords.splice(index, 1);
      }
      vm.Model.place.keywords.push(uniqueKeywordObj.title);
    }

    function isSelected(keywordObj) {
      var index = vm.Model.place.keywords.indexOf(keywordObj.title);
      if (index !== -1) {
        return true;
      } else {
        return false;
      }
    }

    function reset() {
      var defaultObj = {
        place: {
          name: '',
          category: null, // PREMIUM, SPECIAL, NORMAL
          tagString: '',
          province: null, // String
          hours: '',
          size: '',
          summary: '',
          showDiscountTag: null,
          discountTitle: '',
          discountContent: '',
          showEventTag: null,
          eventContent: '',
          phone: '',
          tags: [],
          theme: null,
          keywords: [],
          address: '',
          geoJSON: { type: 'Point', coordinates: [127.027621, 37.497942] },

          photos: [],
          products: []
        },
        // reviews: [],
        // favorites: [],

        // viewCount: 0,
        // favoriteCount: 0,
        // reviewCount: 0
        tag0: '',
        tag1: '',
        tag2: '',
        tag3: '',
        tag4: '',
        searchedPlaces: [],
        selectedState: '',
        images: [], // mixture of photos, and files
        tempFiles: [], // hold selected image files
        files: [],
        create: [],
        destroy: []
      };
      angular.copy(defaultObj, vm.Model);
      vm.Model.Province = Province;
      vm.Model.uniqueKeywords = UniqueKeywords;
      vm.Model.multipleKeywords = MultipleKeywords;
      removeModals();
    }

    function beforeUpdate() {
      vm.Model.place.tags = [];
      angular.forEach(['tag0', 'tag1', 'tag2', 'tag3', 'tag4'], function (tag) {
        if (vm.Model[tag]) {
          vm.Model.place.tags.push(vm.Model[tag]);
        }
        vm.Model.place.tagString = vm.Model.place.tags.join(',');
      });
      return $q.resolve();
    }

    function updateProducts() {
      Message.loading();
      return placeUpdateProducts().then(function (productsWrapper) {
        console.log("productsWrapper :::\n", productsWrapper);
        angular.copy(productsWrapper.products, vm.Model.place.products);
        return Message.alert('메뉴 추가 알림', '메뉴가 성공적으로 추가 되었습니다.');
      }).then(function () {
        vm.productModal.hide();
      }).catch(function (err) {
        console.log("err :::\n", err);
        return U.error(err);
      });
    }

    //====================================================
    //  Modals
    //====================================================
    function createSelectBox1() {
      return $ionicPopover.fromTemplateUrl('state/Place/PlaceUpdate/Popover/SelectBox1.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox1 = popover;
      });
    }

    function createSelectBox2() {
      return $ionicPopover.fromTemplateUrl('state/Place/PlaceUpdate/Popover/SelectBox2.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox2 = popover;
      });
    }

    function createSelectBox3() {
      return $ionicPopover.fromTemplateUrl('state/Place/PlaceUpdate/Popover/SelectBox3.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox3 = popover;
      });
    }

    function createSelectBox4() {
      return $ionicPopover.fromTemplateUrl('state/Place/PlaceUpdate/Popover/SelectBox4.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox4 = popover;
      });
    }

    function createProvinceModal() {
      return $ionicModal.fromTemplateUrl('state/Place/PlaceUpdate/Modal/ProvinceModal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.provinceModal = modal;
      });
    }

    function createKeywordModal() {
      return $ionicModal.fromTemplateUrl('state/Place/PlaceUpdate/Modal/KeywordModal.html', {
        id: 'keyword',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.keywordModal = modal;
      });
    }

    function createProductModal() {
      return $ionicModal.fromTemplateUrl('state/Place/PlaceUpdate/Modal/ProductModal.html', {
        id: 'product',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.productModal = modal;
      });
    }

    function removeModals() {
      vm.selectBox1.remove();
      delete vm.selectBox1;
      vm.selectBox2.remove();
      delete vm.selectBox2;
      vm.selectBox3.remove();
      delete vm.selectBox3;
      vm.selectBox4.remove();
      delete vm.selectBox4;
      vm.provinceModal.remove();
      delete vm.provinceModal;
      vm.keywordModal.remove();
      delete vm.keywordModal;
      vm.productModal.remove();
      delete vm.productModal;
    }

    //====================================================
    //  REST
    //====================================================
    // banner/findOne
    function placeFindOne(extraQuery) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          },
          populate: [{
            property: 'photos',
            criteria: { sort: 'index ASC' }
          }, {
            property: 'products',
            criteria: { sort: 'id ASC' }
          }, 'owner']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      return Places.findOne(queryWrapper).$promise.then(function (place) {
        console.log("place :::\n", place);
        return place;
      });
    }

    function updatePhotos() {
      U.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      U.PhotoClass.processDestroy(vm.Model.images, vm.Model.destroy, vm.Model.place.photos);
      var uploadOptions = {
        url: SERVER_URL + '/photo/updatePhotos',
        method: 'PUT',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create,
            destroy: vm.Model.destroy
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      return promise.then(function (dataWrapper) {
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    function placeUpdate(extraQuery) {
      var queryWrapper = {
        query: vm.Model.place
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --placeUpdate-- :::\n", queryWrapper);
      return Places.update({}, queryWrapper).$promise.then(function (place) {
        return place;
      });
    }

    function placeUpdateProducts(extraQuery) {
      var queryWrapper = {
        query: {
          place: $state.params.id,
          products: vm.Model.place.products
        }
      };
      angular.extend(queryWrapper.query, extraQuery);
      return Places.updateProducts({}, queryWrapper).$promise.then(function (productsWrapper) {
        return productsWrapper;
      });
    }

    function userFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 50
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Users.find(queryWrapper).$promise.then(function (usersWrapper) {
        return usersWrapper;
      });
    }

    function placeDestroy(extraQuery) {
      var queryWrapper = {};
      angular.extend(queryWrapper, extraQuery);
      return Places.destroy(queryWrapper).$promise.then(function (placesWrapper) {
        return placesWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('PlaceUpdateModel', PlaceUpdateModel);

  PlaceUpdateModel.$inject = ['Province', 'UniqueKeywords', 'MultipleKeywords'];

  function PlaceUpdateModel(Province, UniqueKeywords, MultipleKeywords) {

    var Model = {
      searchUserWord: '',
      searchUserLoading: false,

      place: {
        name: '',
        category: null, // PREMIUM, SPECIAL, NORMAL
        tagString: '',
        province: null, // String
        hours: '',
        size: '',
        summary: '',
        showDiscountTag: null,
        discountTitle: '',
        discountContent: '',
        showEventTag: null,
        eventContent: '',
        phone: '',
        tags: [],
        theme: null,
        keywords: [],

        address: '',
        geoJSON: { type: 'Point', coordinates: [127.027621, 37.497942] },

        // Association
        photos: [],
        products: []
      },

      // reviews: [],
      // favorites: [],

      // viewCount: 0,
      // favoriteCount: 0,
      // reviewCount: 0
      users: [],

      tag0: '',
      tag1: '',
      tag2: '',
      tag3: '',
      tag4: '',
      searchedPlaces: [],
      selectedState: '',
      images: [], // mixture of photos, and files
      tempFiles: [], // hold selected image files
      files: [],
      create: [],
      destroy: [],

      Province: Province,
      uniqueKeywords: UniqueKeywords,
      multipleKeywords: MultipleKeywords
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('PostCreateController', PostCreateController);

  PostCreateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', '$ionicModal', '$state', '$location', 'PostCreateModel', 'Posts', 'U', 'Message', 'Upload', 'SERVER_URL'];

  function PostCreateController($scope, $q, $timeout, $window, $ionicPopover, $ionicModal, $state, $location, PostCreateModel, Posts, U, Message, Upload, SERVER_URL) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = PostCreateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.create = create;
    // vm.searchPlace = searchPlace;
    // vm.selectPlace = selectPlace;
    //====================================================
    //  View Posts
    //====================================================
    function onBeforeEnter() {
      if ($state.params.flag) {
        $location.hash($state.params.flag);
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!vm.selectBox1) {
        createSelectBox1();
      }
      if (!vm.selectBox2) {
        createSelectBox2();
      }
      if (!vm.selectBox3) {
        createSelectBox3();
      }
      if (!vm.selectBox4) {
        createSelectBox4();
      }
      if (!vm.provinceModal) {
        createProvinceModal();
      }
      if (!vm.keywordModal) {
        createKeywordModal();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (message) {
          console.log("message :::\n", message);
          U.freeze(false);
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function create() {
      Message.loading();
      return createPhotos().then(function (idsWrapper) {
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = U.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.post.photos, ids);
        vm.Model.post.photos = photos;
      }).then(function () {
        return postCreate();
      }).then(function (post) {
        console.log("post :::\n", post);
        return Message.alert('글 등록 알림', '글이 성공적으로 등록 되었습니다.');
      }).then(function () {
        U.goToState('Main.Post.PostList');
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return $q.resolve({
        message: 'empty'
      });
    }

    function reset() {
      var defaultObj = {
        // searchWord0: '',
        post: {
          title: '',
          category: '', // '자유톡', '연애톡', '번개톡', '유머톡', 'NOTICE', 'FAQ'
          isAnnonymous: null,
          content: '',
          // ass
          photos: []
        },
        // ass
        // comments: [],
        // owner: {}
        images: [], // mixture of photos, and files
        tempFiles: [], // hold selected image files
        files: [],
        create: [],
        destroy: []

      };
      angular.copy(defaultObj, vm.Model);
      removeModals();
    }

    //====================================================
    //  Modals
    //====================================================
    function createSelectBox1() {
      return $ionicPopover.fromTemplateUrl('state/Post/PostCreate/Popover/SelectBox1.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox1 = popover;
      });
    }

    function createSelectBox2() {
      return $ionicPopover.fromTemplateUrl('state/Post/PostCreate/Popover/SelectBox2.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox2 = popover;
      });
    }

    function createSelectBox3() {
      return $ionicPopover.fromTemplateUrl('state/Post/PostCreate/Popover/SelectBox3.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox3 = popover;
      });
    }

    function createSelectBox4() {
      return $ionicPopover.fromTemplateUrl('state/Post/PostCreate/Popover/SelectBox4.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox4 = popover;
      });
    }

    function createProvinceModal() {
      return $ionicModal.fromTemplateUrl('state/Post/PostCreate/Modal/ProvinceModal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.provinceModal = modal;
      });
    }

    function createKeywordModal() {
      return $ionicModal.fromTemplateUrl('state/Post/PostCreate/Modal/KeywordModal.html', {
        id: 'keyword',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.keywordModal = modal;
      });
    }

    function removeModals() {
      vm.selectBox1.remove();
      delete vm.selectBox1;
      vm.selectBox2.remove();
      delete vm.selectBox2;
      vm.selectBox3.remove();
      delete vm.selectBox3;
      vm.selectBox4.remove();
      delete vm.selectBox4;
      vm.provinceModal.remove();
      delete vm.provinceModal;
      vm.keywordModal.remove();
      delete vm.keywordModal;
    }

    //====================================================
    //  REST
    //====================================================
    function createPhotos() {
      U.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      var uploadOptions = {
        url: SERVER_URL + '/photo/createPhotos',
        method: 'POST',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      return promise.then(function (dataWrapper) {
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    function postCreate(extraQuery) {
      // Before Create
      if (vm.Model.post.category === 'NOTICE' || vm.Model.post.category === 'FAQ') {
        vm.Model.post.showInTalk = false;
      } else {
        vm.Model.post.showInTalk = true;
      }
      var queryWrapper = {
        query: vm.Model.post
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --postCreate-- :::\n", queryWrapper);
      return Posts.create({}, queryWrapper).$promise.then(function (post) {
        return post;
      });
    }
  }
})();

// function searchPlace() {
//   let searchWord0 = vm.Model.searchWord0;
//   return placeFind({
//       name: { contains: searchWord0 }
//     })
//     .then((placesWrapper) => {
//       console.log("placesWrapper :::\n", placesWrapper);
//       return U.bindData(placesWrapper, vm.Model, 'places');
//     })
//     .then(() => {
//       if (vm.Model.places.length === 0) {
//         Message.alert('검색 하신 Bar가 없습니다', 'Bar이름을 확인하시고 다시 검색해주세요.');
//       }
//     })
//     .catch((err) => {
//       U.error(err);
//     });
// }

// function selectPlace(place) {
//   vm.Model.searchWord0 = place.name;
//   vm.Model.post.place = place.id;
//   vm.Model.places = [];
// }

// function placeFind(extraQuery, extraOperation) {
//   let queryWrapper = {
//     query: {
//       where: {},
//       limit: 50
//     }
//   };
//   angular.extend(queryWrapper.query.where, extraQuery);
//   angular.extend(queryWrapper.query, extraOperation);
//   return Places.find(queryWrapper).$promise
//     .then((placesWrapper) => {
//       return placesWrapper;
//     });
// }
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('PostCreateModel', PostCreateModel);

  PostCreateModel.$inject = [];

  function PostCreateModel() {

    var Model = {
      // searchWord0: '',
      post: {
        title: '',
        category: '', // '자유톡', '연애톡', '번개톡', '유머톡', 'NOTICE', 'FAQ', 'TALK-NOTICE'
        isAnnonymous: null,
        content: '',
        // commentCount: 0,
        // showInTalk: null,
        photos: []
      },
      // ass
      // comments: [],
      // owner: {}
      images: [], // mixture of photos, and files
      tempFiles: [], // hold selected image files
      files: [],
      create: [],
      destroy: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('PostListController', PostListController);

  PostListController.$inject = ['$scope', '$q', '$ionicPopover', '$window', 'PostListModel', 'U', 'Posts', 'Message'];

  function PostListController($scope, $q, $ionicPopover, $window, PostListModel, U, Posts, Message) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = PostListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.loadMore = loadMore;
    vm.find = find;
    vm.search = search;
    vm.destroy = destroy;

    //====================================================
    // View Posts
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      } else {
        U.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!vm.categoryPopover) {
        createCategoryPopover();
      }
      if (!vm.columnPopover) {
        createColumnPopover();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (postsWrapper) {
          console.log("postsWrapper :::\n", postsWrapper);
          U.bindData(postsWrapper, PostListModel, 'posts');
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.scrollTo(vm.Model);
      }
    }

    function onBeforeLeave() {
      removeModals();
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function loadMore() {
      var last = PostListModel.posts.length - 1;
      return postFind({
        updatedAt: {
          '<': PostListModel.posts[last].updatedAt
        }
      }).then(function (postsWrapper) {
        U.appendData(postsWrapper, vm.Model, 'posts');
      }).catch(function (err) {
        U.error(err);
      }).finally(function () {
        U.broadcast($scope);
      });
    }

    function search(searchWord) {
      U.loading(PostListModel);
      var extraQuery = {
        or: [{ title: { contains: searchWord } }, { content: { contains: searchWord } }]
      };

      // { owner: { contains: searchWord } },
      // { rating: { contains: searchWord } },
      if (!isNaN(Number(searchWord))) {
        extraQuery.or.push({ rating: Number(searchWord) });
      }
      console.log("extraQuery :::\n", extraQuery);

      return postFind(extraQuery).then(function (postsWrapper) {
        U.bindData(postsWrapper, PostListModel, 'posts');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroy(post, $index, $event) {
      $event.stopPropagation();
      Message.loading();
      return postDestroyPost({
        id: post.id
      }).then(function (post) {
        console.log("post :::\n", post);
        PostListModel.posts.splice($index, 1);
        Message.alert('리뷰 지우기 알림', '리뷰를 성공적으로 지웠습니다');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function find(extraQuery) {
      U.loading(PostListModel);
      vm.categoryPopover.hide();
      return postFind(extraQuery).then(function (postsWrapper) {
        U.bindData(postsWrapper, PostListModel, 'posts');
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    // Private
    //====================================================
    function init() {
      return postFind();
    }

    function reset() {}

    //====================================================
    //  Modals
    //====================================================
    function createCategoryPopover() {
      return $ionicPopover.fromTemplateUrl('state/Post/PostList/Popover/CategoryPopover.html', {
        scope: $scope
      }).then(function (popover) {
        vm.categoryPopover = popover;
      });
    }

    function createColumnPopover() {
      return $ionicPopover.fromTemplateUrl('state/Post/PostList/Popover/ColumnPopover.html', {
        scope: $scope
      }).then(function (popover) {
        vm.columnPopover = popover;
      });
    }

    function removeModals() {
      vm.columnPopover.remove();
      delete vm.columnPopover;
      vm.categoryPopover.remove();
      delete vm.categoryPopover;
    }

    //====================================================
    // REST
    //====================================================
    function postFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 51,
          sort: 'updatedAt DESC',
          populate: ['owner', 'place']
        }
      };
      if (vm.Model.selectedCategory !== 'ALL') {
        queryWrapper.query.where.category = vm.Model.selectedCategory;
      }
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.find(queryWrapper).$promise.then(function (postsWrapper) {
        return postsWrapper;
      });
    }

    function postDestroyPost(extraQuery) {
      var queryWrapper = {};
      angular.extend(queryWrapper, extraQuery);
      return Posts.destroy(queryWrapper).$promise.then(function (postsWrapper) {
        return postsWrapper;
      });
    }
  }
})();
'use strict';

/* beautify preserve:start */
(function () {
  'use strict';

  angular.module('app').factory('PostListModel', PostListModel);

  PostListModel.$inject = [];

  function PostListModel() {
    var Model = {
      handle: 'PostListModel',
      loading: false,
      posts: [],
      sort: {
        id: -1
      },
      selectedCategory: 'ALL',
      columnFilterOption: {
        'ALL': [{ name: 'title', show: true }, // columnNameObj
        { name: 'category', show: true }, { name: 'isAnnonymous', show: true }, { name: 'content', show: true }, { name: 'commentCount', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }],
        '자유톡': [{ name: 'title', show: true }, // columnNameObj
        { name: 'category', show: true }, { name: 'isAnnonymous', show: true }, { name: 'content', show: true }, { name: 'commentCount', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }],
        '연애톡': [{ name: 'title', show: true }, // columnNameObj
        { name: 'category', show: true }, { name: 'isAnnonymous', show: true }, { name: 'content', show: true }, { name: 'commentCount', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }],
        '번개톡': [{ name: 'title', show: true }, // columnNameObj
        { name: 'category', show: true }, { name: 'isAnnonymous', show: true }, { name: 'content', show: true }, { name: 'commentCount', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }],
        '유머톡': [{ name: 'title', show: true }, // columnNameObj
        { name: 'category', show: true }, { name: 'isAnnonymous', show: true }, { name: 'content', show: true }, { name: 'commentCount', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }],
        'TALK-NOTICE': [{ name: 'title', show: true }, // columnNameObj
        { name: 'category', show: true }, { name: 'content', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }],
        'NOTICE': [{ name: 'title', show: true }, // columnNameObj
        { name: 'category', show: true }, { name: 'content', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }],
        'FAQ': [{ name: 'title', show: true }, // columnNameObj
        { name: 'category', show: true }, { name: 'content', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }]
      }
    };

    return Model;
  }
})();
/* beautify preserve:end */
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('PostUpdateController', PostUpdateController);

  PostUpdateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', '$ionicModal', '$state', '$location', 'PostUpdateModel', 'Posts', 'U', 'Message', 'Upload', 'SERVER_URL'];

  function PostUpdateController($scope, $q, $timeout, $window, $ionicPopover, $ionicModal, $state, $location, PostUpdateModel, Posts, U, Message, Upload, SERVER_URL) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = PostUpdateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.update = update;
    vm.destroy = destroy;
    // vm.searchPlace = searchPlace;
    // vm.selectPlace = selectPlace;
    //====================================================
    //  View Posts
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!vm.selectBox1) {
        createSelectBox1();
      }
      if (!vm.selectBox2) {
        createSelectBox2();
      }
      if (!vm.selectBox3) {
        createSelectBox3();
      }
      if (!vm.selectBox4) {
        createSelectBox4();
      }
      if (!vm.provinceModal) {
        createProvinceModal();
      }
      if (!vm.keywordModal) {
        createKeywordModal();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (post) {
          U.PhotoClass.pushToImages(vm.Model.images, post.photos);
          return U.bindData(post, vm.Model, 'post');
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function update() {
      Message.loading();
      return updatePhotos().then(function (idsWrapper) {
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = U.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.post.photos, ids);
        vm.Model.post.photos = photos;
      }).then(function () {
        return postUpdate();
      }).then(function (post) {
        console.log("post :::\n", post);
        return Message.alert('글 수정 알림', '글이 성공적으로 수정 되었습니다.');
      }).then(function () {
        U.goToState('Main.Post.PostList');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroy() {
      return Message.confirm('글지우기', '정말로 지우시겠습니까?').then(function (yes) {
        if (yes) {
          Message.loading();
          return postDestroy({
            id: $state.params.id
          });
        } else {
          return $q.reject({ message: 'no' });
        }
      }).then(function (post) {
        console.log("post :::\n", post);
        return Message.alert('글 지우기 알림', '글을 성공적으로 지웠습니다');
      }).then(function () {
        U.goToState('Main.Post.PostList', null, 'back');
      }).catch(function (err) {
        if (err.message !== 'no') {
          U.error(err);
        }
      });
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return postFindOne().then(function (post) {
        return post;
      });
    }

    function reset() {
      var defaultObj = {
        // searchWord0: '',
        post: {
          title: '',
          category: '', // '자유톡', '연애톡', '번개톡', '유머톡', 'NOTICE', 'FAQ'
          isAnnonymous: null,
          content: '',
          // ass
          photos: []
        },
        // comments: [],
        // owner: {}
        images: [], // mixture of photos, and files
        tempFiles: [], // hold selected image files
        files: [],
        create: [],
        destroy: []

      };
      angular.copy(defaultObj, vm.Model);
      removeModals();
    }

    //====================================================
    //  Modals
    //====================================================
    function createSelectBox1() {
      return $ionicPopover.fromTemplateUrl('state/Post/PostUpdate/Popover/SelectBox1.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox1 = popover;
      });
    }

    function createSelectBox2() {
      return $ionicPopover.fromTemplateUrl('state/Post/PostUpdate/Popover/SelectBox2.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox2 = popover;
      });
    }

    function createSelectBox3() {
      return $ionicPopover.fromTemplateUrl('state/Post/PostUpdate/Popover/SelectBox3.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox3 = popover;
      });
    }

    function createSelectBox4() {
      return $ionicPopover.fromTemplateUrl('state/Post/PostUpdate/Popover/SelectBox4.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox4 = popover;
      });
    }

    function createProvinceModal() {
      return $ionicModal.fromTemplateUrl('state/Post/PostUpdate/Modal/ProvinceModal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.provinceModal = modal;
      });
    }

    function createKeywordModal() {
      return $ionicModal.fromTemplateUrl('state/Post/PostUpdate/Modal/KeywordModal.html', {
        id: 'keyword',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.keywordModal = modal;
      });
    }

    function removeModals() {
      vm.selectBox1.remove();
      delete vm.selectBox1;
      vm.selectBox2.remove();
      delete vm.selectBox2;
      vm.selectBox3.remove();
      delete vm.selectBox3;
      vm.selectBox4.remove();
      delete vm.selectBox4;
      vm.provinceModal.remove();
      delete vm.provinceModal;
      vm.keywordModal.remove();
      delete vm.keywordModal;
    }

    //====================================================
    //  REST
    //====================================================
    function postFindOne(extraQuery) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          },
          populate: [{
            property: 'photos',
            criteria: { sort: 'index ASC' }
          }]
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      return Posts.findOne(queryWrapper).$promise.then(function (post) {
        console.log("post :::\n", post);
        return post;
      });
    }

    function updatePhotos() {
      U.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      U.PhotoClass.processDestroy(vm.Model.images, vm.Model.destroy, vm.Model.post.photos);
      var uploadOptions = {
        url: SERVER_URL + '/photo/updatePhotos',
        method: 'PUT',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create,
            destroy: vm.Model.destroy
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      return promise.then(function (dataWrapper) {
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    function postUpdate(extraQuery) {
      if (vm.Model.post.category === 'NOTICE' || vm.Model.post.category === 'FAQ') {
        vm.Model.post.showInTalk = false;
      } else {
        vm.Model.post.showInTalk = true;
      }
      var queryWrapper = {
        query: vm.Model.post
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --postUpdate-- :::\n", queryWrapper);
      return Posts.update({}, queryWrapper).$promise.then(function (post) {
        return post;
      });
    }

    function postDestroy(extraQuery) {
      var queryWrapper = {};
      angular.extend(queryWrapper, extraQuery);
      return Posts.destroy(queryWrapper).$promise.then(function (postsWrapper) {
        return postsWrapper;
      });
    }
  }
})();

// function searchPlace() {
//   let searchWord0 = vm.Model.searchWord0;
//   return placeFind({
//       name: { contains: searchWord0 }
//     })
//     .then((placesWrapper) => {
//       console.log("placesWrapper :::\n", placesWrapper);
//       return U.bindData(placesWrapper, vm.Model, 'places');
//     })
//     .then(() => {
//       if (vm.Model.places.length === 0) {
//         Message.alert('검색 하신 Bar가 없습니다', 'Bar이름을 확인하시고 다시 검색해주세요.');
//       }
//     })
//     .catch((err) => {
//       U.error(err);
//     });
// }

// function selectPlace(place) {
//   vm.Model.searchWord0 = place.name;
//   vm.Model.post.place = place.id;
//   vm.Model.places = [];
// }

// function placeFind(extraQuery, extraOperation) {
//   let queryWrapper = {
//     query: {
//       where: {},
//       limit: 50
//     }
//   };
//   angular.extend(queryWrapper.query.where, extraQuery);
//   angular.extend(queryWrapper.query, extraOperation);
//   return Places.find(queryWrapper).$promise
//     .then((placesWrapper) => {
//       return placesWrapper;
//     });
// }
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('PostUpdateModel', PostUpdateModel);

  PostUpdateModel.$inject = [];

  function PostUpdateModel() {

    var Model = {
      // searchWord0: '',
      post: {
        title: '',
        category: '', // '자유톡', '연애톡', '번개톡', '유머톡', 'NOTICE', 'FAQ'
        isAnnonymous: null,
        content: '',
        // commentCount: 0,
        // showInTalk: null,
        photos: []
      },
      // ass
      // comments: [],
      // owner: {}
      images: [], // mixture of photos, and files
      tempFiles: [], // hold selected image files
      files: [],
      create: [],
      destroy: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('PushCreateController', PushCreateController);

  PushCreateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', '$ionicModal', '$state', '$location', 'PushCreateModel', 'Devices', 'U', 'Message'];

  function PushCreateController($scope, $q, $timeout, $window, $ionicPopover, $ionicModal, $state, $location, PushCreateModel, Devices, U, Message) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = PushCreateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.create = create;
    //====================================================
    //  View Pushs
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (message) {
          console.log("message :::\n", message);
          U.freeze(false);
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function create() {
      Message.loading();
      return pushCreate().then(function (push) {
        console.log("push :::\n", push);
        return Message.alert('푸쉬 전송 완료', '푸쉬 전송을 완료하였습니다.');
      }).then(function () {
        U.goBack();
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return $q.resolve({
        message: 'empty'
      });
    }

    function reset() {
      var defaultObj = {
        loading: false,
        push: {
          title: '',
          message: ''
        }
      };
      angular.copy(defaultObj, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================
    function pushCreate(extraQuery) {
      var queryWrapper = vm.Model.push;
      angular.extend(queryWrapper, extraQuery);
      console.log("queryWrapper --pushCreate-- :::\n", queryWrapper);
      return Devices.pushAll({}, queryWrapper).$promise.then(function (push) {
        return push;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('PushCreateModel', PushCreateModel);

  PushCreateModel.$inject = [];

  function PushCreateModel() {

    var Model = {
      loading: false,
      push: {
        title: '',
        message: ''
      }
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('ReviewListController', ReviewListController);

  ReviewListController.$inject = ['$scope', '$q', '$ionicPopover', '$window', 'ReviewListModel', 'U', 'Reviews', 'Message'];

  function ReviewListController($scope, $q, $ionicPopover, $window, ReviewListModel, U, Reviews, Message) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = ReviewListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.loadMore = loadMore;
    vm.findReview = findReview;
    vm.search = search;
    vm.destroy = destroy;

    //====================================================
    // View Reviews
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      } else {
        U.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!vm.categoryPopover) {
        createCategoryPopover();
      }
      if (!vm.columnPopover) {
        createColumnPopover();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (reviewsWrapper) {
          console.log("reviewsWrapper :::\n", reviewsWrapper);
          U.bindData(reviewsWrapper, ReviewListModel, 'reviews');
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.scrollTo(vm.Model);
      }
    }

    function onBeforeLeave() {
      removeModals();
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function loadMore() {
      var last = ReviewListModel.reviews.length - 1;
      return reviewFind({
        updatedAt: {
          '<': ReviewListModel.reviews[last].updatedAt
        }
      }).then(function (reviewsWrapper) {
        U.appendData(reviewsWrapper, vm.Model, 'reviews');
      }).catch(function (err) {
        U.error(err);
      }).finally(function () {
        U.broadcast($scope);
      });
    }

    function search(searchWord) {
      U.loading(ReviewListModel);
      var extraQuery = {
        or: [{ place: { contains: searchWord } }, { content: { contains: searchWord } }, { owner: { contains: searchWord } }]
      };

      // { rating: { contains: searchWord } },
      if (!isNaN(Number(searchWord))) {
        extraQuery.or.push({ rating: Number(searchWord) });
      }
      console.log("extraQuery :::\n", extraQuery);

      return reviewFind(extraQuery).then(function (reviewsWrapper) {
        U.bindData(reviewsWrapper, ReviewListModel, 'reviews');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroy(review, $index, $event) {
      $event.stopPropagation();
      Message.loading();
      return reviewDestroyReview({
        id: review.id
      }).then(function (review) {
        console.log("review :::\n", review);
        ReviewListModel.reviews.splice($index, 1);
        Message.alert('리뷰 지우기 알림', '리뷰를 성공적으로 지웠습니다');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function findReview(extraQuery) {
      U.loading(ReviewListModel);
      return reviewFind(extraQuery).then(function (reviewsWrapper) {
        U.bindData(reviewsWrapper, ReviewListModel, 'reviews');
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    // Private
    //====================================================
    function init() {
      return reviewFind();
    }

    function reset() {}

    //====================================================
    //  Modals
    //====================================================
    function createCategoryPopover() {
      return $ionicPopover.fromTemplateUrl('state/Review/ReviewList/Popover/CategoryPopover.html', {
        scope: $scope
      }).then(function (popover) {
        vm.categoryPopover = popover;
      });
    }

    function createColumnPopover() {
      return $ionicPopover.fromTemplateUrl('state/Review/ReviewList/Popover/ColumnPopover.html', {
        scope: $scope
      }).then(function (popover) {
        vm.columnPopover = popover;
      });
    }

    function removeModals() {
      vm.columnPopover.remove();
      delete vm.columnPopover;
      vm.categoryPopover.remove();
      delete vm.categoryPopover;
    }

    //====================================================
    // REST
    //====================================================
    function reviewFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 51,
          sort: 'updatedAt DESC',
          populate: ['owner', 'place']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Reviews.find(queryWrapper).$promise.then(function (reviewsWrapper) {
        return reviewsWrapper;
      });
    }

    function reviewDestroyReview(extraQuery) {
      var queryWrapper = {};
      angular.extend(queryWrapper, extraQuery);
      return Reviews.destroyReview(queryWrapper).$promise.then(function (reviewsWrapper) {
        return reviewsWrapper;
      });
    }
  }
})();
'use strict';

/* beautify preserve:start */
(function () {
  'use strict';

  angular.module('app').factory('ReviewListModel', ReviewListModel);

  ReviewListModel.$inject = [];

  function ReviewListModel() {
    var Model = {
      handle: 'ReviewListModel',
      loading: false,
      events: [],
      sort: {
        id: -1
      },
      selectedCategory: 'NA',
      columnFilterOption: {
        'NA': [{ name: 'place', show: true }, // columnNameObj
        { name: 'content', show: true }, { name: 'rating', show: true }, { name: 'owner', show: true }, { name: 'createdAt', show: true }]
      }
    };

    return Model;
  }
})();
/* beautify preserve:end */
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('ReviewCreateController', ReviewCreateController);

  ReviewCreateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', '$ionicModal', '$state', '$location', 'ReviewCreateModel', 'Reviews', 'Places', 'U', 'Message', 'Upload', 'SERVER_URL'];

  function ReviewCreateController($scope, $q, $timeout, $window, $ionicPopover, $ionicModal, $state, $location, ReviewCreateModel, Reviews, Places, U, Message, Upload, SERVER_URL) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = ReviewCreateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.create = create;
    vm.searchPlace = searchPlace;
    vm.selectPlace = selectPlace;
    //====================================================
    //  View Reviews
    //====================================================
    function onBeforeEnter() {
      if ($state.params.flag) {
        $location.hash($state.params.flag);
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!vm.selectBox1) {
        createSelectBox1();
      }
      if (!vm.selectBox2) {
        createSelectBox2();
      }
      if (!vm.selectBox3) {
        createSelectBox3();
      }
      if (!vm.selectBox4) {
        createSelectBox4();
      }
      if (!vm.provinceModal) {
        createProvinceModal();
      }
      if (!vm.keywordModal) {
        createKeywordModal();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (message) {
          console.log("message :::\n", message);
          U.freeze(false);
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function create() {
      Message.loading();
      return createPhotos().then(function (idsWrapper) {
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = U.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.review.photos, ids);
        vm.Model.review.photos = photos;
      }).then(function () {
        return reviewCreateReview();
      }).then(function (review) {
        console.log("review :::\n", review);
        return Message.alert('리뷰 등록 알림', '리뷰가 성공적으로 등록 되었습니다.');
      }).then(function () {
        U.goToState('Main.Review.ReviewList');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function searchPlace() {
      var searchWord0 = vm.Model.searchWord0;
      return placeFind({
        name: { contains: searchWord0 }
      }).then(function (placesWrapper) {
        console.log("placesWrapper :::\n", placesWrapper);
        return U.bindData(placesWrapper, vm.Model, 'places');
      }).then(function () {
        if (vm.Model.places.length === 0) {
          Message.alert('검색 하신 Bar가 없습니다', 'Bar이름을 확인하시고 다시 검색해주세요.');
        }
      }).catch(function (err) {
        U.error(err);
      });
    }

    function selectPlace(place) {
      vm.Model.searchWord0 = place.name;
      vm.Model.review.place = place.id;
      vm.Model.places = [];
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return $q.resolve({
        message: 'empty'
      });
    }

    function reset() {
      var defaultObj = {
        searchWord0: '',
        review: {
          rating: 5,
          content: '',
          // ass
          photos: [],
          place: '', // String
          owner: {}
        },
        places: [],
        images: [], // mixture of photos, and files
        tempFiles: [], // hold selected image files
        files: [],
        create: [],
        destroy: []
      };
      angular.copy(defaultObj, vm.Model);
      removeModals();
    }

    //====================================================
    //  Modals
    //====================================================
    function createSelectBox1() {
      return $ionicPopover.fromTemplateUrl('state/Review/ReviewCreate/Popover/SelectBox1.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox1 = popover;
      });
    }

    function createSelectBox2() {
      return $ionicPopover.fromTemplateUrl('state/Review/ReviewCreate/Popover/SelectBox2.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox2 = popover;
      });
    }

    function createSelectBox3() {
      return $ionicPopover.fromTemplateUrl('state/Review/ReviewCreate/Popover/SelectBox3.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox3 = popover;
      });
    }

    function createSelectBox4() {
      return $ionicPopover.fromTemplateUrl('state/Review/ReviewCreate/Popover/SelectBox4.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox4 = popover;
      });
    }

    function createProvinceModal() {
      return $ionicModal.fromTemplateUrl('state/Review/ReviewCreate/Modal/ProvinceModal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.provinceModal = modal;
      });
    }

    function createKeywordModal() {
      return $ionicModal.fromTemplateUrl('state/Review/ReviewCreate/Modal/KeywordModal.html', {
        id: 'keyword',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.keywordModal = modal;
      });
    }

    function removeModals() {
      vm.selectBox1.remove();
      delete vm.selectBox1;
      vm.selectBox2.remove();
      delete vm.selectBox2;
      vm.selectBox3.remove();
      delete vm.selectBox3;
      vm.selectBox4.remove();
      delete vm.selectBox4;
      vm.provinceModal.remove();
      delete vm.provinceModal;
      vm.keywordModal.remove();
      delete vm.keywordModal;
    }

    //====================================================
    //  REST
    //====================================================
    function createPhotos() {
      U.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      var uploadOptions = {
        url: SERVER_URL + '/photo/createPhotos',
        method: 'POST',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      return promise.then(function (dataWrapper) {
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    function reviewCreateReview(extraQuery) {
      var queryWrapper = {
        query: vm.Model.review
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --reviewCreateReview-- :::\n", queryWrapper);
      return Reviews.createReview({}, queryWrapper).$promise.then(function (review) {
        return review;
      });
    }

    function placeFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 50
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Places.find(queryWrapper).$promise.then(function (placesWrapper) {
        return placesWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('ReviewCreateModel', ReviewCreateModel);

  ReviewCreateModel.$inject = [];

  function ReviewCreateModel() {

    var Model = {
      searchWord0: '',
      review: {
        rating: 5,
        content: '',
        // ass
        photos: [],
        place: '', // String
        owner: {}
      },
      places: [],
      images: [], // mixture of photos, and files
      tempFiles: [], // hold selected image files
      files: [],
      create: [],
      destroy: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('ReviewUpdateController', ReviewUpdateController);

  ReviewUpdateController.$inject = ['$scope', '$q', '$timeout', '$window', '$ionicPopover', '$ionicModal', '$state', '$location', 'ReviewUpdateModel', 'Reviews', 'Places', 'U', 'Message', 'Upload', 'SERVER_URL'];

  function ReviewUpdateController($scope, $q, $timeout, $window, $ionicPopover, $ionicModal, $state, $location, ReviewUpdateModel, Reviews, Places, U, Message, Upload, SERVER_URL) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = ReviewUpdateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.update = update;
    vm.destroy = destroy;
    vm.searchPlace = searchPlace;
    vm.selectPlace = selectPlace;
    //====================================================
    //  View Reviews
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!vm.selectBox1) {
        createSelectBox1();
      }
      if (!vm.selectBox2) {
        createSelectBox2();
      }
      if (!vm.selectBox3) {
        createSelectBox3();
      }
      if (!vm.selectBox4) {
        createSelectBox4();
      }
      if (!vm.provinceModal) {
        createProvinceModal();
      }
      if (!vm.keywordModal) {
        createKeywordModal();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (review) {
          U.PhotoClass.pushToImages(vm.Model.images, review.photos);
          return U.bindData(review, vm.Model, 'review');
        }).catch(function (err) {
          U.error(err);
        });
      } else {
        U.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    // VM
    //====================================================
    function update() {
      Message.loading();
      return updatePhotos().then(function (idsWrapper) {
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = U.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.review.photos, ids);
        vm.Model.review.photos = photos;
      }).then(function () {
        return reviewUpdateReview();
      }).then(function (review) {
        console.log("review :::\n", review);
        return Message.alert('리뷰 수정 알림', '리뷰가 성공적으로 수정 되었습니다.');
      }).then(function () {
        U.goToState('Main.Review.ReviewList');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroy() {
      return Message.confirm('리뷰 지우기', '정말로 지우시겠습니까?').then(function (yes) {
        if (yes) {
          Message.loading();
          return reviewDestroyReview({
            id: $state.params.id
          });
        } else {
          return $q.reject({ message: 'no' });
        }
      }).then(function (review) {
        console.log("review :::\n", review);
        return Message.alert('리뷰 지우기 알림', '리뷰를 성공적으로 지웠습니다');
      }).then(function () {
        U.goToState('Main.Review.ReviewList', null, 'back');
      }).catch(function (err) {
        if (err.message !== 'no') {
          U.error(err);
        }
      });
    }

    function searchPlace() {
      var searchWord0 = vm.Model.searchWord0;
      return placeFind({
        name: { contains: searchWord0 }
      }).then(function (placesWrapper) {
        console.log("placesWrapper :::\n", placesWrapper);
        return U.bindData(placesWrapper, vm.Model, 'places');
      }).then(function () {
        if (vm.Model.places.length === 0) {
          Message.alert('검색 하신 Bar가 없습니다', 'Bar이름을 확인하시고 다시 검색해주세요.');
        }
      }).catch(function (err) {
        U.error(err);
      });
    }

    function selectPlace(place) {
      vm.Model.searchWord0 = place.name;
      vm.Model.review.place = place.id;
      vm.Model.places = [];
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return reviewFindOne().then(function (review) {
        vm.Model.searchWord0 = review.place.name;
        vm.Model.review.place = review.place.id;
        return review;
      });
    }

    function reset() {
      var defaultObj = {
        searchWord0: '',
        review: {
          rating: 5,
          content: '',
          // ass
          photos: [],
          place: '', // String
          owner: {}
        },
        places: [],
        images: [], // mixture of photos, and files
        tempFiles: [], // hold selected image files
        files: [],
        create: [],
        destroy: []
      };
      angular.copy(defaultObj, vm.Model);
      removeModals();
    }

    //====================================================
    //  Modals
    //====================================================
    function createSelectBox1() {
      return $ionicPopover.fromTemplateUrl('state/Review/ReviewUpdate/Popover/SelectBox1.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox1 = popover;
      });
    }

    function createSelectBox2() {
      return $ionicPopover.fromTemplateUrl('state/Review/ReviewUpdate/Popover/SelectBox2.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox2 = popover;
      });
    }

    function createSelectBox3() {
      return $ionicPopover.fromTemplateUrl('state/Review/ReviewUpdate/Popover/SelectBox3.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox3 = popover;
      });
    }

    function createSelectBox4() {
      return $ionicPopover.fromTemplateUrl('state/Review/ReviewUpdate/Popover/SelectBox4.html', {
        scope: $scope
      }).then(function (popover) {
        vm.selectBox4 = popover;
      });
    }

    function createProvinceModal() {
      return $ionicModal.fromTemplateUrl('state/Review/ReviewUpdate/Modal/ProvinceModal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.provinceModal = modal;
      });
    }

    function createKeywordModal() {
      return $ionicModal.fromTemplateUrl('state/Review/ReviewUpdate/Modal/KeywordModal.html', {
        id: 'keyword',
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        vm.keywordModal = modal;
      });
    }

    function removeModals() {
      vm.selectBox1.remove();
      delete vm.selectBox1;
      vm.selectBox2.remove();
      delete vm.selectBox2;
      vm.selectBox3.remove();
      delete vm.selectBox3;
      vm.selectBox4.remove();
      delete vm.selectBox4;
      vm.provinceModal.remove();
      delete vm.provinceModal;
      vm.keywordModal.remove();
      delete vm.keywordModal;
    }

    //====================================================
    //  REST
    //====================================================
    function reviewFindOne(extraQuery) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          },
          populate: ['photos', 'place']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      return Reviews.findOne(queryWrapper).$promise.then(function (review) {
        console.log("review :::\n", review);
        return review;
      });
    }

    function updatePhotos() {
      U.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      U.PhotoClass.processDestroy(vm.Model.images, vm.Model.destroy, vm.Model.review.photos);
      var uploadOptions = {
        url: SERVER_URL + '/photo/updatePhotos',
        method: 'PUT',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create,
            destroy: vm.Model.destroy
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      return promise.then(function (dataWrapper) {
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    function reviewUpdateReview(extraQuery) {
      var queryWrapper = {
        query: vm.Model.review
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --reviewCreateReview-- :::\n", queryWrapper);
      return Reviews.updateReview({}, queryWrapper).$promise.then(function (review) {
        return review;
      });
    }

    function placeFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          limit: 50
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Places.find(queryWrapper).$promise.then(function (placesWrapper) {
        return placesWrapper;
      });
    }

    function reviewDestroyReview(extraQuery) {
      var queryWrapper = {};
      angular.extend(queryWrapper, extraQuery);
      return Reviews.destroyReview(queryWrapper).$promise.then(function (reviewsWrapper) {
        return reviewsWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('ReviewUpdateModel', ReviewUpdateModel);

  ReviewUpdateModel.$inject = [];

  function ReviewUpdateModel() {

    var Model = {
      searchWord0: '',
      review: {
        rating: 5,
        content: '',
        // ass
        photos: [],
        place: '', // String
        owner: {}
      },
      places: [],
      images: [], // mixture of photos, and files
      tempFiles: [], // hold selected image files
      files: [],
      create: [],
      destroy: []
    };

    return Model;
  }
})();
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').controller('zCouponListController', zCouponListController);

  zCouponListController.$inject = ['$scope', '$state', '$q', 'zCouponListModel', 'Coupons', 'Message', 'U'];

  function zCouponListController($scope, $state, $q, zCouponListModel, Coupons, Message, U) {
    var initPromise;
    var noLoadingStates = ['Main.zCouponDetail'];
    var CouponList = this;
    CouponList.Model = zCouponListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    CouponList.refresh = refresh;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      if (!U.areSiblingViews(noLoadingStates)) {
        U.loading(zCouponListModel);
        initPromise = init();
      } else {
        U.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!U.areSiblingViews(noLoadingStates)) {
        return initPromise.then(function (couponsWrapper) {
          U.bindData(couponsWrapper, zCouponListModel, 'coupons');
        }).catch(function (err) {
          U.error(err);
        });
      } else {}
    }

    //====================================================
    //  Implementation
    //====================================================
    function refresh() {
      return init().then(function (couponsWrapper) {
        U.bindData(couponsWrapper, zCouponListModel, 'coupons');
      }).catch(function (err) {
        U.error(err);
      }).finally(function () {
        U.broadcast($scope);
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function init() {
      return couponFind();
    }

    //====================================================
    // REST
    //====================================================
    function couponFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            place: $state.params.id
          },
          // quantity: {
          //   '>': 0
          // }
          populates: ['photos']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Coupons.find(queryWrapper).$promise.then(function (couponsWrapper) {
        return couponsWrapper;
      });
    }
  } //end
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('zCouponListModel', zCouponListModel);

  zCouponListModel.$inject = [];

  function zCouponListModel() {

    var Model = {
      loading: true,
      coupons: [{
        id: 10,
        photos: [{
          id: 0,
          url: 'http://placehold.it/400x400'
        }],
        title: '파워퓌트니스',
        content: '휘트니스 한달 이용권 10% 할인',
        expirationDate: new Date(),
        totalQuantity: 20,
        usedQuantity: 15,
        quantity: 5
      }, {
        id: 11,
        photos: [{
          id: 0,
          url: 'http://placehold.it/400x400'
        }],
        title: '파워퓌트니스1',
        content: '휘트니스 한달 이용권 10% 할인 1',
        expirationDate: new Date(),
        totalQuantity: 20,
        usedQuantity: 5,
        quantity: 15
      }]
    };

    return Model;
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').controller('zCouponDetailController', zCouponDetailController);

  zCouponDetailController.$inject = ['$scope', '$ionicModal', '$state', '$q', 'zCouponDetailModel', 'Coupons', 'U', 'AppStorage', 'Message'];

  function zCouponDetailController($scope, $ionicModal, $state, $q, zCouponDetailModel, Coupons, U, AppStorage, Message) {

    var initPromise;
    var noLoadingStates = [];
    var CouponDetail = this;
    CouponDetail.Model = zCouponDetailModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('modal.hidden', function () {
      zCouponDetailModel.form.password = '';
    });

    CouponDetail.closeModal = closeModal;
    CouponDetail.useCoupon = useCoupon; // from modal
    CouponDetail.getCurrentDate = getCurrentDate; // from modal

    //====================================================
    // View Event
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(zCouponDetailModel);
        initPromise = init();
      } else {
        U.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!CouponDetail.modal) {
        createModal();
      }
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (coupon) {
          U.bindData(coupon, zCouponDetailModel, 'coupon');
        }).catch(function (err) {
          U.error(err);
        });
      } else {}
    }

    //====================================================
    //  Implementation
    //====================================================

    function closeModal() {
      CouponDetail.modal.hide();
    }

    function getCurrentDate() {
      return new Date();
    }

    function useCoupon() {
      Message.loading();
      return couponUse().then(function () {
        CouponDetail.modal.hide();
        Message.alert('쿠폰사용 알림', '쿠폰을 성공적으로 사용하였습니다.');
      }).catch(function (err) {
        CouponDetail.modal.hide();
        if (err.data.message[0] === '0') {
          return Message.alert('쿠폰사용 알림', '전부 사용한 쿠폰입니다.');
        }
      }).finally(function () {
        CouponDetail.modal.hide();
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function init() {
      return couponFindOne();
    }

    function createModal() {
      return $ionicModal.fromTemplateUrl('state/ZZZ/CouponDetail/Modal/CouponModal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        CouponDetail.modal = modal;
      });
    }

    //====================================================
    //  REST
    //====================================================
    function couponFindOne(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          },
          populate: ['photos']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Coupons.findOne(queryWrapper).$promise.then(function (coupon) {
        return coupon;
      });
    }

    function couponUse() {
      var queryWrapper = {
        query: {
          id: $state.params.id,
          password: zCouponDetailModel.form.password,
          usedBy: AppStorage.user.id
        }
      };
      return Coupons.use(queryWrapper).$promise.then(function (updatedCoupon) {
        return updatedCoupon;
      });
    }
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('zCouponDetailModel', zCouponDetailModel);

  zCouponDetailModel.$inject = [];

  function zCouponDetailModel() {

    var model = {
      loading: false,
      coupon: {},
      form: {
        password: ''
      }
    };

    return model;
  }
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zLoginController', zLoginController);

  zLoginController.$inject = ['$scope', 'zLoginModel', 'Users', 'U', 'Message', 'FACEBOOK_KEY', 'TWITTER_CONSUMER_KEY', 'TWITTER_CONSUMER_SECRET', 'GOOGLE_OAUTH_CLIENT_ID', 'AppStorage'];

  function zLoginController($scope, zLoginModel, Users, U, Message, FACEBOOK_KEY, TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, GOOGLE_OAUTH_CLIENT_ID, AppStorage) {

    var Login = this;
    Login.Model = zLoginModel;

    Login.localLogin = localLogin;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    //====================================================
    //  View events
    //====================================================
    function onBeforeEnter() {
      U.freeze(false);
    }

    //====================================================
    //  Implementation
    //====================================================
    function localLogin() {
      Message.loading();
      return userLogin().then(function (userWrapper) {
        Message.hide();
        console.log("---------- userWrapper ----------");
        console.log(userWrapper);
        AppStorage.user = userWrapper.user;
        AppStorage.token = userWrapper.token;
        AppStorage.isFirstTime = false;
        U.goToState('Main.MainTab.PostList.PostListRecent', null, 'forward');
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
        if (err.status === 403) {
          return Message.alert('로그인 알림', '비밀번호/이메일이 틀렸습니다. 다시 입력해주세요');
        } else {
          return Message.alert();
        }
      });
    }

    //====================================================
    //  REST
    //====================================================
    function userLogin() {
      return Users.login({}, {
        identifier: zLoginModel.form.identifier,
        password: zLoginModel.form.password
      }).$promise.then(function (userWrapper) {
        return userWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zLoginModel', zLoginModel);

  zLoginModel.$inject = [];

  function zLoginModel() {

    var model = {
      form: {
        identifier: null,
        password: null
      }
    };
    return model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zPasswordController', zPasswordController);

  zPasswordController.$inject = ['$scope', 'zPasswordModel', 'Users', 'Message', 'U'];

  function zPasswordController($scope, zPasswordModel, Users, Message, U) {
    var Password = this;
    Password.Model = zPasswordModel;
    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    Password.sendForm = sendForm;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      U.freeze(false);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  Implementation
    //====================================================
    function sendForm() {
      if (!validate()) {
        return Message.alert('비밀번호 변경 알림', '새로운 비밀번호와 재입력한 비밀번호가 다릅니다.');
      }
      return userChangePassword().then(function (data) {
        console.log("---------- data ----------");
        console.log(data);
        return Message.alert('비밀번호 변경 알림', data.message);
      }).then(function () {
        reset();
        U.goBack();
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
        Message.alert('비밀번호 변경 알림', err.data.message);
        reset();
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function validate() {
      if (zPasswordModel.form.newPassword !== zPasswordModel.newPasswordConfirm) {
        return false;
      } else if (true /*more logic*/) {
          // return false;
        }

      return true;
    }

    function reset() {
      zPasswordModel.form.oldPassword = '';
      zPasswordModel.form.newPassword = '';
      zPasswordModel.newPasswordConfirm = '';
    }

    //====================================================
    //  REST
    //====================================================
    function userChangePassword() {
      return Users.changePassword({
        oldPassword: zPasswordModel.form.oldPassword,
        newPassword: zPasswordModel.form.newPassword
      }).$promise;
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zPasswordModel', zPasswordModel);

  zPasswordModel.$inject = [];

  function zPasswordModel() {

    var Model = {
      form: {
        oldPassword: '',
        newPassword: ''
      },
      newPasswordConfirm: ''
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zPostCreateController', zPostCreateController);

  zPostCreateController.$inject = ['$scope', '$q', 'zPostCreateModel', 'Posts', 'U', 'Message'];

  function zPostCreateController($scope, $q, zPostCreateModel, Posts, U, Message) {
    var initPromise;
    var noLoadingStates = [];
    var PostCreate = this;
    PostCreate.Model = zPostCreateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    PostCreate.createPost = createPost;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(zPostCreateModel);
        initPromise = init();
      } else {
        U.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (message) {
          U.freeze(false);
          console.log("---------- message ----------");
          console.log(message);
        }).catch(function (err) {
          U.error(err);
        });
      } else {}
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  Implementation
    //====================================================
    function createPost() {
      Message.loading();
      return postCreate().then(function (createdPost) {
        console.log("---------- createdPost ----------");
        console.log(createdPost);
        return Message.alert('글작성 알림', '글을 성공적으로 작성하였습니다.');
      }).then(function () {
        U.goToState('Main.zPostList', null, 'back');
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function init() {
      return $q.resolve({
        message: 'empty'
      });
    }

    function reset() {
      zPostCreateModel.form.title = '';
      zPostCreateModel.form.content = '';
    }

    //====================================================
    //  REST
    //====================================================
    function postCreate() {
      var queryWrapper = {
        query: {
          category: 'CATEGORY_NAME-POST',
          title: zPostCreateModel.form.title,
          content: zPostCreateModel.form.content
        }
      };
      return Posts.create({}, queryWrapper).$promise.then(function (dataWrapper) {
        var post = dataWrapper.data;
        return post;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zPostCreateModel', zPostCreateModel);

  zPostCreateModel.$inject = [];

  function zPostCreateModel() {

    var Model = {
      form: {
        title: '',
        content: ''
      }
    };

    return Model;
  }
})();
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').controller('zPostDetailController', zPostDetailController);

  zPostDetailController.$inject = ['$scope', '$state', '$q', 'zPostDetailModel', 'Posts', 'Comments', 'Message', 'U'];

  function zPostDetailController($scope, $state, $q, zPostDetailModel, Posts, Comments, Message, U) {
    var initPromise;
    var noLoadingStates = [];
    var PostDetail = this;
    PostDetail.Model = zPostDetailModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    PostDetail.refresh = refresh;
    PostDetail.loadMoreComments = loadMoreComments;
    PostDetail.destroyPost = destroyPost;
    PostDetail.createComment = createComment;
    PostDetail.destroyComment = destroyComment;

    // App Specific
    PostDetail.showBubble = false;

    //====================================================
    // View Events
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(zPostDetailModel);
        initPromise = init();
      } else {
        U.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (array) {
          var post = array[0];
          var commentsWrapper = array[1];
          U.bindData(post, zPostDetailModel, 'post');
          U.bindData(commentsWrapper, zPostDetailModel, 'comments');
          console.log("---------- post ----------");
          console.log(post);
          console.log("---------- commentsWrapper ----------");
          console.log(commentsWrapper);
        }).catch(function (err) {
          U.error(err);
        });
      } else {}
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  Implementation
    //====================================================
    function refresh() {
      return init().then(function (array) {
        var post = array[0];
        var commentsWrapper = array[1];
        U.bindData(post, zPostDetailModel, 'post');
        U.bindData(commentsWrapper, zPostDetailModel, 'comments');
        console.log("---------- post ----------");
        console.log(post);
        console.log("---------- commentsWrapper ----------");
        console.log(commentsWrapper);
      }).catch(function (err) {
        U.error(err);
      }).finally(function () {
        U.broadcast($scope);
      });
    }

    function loadMoreComments() {
      var last = zPostDetailModel.comments.length - 1;
      return commentsFind({
        id: {
          '<': zPostDetailModel.comments[last].id
        }
      }).then(function (commentsWrapper) {
        U.appendData(commentsWrapper, zPostDetailModel, 'comments');
        console.log("---------- commentsWrapper ----------");
        console.log(commentsWrapper);
      }).catch(function (err) {
        U.error(err);
      }).finally(function () {
        U.broadcast($scope);
      });
    }

    function destroyPost() {
      Message.loading();
      return postsDestroy().then(function (destroyedPost) {
        console.log("---------- destroyedPost ----------");
        console.log(destroyedPost);
        return Message.alert('글삭제 알림', '글을 성공적으로 삭제하였습니다.');
      }).then(function () {
        U.goToState('Main.zPostList', null, 'back');
      }).catch(function (err) {
        U.error(err);
      });
    }

    function createComment() {
      Message.loading();
      return commentsCreate().then(function (createdComment) {
        console.log("---------- createdComment ----------");
        console.log(createdComment);
        refresh();
        return Message.alert('댓글달기 알림', '댓글을 성공적으로 작성하였습니다.');
      }).then(function () {
        reset();
      }).catch(function (err) {
        U.error(err);
      });
    }

    function destroyComment(commentId) {
      Message.loading();
      var extraQuery = {
        id: commentId
      };
      return commentsDestroy(extraQuery).then(function (destroyedComment) {
        console.log("---------- destroyedComment ----------");
        console.log(destroyedComment);
        refresh();
        return Message.alert('댓글 알림', '댓글을 성공적으로 삭제하였습니다.');
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function init() {
      return $q.all([postsFindOne(), commentsFind()]);
    }

    function reset() {
      U.resetSlides();
      PostDetail.showBubble = false;
      PostDetail.commentContent = '';
    }

    //====================================================
    // REST
    //====================================================
    function postsFindOne(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          },
          populate: ['owner', 'photos']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.findOne(queryWrapper).$promise.then(function (post) {
        return post;
      });
    }

    function postsDestroy(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          }
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.destroy(queryWrapper).$promise.then(function (destroyedPost) {
        return destroyedPost;
      });
    }

    function commentsFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            post: $state.params.id
          },
          sort: 'id DESC',
          limit: 20,
          populate: ['owner']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Comments.find(queryWrapper).$promise.then(function (commentsWrapper) {
        return commentsWrapper;
      });
    }

    function commentsCreate() {
      var queryWrapper = {
        query: {
          post: $state.params.id,
          content: PostDetail.form.commentContent
        }
      };
      return Comments.create({}, queryWrapper).$promise.then(function (createdComment) {
        return createdComment;
      });
    }

    function commentsDestroy(extraQuery) {
      var queryWrapper = {
        query: {
          where: {
            id: ''
          }
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      return Comments.destroy(queryWrapper).$promise.then(function (destroyedComment) {
        return destroyedComment;
      });
    }
  } //end
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zPostDetailModel', zPostDetailModel);

  zPostDetailModel.$inject = [];

  function zPostDetailModel() {

    var Model = {
      loading: false,
      post: {},
      comments: [],
      form: {
        commentContent: ''
      }
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zPostListController', zPostListController);

  zPostListController.$inject = ['$scope', '$q', 'zPostListModel', 'U', 'Posts'];

  function zPostListController($scope, $q, zPostListModel, U, Posts) {
    var initPromise;
    var noLoadingStates = ['Main.zPostDetail'];
    var PostList = this;
    PostList.Model = zPostListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    PostList.refresh = refresh;
    PostList.loadMore = loadMore;

    //====================================================
    // View Events
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(zPostListModel);
        initPromise = init();
      } else {
        U.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (postsWrapper) {
          console.log("---------- postsWrapper ----------");
          console.log(postsWrapper);
          U.bindData(postsWrapper, zPostListModel, 'posts');
        }).catch(function (err) {
          U.error(err);
        });
      } else {}
    }

    //====================================================
    //  Implementation
    //====================================================
    function refresh() {
      return init().then(function (postsWrapper) {
        console.log("---------- postsWrapper ----------");
        console.log(postsWrapper);
        U.bindData(postsWrapper, zPostListModel, 'posts');
      }).catch(function (err) {
        U.error(err);
      }).finally(function () {
        U.broadcast($scope);
      });
    }

    function loadMore() {
      var last = zPostListModel.posts.length - 1;
      return find({
        id: {
          '<': zPostListModel.posts[last].id
        }
      }).then(function (postsWrapper) {
        U.appendData(postsWrapper, zPostListModel, 'posts');
      }).catch(function (err) {
        U.error(err);
      }).finally(function () {
        U.broadcast($scope);
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function init() {
      return find();
    }

    //====================================================
    // REST
    //====================================================
    function find(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            category: 'CATEGORY_NAME-POST'
          },
          limit: 20,
          sort: 'updatedAt DESC',
          populate: ['owner']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.find(queryWrapper).$promise.then(function (postsWrapper) {
        return postsWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zPostListModel', zPostListModel);

  zPostListModel.$inject = [];

  function zPostListModel() {

    var Model = {
      loading: false,
      posts: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zProfileController', zProfileController);

  zProfileController.$inject = ['$scope', '$timeout', 'zProfileModel', 'Users', 'AppStorage', 'U', 'Photo', 'Message'];

  function zProfileController($scope, $timeout, zProfileModel, Users, AppStorage, U, Photo, Message) {
    var Profile = this;
    Profile.Model = zProfileModel;
    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    Profile.getPhoto = getPhoto;
    Profile.sendForm = sendForm;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      U.freeze(false);
    }

    function onAfterEnter() {
      return userFindOne().then(function (user) {
        console.log("---------- user ----------");
        console.log(user);
        $timeout(function () {
          AppStorage.user = user;
          zProfileModel.form = user;
          console.log("---------- zProfileModel.form ----------");
          console.log(zProfileModel.form);
        }, 0);
      }).catch(function (err) {
        return U.error(err);
      });
    }
    //====================================================
    //  Implementation
    //====================================================

    function getPhoto() {
      return Photo.get('gallery', 600, true, 300, 'square', 1).then(function (base64) {
        zProfileModel.form.files = [base64];
      }).catch(function (err) {
        console.log("---------- err.data.message === cancelled ----------");
        console.log(err.data.message);
        // U.error(err);
      });
    }

    function sendForm() {
      Message.loading();
      userUpdate().then(function (user) {
        console.log("---------- user ----------");
        console.log(user);
        Message.hide();
        return Message.alert('프로필 변경 알림.', '프로필을 성공적으로 변경하였습니다.');
      }).then(function () {
        U.goBack();
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
        Message.hide();
        Message.alert();
      });
    }

    //====================================================
    //  REST
    //====================================================
    function userFindOne() {
      return Users.findOne({
        id: AppStorage.user.id
      }).$promise;
    }

    function userUpdate() {
      return Users.update({}, {
        files: zProfileModel.form.files,
        name: zProfileModel.form.name,
        nickname: zProfileModel.form.nickname
      }).$promise;
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zProfileModel', zProfileModel);

  zProfileModel.$inject = [];

  function zProfileModel() {

    var model = {
      form: {
        files: [],
        name: '',
        nickname: ''
      }
    };

    return model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zPostUpdateController', zPostUpdateController);

  zPostUpdateController.$inject = ['$scope', '$state', '$q', 'zPostUpdateModel', 'U', 'Posts', 'Message'];

  function zPostUpdateController($scope, $state, $q, zPostUpdateModel, U, Posts, Message) {
    var initPromise;
    var noLoadingStates = [];
    var PostUpdate = this;
    PostUpdate.Model = zPostUpdateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    PostUpdate.updatePost = updatePost;

    //====================================================
    // View Events
    //====================================================
    function onBeforeEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        U.loading(zPostUpdateModel);
        initPromise = init();
      } else {
        U.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!U.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (post) {
          U.bindData(post, zPostUpdateModel, 'form');
          console.log("---------- post ----------");
          console.log(post);
        }).catch(function (err) {
          U.error(err);
        });
      } else {}
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  Implementation
    //====================================================
    function updatePost() {
      Message.loading();
      return postUpdate().then(function (updatedPost) {
        console.log("---------- updatedPost ----------");
        console.log(updatedPost);
        return Message.alert('글 수정 알림', '글수정을 완료하였습니다.');
      }).then(function () {
        U.goToState('Main.zPostDetail', {
          id: $state.params.id
        }, 'back');
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function init() {
      return postFindOne();
    }

    function reset() {
      zPostUpdateModel.form = {
        title: '',
        content: ''
      };
    }

    //====================================================
    //  REST
    //====================================================
    function postFindOne(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          }
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.findOne(queryWrapper).$promise.then(function (post) {
        return post;
      });
    }

    function postUpdate() {
      var queryWrapper = {
        query: {
          id: $state.params.id,
          title: zPostUpdateModel.form.title,
          content: zPostUpdateModel.form.content
        }
      };

      return Posts.update({}, queryWrapper).$promise.then(function (updatedPost) {
        return updatedPost;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('PostFitUpdateModel', PostFitUpdateModel);

  PostFitUpdateModel.$inject = [];

  function PostFitUpdateModel() {

    var Model = {
      form: {}
    };

    return Model;
  }
})();
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

(function () {
  'use strict';

  angular.module('app').controller('zSignupController', zSignupController);

  zSignupController.$inject = ['$scope', '$timeout', 'zSignupModel', 'Photo', 'Users', 'U', 'Message', 'Dom'];

  function zSignupController($scope, $timeout, zSignupModel, Photo, Users, U, Message, Dom) {

    var Signup = this;
    Signup.Model = zSignupModel;

    Signup.getPicture = getPicture;
    Signup.register = register;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      U.freeze(false);
    }

    //====================================================
    //  Implementation
    //====================================================
    function getPicture() {
      zSignupModel.imgLoading = true;
      return Photo.get('gallery', 800, true, 300, 'square', 1).then(function (base64) {
        zSignupModel.form.files = [];
        zSignupModel.form.files[0] = base64;
        $timeout(function () {
          zSignupModel.imgLoading = false;
        }, 2000);
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
        console.log("HAS TYPE: " + (typeof err === 'undefined' ? 'undefined' : _typeof(err)));
      });
    }

    function register() {
      if (!validate()) {
        return false;
      }
      Message.loading();
      zSignupModel.form.username = zSignupModel.form.email;
      return userRegister().then(function (data) {
        console.log("---------- data ----------");
        console.log(data);
        Message.alert('회원가입 알림', '회원가입을 성공적으로 하셨습니다.');
      }).then(function () {
        U.goToState('zLogin', null, 'back');
      }).catch(function (err) {
        U.error(err);
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function validate() {
      var alert = Message.alert.bind(Message, '회원가입 알림');
      var form = zSignupModel.form;
      if (zSignupModel.form.files.length === 0) {
        alert('사진을 등록해주세요');
        return false;
      } else if (!form.name) {
        alert('이름을 입력해주세요').then(function () {
          Dom.focusById('name');
        });
        return false;
      } else if (!form.nickname) {
        alert('별명을 입력해주세요').then(function () {
          Dom.focusById('nickname');
        });
        return false;
      } else if (!form.email) {
        alert('이메일을 입력해주세요').then(function () {
          Dom.focusById('email');
        });
        return false;
      } else if (form.password !== zSignupModel.confirmPassword) {
        alert('비밀번호를 동일하게 입력해주세요').then(function () {
          Dom.focusById('password');
        });
        return false;
      } else if (!validateEmail(form.email)) {
        alert('이메일이 아닙니다, 다시 입력해주세요').then(function () {
          Dom.focusById('email');
        });
        return false;
      } else if (!zSignupModel.agree) {
        alert('이용약관을 동의 해주시기 바랍니다');
        return false;
      } else {
        return true;
      }
    }

    function validateEmail(email) {
      var re = /\S+@\S+\.\S+/;
      return re.test(email);
    }

    //====================================================
    //  REST
    //====================================================
    function userRegister() {
      var form = zSignupModel.form;
      return Users.register({}, {
        files: form.files,
        name: form.name,
        nickname: form.nickname,
        email: form.email,
        username: form.username,
        password: form.password
      }).$promise.then(function (dataWrapper) {
        return dataWrapper.data;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zSignupModel', zSignupModel);

  zSignupModel.$inject = [];

  function zSignupModel() {

    var Model = {
      imgLoading: false,
      form: {
        files: [],
        name: '',
        nickname: '',
        email: '',
        username: '',
        password: ''
      },
      confirmPassword: null,
      agree: false
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zTermsController', zTermsController);

  zTermsController.$inject = ['$scope', 'zTermModel', 'U', 'APP_NAME_KOREAN'];

  function zTermsController($scope, zTermModel, U, APP_NAME_KOREAN) {
    var Terms = this;
    Terms.Model = zTermModel;

    Terms.appKorean = APP_NAME_KOREAN;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      U.freeze(false);
    }
    //====================================================
    //  Implementation
    //====================================================
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zTermsModel', zTermsModel);

  zTermsModel.$inject = [];

  function zTermsModel() {

    var model = {};

    return model;
  }
})();